[{"body":"Arduino IDEのインストール Arduino ホームページから「SOFTWARE」→「DOWNLOADS」をクリックし、Arduino IDE インストーラをダウンロードする。下記赤枠はWindowsの例。\n寄付しない場合はJUST DOWNLOADをクリックする。\nボード設定 「ツール」 →「 ボード」から、”Arduino Pro or Pro Mini”と”ATmega328P(3.3V,8MHz)”を選択。\nシリアルポートの選択 「ツール」→「 シリアルポート」から、COM番号を選択\nLeafonyにプログラムを書き込む  Basic Kitを組み立てる  「ファイル」→「スケッチ例」→「01.Basics」→「Blink」 「マイコンボードに書き込む」ボタンを押す  ライブラリのインストール Arduinoのライブラリは、通常以下の2カ所に保存されている。 1）C:\\Program Files (x86)\\Arduino\\libraries 2）C:\\Users\\ユーザ名\\Documents\\Arduino\\libraries\nArduino IDE をインストールした時、1）にライブラリが保存される。（Arduino IDE Standard Libraries） また、GitHubなどからダウンロードしたライブラリ（ZIPファイル）は、「スケッチ」→「ライブラリをインクルード」→「.ZIP形式のライブラリをインストール」を選択することで、 2)に保存される。\n1. Githubからライブラリをダウンロード\n「Clone or download」→「Download ZIP」をクリックする。\n2. ライブラリのインクルード\nArduinoを立ち上げ、スケッチ→ライブラリをインクルード→ZIP形式のライブラリうをインストールの順に選択して保存する。\nトラブルシューティング  USBシリアル変換ボードのデバイスドライバが見つからない場合  USBシリアル変換ドライバーをインストールすることで、AVR MCUへの書き込みが可能。Aruduino UNOと異なるため、要注意。 FTDI VCP Driverサイトからsetup executableをクリックしてインストールファイルをダウンロードし実行する。\n","excerpt":"Arduino IDEのインストール Arduino ホームページから「SOFTWARE」→「DOWNLOADS」をクリックし、Arduino IDE インストーラをダウンロードする。下記赤枠 …","ref":"/en/docs/environment/basic/","title":"Basic Kit"},{"body":"\n概要 AVRマイコン(Atmega328P)、Bluetooth LE、温湿度センサ、照度センサ、加速度センサを搭載したリーフと2cm立法のマグネット付きプラスチックケースが含まれており、簡単にIoTセンサデバイスを作ることができます。\n内容物  1 x AC02A BLE Sugar leaf 1 x AI01A 4-Sensors leaf 1 x AP01A AVR MCU leaf 1 x AV01A CR2032 leaf 1 x AX02A 29pin leaf 1 x AZ01A USB leaf 1 x AZ62A Connector Cover 1 x AZ64A Uppercase 1 x AZ65A Lowercase 1 x Screw driver 1 x CR2032 Coin cell 2 x M2*15mm Screw  リーフ一覧  AC02A BLE Sugar Silicon Labsの技的認証済みBLEモジュールBGM11S22F256GA-V2を搭載したリーフです。MCUリーフとはUARTで接続されます。無線の認証は、CE、FCC、ISED Canada、TELEC、KC South-Korea、NCC Taiwanを取得（SLICON LABS Module Data Sheet　Revision 1.2)。\nBasic Kit   AI01A 4-Sensors 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。MCUリーフとはI2Cで接続されます。\nBasic Kit   AP01A AVR MCU ATmega328Pを使用したリーフ。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタンを備えています。 USB接続する場合はUSB を接続、ICSPを使用する場合はShield を接続します。 Arduino IDE使用時は、ボードをArduino Pro or Pro　Mini、プロセッサをATmega328P(3.3V,8MHz)選択。\nBasic Kit   AV01A CR2032 CR2032コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\nBasic Kit   AX02A 29pin リーフI/Fの29ピン全てをスルーホールに接続したリーフです。\nBasic Kit   AZ01A USB AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USBのVBUS(5V)から降圧電源回路により3.3Vに変換し、各リーフにVBUSと3.3Vを供給します。\nBasic Kit  ","excerpt":"概要 AVRマイコン(Atmega328P)、Bluetooth LE、温湿度センサ、照度センサ、加速度センサを搭載したリーフと2cm立法のマグネット付きプラスチックケースが含まれており、簡単にIoT …","ref":"/en/docs/products/basic/","title":"Basic Kit"},{"body":"以下の手順で Leafony Basic Kit 開発環境の設定を行いましょう。\nArduino IDEのインストール Leafonyに書き込むプログラムは、Arduino IDEを使って開発します。\nArduino ホームページから「SOFTWARE」→「DOWNLOADS」をクリックし、Arduino IDE インストーラをダウンロードしましょう。\nWindowsの場合は下記の手順でダウンロードできます。\n ライブラリのインストール 一部のリーフを使用するには、追加のライブラリのインストールが必要となる場合があります。 下記の手順を参考に、あらかじめ全てののライブラリをインストールしておきましょう。\n1. 使用するライブラリ Basic Kit、Extension Kitで使用するライブラリは以下の通りです。\n  リーフ名 必要なライブラリ名 推奨バージョン 説明     BLE TBGLib  Bluetoothライブラリ   4-Sensors HTS221.h  温湿度センサライブラリ   ClosedCube_OPT3001.h  照度センサライブラリ   Adafruit_LSI3DH.h 1.1.2 加速度センサライブラリ   LCD ST7032.h  LCDライブラリ   AVR MCU MsTimer2.h  タイマ割り込みライブラリ   RTC\u0026MicroSD RTClib.h  RTCライブラリ    2. Githubからライブラリをダウンロード 上記表のリンクをクリックすると、ライブラリのGitHubリポジトリにアクセスします。 Clone or download → Download ZIPをクリックし、ライブラリをダウンロードしましょう。\n3. ライブラリのインクルード Arduinoを立ち上げ、スケッチ → ライブラリをインクルード → ZIP形式のライブラリをインストールの順に選択して、先程ダウンロードしたZIPファイルを読み込みましょう。\nLeafonyをPCと接続 図のようにLeafonyを組み立てて、USBでPCと接続しましょう。\nボード設定 Arduino IDEでLeafonyの開発を行うために、下記の手順でIDEの設定を行いましょう。\n ツール → ボードから、Arduino Pro or Pro Miniを選択、プロセッサでATmega328P (3.3V,8MHz)を選択  \nツール → シリアルポートから、Leafonyが接続されているシリアルポートを選択  Leafonyにプログラムを書き込む  Arduino IDEでファイル → スケッチ例 → 01.Basics → Blinkをクリックし、サンプルプロジェクトを開きましょう。 マイコンボードに書き込むボタンを押すをLeafonyにプログラムが書き込まれます。 AP01A AVR MCUに搭載されたLEDが点滅していることが確認できれば完了です。  困ったときは うまく動かないときはで解決方法を探してみましょう。\n","excerpt":"以下の手順で Leafony Basic Kit 開発環境の設定を行いましょう。\nArduino IDEのインストール Leafonyに書き込むプログラムは、Arduino IDEを使って開発します。 …","ref":"/docs/environment/basic/","title":"Basic Kit"},{"body":"\n概要 AVRマイコン(Atmega328P)、Bluetooth LE、温湿度センサ、照度センサ、加速度センサを搭載したリーフと2cm立法のマグネット付きプラスチックケースが含まれており、簡単にIoTセンサデバイスを作ることができます。\n内容物  1 x AC02A BLE Sugar leaf 1 x AI01A 4-Sensors leaf 1 x AP01A AVR MCU leaf 1 x AV01A CR2032 leaf 1 x AX02A 29pin leaf 1 x AZ01A USB leaf 1 x AZ62A Connector Cover 1 x AZ64A Uppercase 1 x AZ65A Lowercase 1 x Screw driver 1 x CR2032 Coin cell 2 x M2*15mm Screw  リーフ一覧  AC02A BLE Sugar Silicon Labsの技的認証済みBLEモジュールBGM11S22F256GA-V2を搭載したリーフです。MCUリーフとはUARTで接続されます。無線の認証は、CE、FCC、ISED Canada、TELEC、KC South-Korea、NCC Taiwanを取得（SLICON LABS Module Data Sheet　Revision 1.2)。\nBasic Kit   AI01A 4-Sensors 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。MCUリーフとはI2Cで接続されます。\nBasic Kit   AP01A AVR MCU ATmega328Pを使用したリーフ。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタンを備えています。 USB接続する場合はUSB を接続、ICSPを使用する場合はShield を接続します。 Arduino IDE使用時は、ボードをArduino Pro or Pro　Mini、プロセッサをATmega328P(3.3V,8MHz)選択。\nBasic Kit   AV01A CR2032 CR2032コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\nBasic Kit   AX02A 29pin リーフI/Fの29ピン全てをスルーホールに接続したリーフです。\nBasic Kit   AZ01A USB AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USBのVBUS(5V)から降圧電源回路により3.3Vに変換し、各リーフにVBUSと3.3Vを供給します。\nBasic Kit  ","excerpt":"概要 AVRマイコン(Atmega328P)、Bluetooth LE、温湿度センサ、照度センサ、加速度センサを搭載したリーフと2cm立法のマグネット付きプラスチックケースが含まれており、簡単にIoT …","ref":"/docs/products/basic/","title":"Basic Kit"},{"body":"  Basic Kit A1.0は、スマートフォンやパソコンに、Bluetoothを使って温度、湿度、照度、傾きセンサの値を送信し、簡単に表示できます。 スマートフォンやパソコンにセンサの値を表示させるには、ソフトウェア（Web Bluetooth）が必要です。 Web Bluetooth は、Android、Mac、WindowsのGoogle Chrome に対応しており、OSによって対応バージョンが異なります。詳細は、Implementation Statusを参照願います。 iPhoneの場合は、アプリ（有償）をダウンロードすれば、使えます。まずは、iPhoneの例の動画をご覧ください。  Android/Mac OS/Windowsの場合  Android 6.0 Marshmallow 以降、OS X Yosemite 以降、Windows 10 version 1703以降 でなければ、動作しません。端末のバージョンを確認してください。 Google Chromeウェブブラウザを立ち上げます。MacやWindowsの端末で、Chromeが無い場合は、インストールしてください。 Windowsの場合、Chromeのアドレスバーにchrome://flags/#enable-experimental-web-platform-features を入力し、enterを押し、Experimental Web Platform featuresでEnableを選択します。Android、Macの端末の場合は不要です。 次に、下記のリンクにアクセスするとアプリが立ち上がります。 https://trillion-node.org/wp/wp-content/SW/sensor-trillion-app/index.html Basic Kitの電池リーフに付属のコイン電池を入れて、電池リーフのスイッチをオンにします。 「Connect」 ボタンを押して「Leaf_A_xxxxx..」を選択後、「ペア設定」ボタンを押します。画面にセンサの値が表示されます。  iPhone/iPadの場合  App StoreからWebBLE (有償)をダウンロードします。 WebBLEを立ち上げ、一番上にあるアドレスバーに以下のURLを貼り付けてください。 https://trillion-node.org/wp/wp-content/SW/sensor-trillion-app/index.html WebBLEの「Connect」 ボタンを押して「Leaf_A_xxxxx..」を選択後、「Done」ボタンを押します。画面にセンサの値が表示されます。 画面上に「Download CSV 」のボタンはありますが、iPhoneでは使用できません。  重要：クイックスタートのプログラム等を詳しく知りたい方へは、Web Bluetoothを使ってセンサの値を表示　を参照してください。\n","excerpt":"Basic Kit A1.0は、スマートフォンやパソコンに、Bluetoothを使って温度、湿度、照度、傾きセンサの値を送信し、簡単に表示できます。 スマートフォンやパソコンにセンサの値を表示させるに …","ref":"/en/docs/getting-started/basic/","title":"Basic Kit A1.0"},{"body":"  Basic Kit A1.0は、スマートフォンやパソコンに、Bluetoothを使って温度、湿度、照度、傾きセンサの値を送信し、簡単に表示できます。 スマートフォンやパソコンにセンサの値を表示させるには、ソフトウェア（Web Bluetooth）が必要です。 Web Bluetooth は、Android、Mac、WindowsのGoogle Chrome に対応しており、OSによって対応バージョンが異なります。詳細は、Implementation Statusを参照願います。 iPhoneの場合は、アプリ（有償）をダウンロードすれば、使えます。まずは、iPhoneの例の動画をご覧ください。  Android/Mac OS/Windowsの場合  Android 6.0 Marshmallow 以降、OS X Yosemite 以降、Windows 10 version 1703以降 でなければ、動作しません。端末のバージョンを確認してください。 Google Chromeウェブブラウザを立ち上げます。MacやWindowsの端末で、Chromeが無い場合は、インストールしてください。 Windowsの場合、Chromeのアドレスバーにchrome://flags/#enable-experimental-web-platform-features を入力し、enterを押し、Experimental Web Platform featuresでEnableを選択します。Android、Macの端末の場合は不要です。 次に、下記のリンクにアクセスするとアプリが立ち上がります。 https://trillion-node.org/wp/wp-content/SW/sensor-trillion-app/index.html Basic Kitの電池リーフに付属のコイン電池を入れて、電池リーフのスイッチをオンにします。 「Connect」 ボタンを押して「Leaf_A_xxxxx..」を選択後、「ペア設定」ボタンを押します。画面にセンサの値が表示されます。  iPhone/iPadの場合  App StoreからWebBLE (有償)をダウンロードします。 WebBLEを立ち上げ、一番上にあるアドレスバーに以下のURLを貼り付けてください。 https://trillion-node.org/wp/wp-content/SW/sensor-trillion-app/index.html WebBLEの「Connect」 ボタンを押して「Leaf_A_xxxxx..」を選択後、「Done」ボタンを押します。画面にセンサの値が表示されます。 画面上に「Download CSV 」のボタンはありますが、iPhoneでは使用できません。  重要：クイックスタートのプログラム等を詳しく知りたい方へは、Web Bluetoothを使ってセンサの値を表示　を参照してください。\n","excerpt":"Basic Kit A1.0は、スマートフォンやパソコンに、Bluetoothを使って温度、湿度、照度、傾きセンサの値を送信し、簡単に表示できます。 スマートフォンやパソコンにセンサの値を表示させるに …","ref":"/docs/getting-started/basic/","title":"Basic Kit A1.0"},{"body":"Leafony bus の仕様 Leafony busは、複数のリーフが電気信号および電源接続を行う共通経路部。リーフの相互接続を可能にするために、Leafony busは、リーフの20mm x 5.5mm領域の電気的及び、物理的な仕様が定められています。\nピンアウト コネクタ形状  基板の厚さは、t=0.8。パッド部分は、金めっき。レイアウト図のデータは（dxf、、KiCad、EAGLE)は、AX02A 29pin を参照願います。  コネクタの取り付け・取り外し リーフ基板にコネクタを取り付ける、または、外す場合は下図のように行ってください。\n 取り付け   取り外し  コネクタの試験結果 AX61Aコネクタ仕様書を参考\n接続不良時の対処 Connectorや基板の接点に汚れが付着すると、接続不良が生じることがあります。その場合、無水エタノールを含ませた紙製ウエスで払拭してください。それでも改善しない場合は、Connectorを交換してください。\nライセンス  Leafony busのアートワークの著作者は、Leafony Systems 社です。ライセンスは、 表示 4.0 国際(CC BY 4.0) で、提供されています。なお、著作権表示や無保証を参照する表示は、ありません。Leafony bus以外は、Leafony Systems社は、著作権を主張することはありません。 Leafony busのアートワークをコピーして、使用する場合は、「この製品の一部は、Leafony SystemsによるLeafony busのアートワークを利用しています。」と表示をお願いします。  ","excerpt":"Leafony bus の仕様 Leafony busは、複数のリーフが電気信号および電源接続を行う共通経路部。リーフの相互接続を可能にするために、Leafony busは、リーフの20mm x …","ref":"/en/docs/leaf/leafonybus/","title":"Leafony bus"},{"body":"Leafony bus の仕様 Leafony busは、複数のリーフが電気信号および電源接続を行う共通経路部。リーフの相互接続を可能にするために、Leafony busは、リーフの20mm x 5.5mm領域の電気的及び、物理的な仕様が定められています。\nピンアウト コネクタ形状  基板の厚さは、t=0.8。パッド部分は、金めっき。レイアウト図のデータは（dxf、、KiCad、EAGLE)は、AX02A 29pin を参照願います。  コネクタの取り付け・取り外し リーフ基板にコネクタを取り付ける、または、外す場合は下図のように行ってください。\n 取り付け   取り外し  コネクタの試験結果 AX61Aコネクタ仕様書を参考\n接続不良時の対処 Connectorや基板の接点に汚れが付着すると、接続不良が生じることがあります。その場合、無水エタノールを含ませた紙製ウエスで払拭してください。それでも改善しない場合は、Connectorを交換してください。\nライセンス  Leafony busのアートワークの著作者は、Leafony Systems 社です。ライセンスは、 表示 4.0 国際(CC BY 4.0) で、提供されています。なお、著作権表示や無保証を参照する表示は、ありません。Leafony bus以外は、Leafony Systems社は、著作権を主張することはありません。 Leafony busのアートワークをコピーして、使用する場合は、「この製品の一部は、Leafony SystemsによるLeafony busのアートワークを利用しています。」と表示をお願いします。  ","excerpt":"Leafony bus の仕様 Leafony busは、複数のリーフが電気信号および電源接続を行う共通経路部。リーフの相互接続を可能にするために、Leafony busは、リーフの20mm x …","ref":"/docs/leaf/leafonybus/","title":"Leafony bus"},{"body":"概要 AVR MCUリーフに搭載されたLEDを1秒おきに点灯/消灯させます。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty     AP01A AVR MCU 1   AZ01A USB 1   AV01A CR2032 1   AZ62A コネクタカバー 1    CR2032 コイン電池 1    M2ネジ 2    リーフの組み立て 下図のようにリーフを組み立てましょう。\nソースコード Arduino IDEで下記のプログラムを書きましょう。\n//===================================================================== // Blink // // (c) 2020 Trillion-Node Study Group // Released under the MIT license // https://opensource.org/licenses/MIT // // Rev.00 2020/05/05 First release //=====================================================================  void setup() { // LEDピンを出力ピンに設定  pinMode(LED_BUILTIN, OUTPUT); } void loop() { digitalWrite(LED_BUILTIN, HIGH); // LEDを点灯  delay(1000); // 1秒待つ  digitalWrite(LED_BUILTIN, LOW); // LEDを消灯  delay(1000); // 1秒待つ } ","excerpt":"概要 AVR MCUリーフに搭載されたLEDを1秒おきに点灯/消灯させます。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty     AP01A AVR …","ref":"/docs/examples/basic/blink/","title":"LED点滅"},{"body":"","excerpt":"","ref":"/en/docs/overview/","title":"Overview"},{"body":"Leafonyとは トリリオンノード・エンジンには以下のような特徴があり、製品名はLeafony（リーフォニー）です。LeafonyはIoT/CPSシステムやアプリ、サービスの研究開発効率を断然アップさせます。ビデオも同時にご覧ください。\n  超小型で組立簡単: 1円玉大の電子基板モジュール（リーフ）ですが、新規研究開発されたコネクタによって、組立はブロック玩具のように簡単。\n  超低消費電力: 低消費電力性に優れています。すべてのリーフにはスタンバイモードやソフトウェアで制御できる電源スイッチ装備されていて、コイン電池でも動作します。\n  オープンソース・ハード／ソフト: 商用でも無償でフリーに使える仕様・回路図・パターン図などのハードウェア情報が公開されています。ソフトウェアもすでに数万本あるフリーのArduinoソフトウェアが使えます。その他のソフトウェアでも使えます。\n  リーフの製作が簡単: リーフを作るときには、特殊な技術やコネクタは不要。Leafonyコネクタを後で手で付けられるなど、あなた自身の独自リーフも短工期で簡単に作れ、研究開発効率が断然アップします。\n  \n詳細はこちらの資料をご覧ください。\n利用シーン  企業  IoTのProof of Concept (PoC) R\u0026amp;D、実証実験、社会課題を解く IoTシステム試作サービス レファレンスモデルの作製 自社部品／技術の販売ツール 技術の再利用や伝承   個人  新しいアプリ サービスの探査 手軽なガジェット創り   教育・大学  IoT教育 研究／実験 研究成果をデモし実用化加速    はじめてみよう さっそくLeafonyを使ってみましょう。\n クイックスタート 開発環境設定 サンプルデザイン  ","excerpt":"Leafonyとは トリリオンノード・エンジンには以下のような特徴があり、製品名はLeafony（リーフォニー）です。LeafonyはIoT/CPSシステムやアプリ、サービスの研究開発効率を断然アップ …","ref":"/docs/overview/","title":"はじめに"},{"body":"Arduino IDEのインストール Arduino ホームページから「SOFTWARE」→「DOWNLOADS」をクリックし、Arduino IDE インストーラをダウンロードする。下記赤枠はWindowsの例。\n寄付しない場合はJUST DOWNLOADをクリックする。\nボード設定 ESP32 MCUをArduino IDEで使用するには、Arduino core for the ESP32 のインストールが必要です。\n Arduino IDEのファイル→環境設定を開き、”追加のボードマネージャのURL:”に、下記URLを入力してください。 https://dl.espressif.com/dl/package_esp32_index.json  ツール→ボード→ボードマネージャを選択し、”全て”の右側に”esp32″と入力し、esp32 by Espressifl Systemsが表示されるので”インストール”のボタンを押します。  ツール→ボード→ESP32 Dev Moduleを選択すれば、ESP32 MCUが使えるようになります。  サンプルデザインで動作確認  「ファイル」→「スケッチ例」→「01.Basics」→「Blink」 「マイコンボードに書き込む」ボタンを押す  ライブラリのインストール Arduinoのライブラリは、通常以下の2カ所に保存されている。 1）C:\\Program Files (x86)\\Arduino\\libraries 2）C:\\Users\\ユーザ名\\Documents\\Arduino\\libraries\nArduino IDE をインストールした時、1）にライブラリが保存される。（Arduino IDE Standard Libraries） また、GitHubなどからダウンロードしたライブラリ（ZIPファイル）は、「スケッチ」→「ライブラリをインクルード」→「.ZIP形式のライブラリをインストール」を選択することで、 2)に保存される。\n1. Githubからライブラリをダウンロード\n「Clone or download」→「Download ZIP」をクリックする。\n2. ライブラリのインクルード\nArduinoを立ち上げ、スケッチ→ライブラリをインクルード→ZIP形式のライブラリうをインストールの順に選択して保存する。\n","excerpt":"Arduino IDEのインストール Arduino ホームページから「SOFTWARE」→「DOWNLOADS」をクリックし、Arduino IDE インストーラをダウンロードする。下記赤枠 …","ref":"/en/docs/environment/esp32/","title":"ESP32 Wi-Fi Kit"},{"body":"以下の手順で Leafony ESP32 Wi-Fi Kit 開発環境の設定を行いましょう。\nArduino IDEのインストール Leafonyに書き込むプログラムは、Arduino IDEを使って開発します。\nArduino ホームページから「SOFTWARE」→「DOWNLOADS」をクリックし、Arduino IDE インストーラをダウンロードしましょう。\nWindowsの場合は下記の手順でダウンロードできます。\n ボード設定 ESP32 MCUをArduino IDEで使用するには、Arduino core for the ESP32 のインストールが必要です。\n Arduino IDEのファイル → 環境設定を開き、追加のボードマネージャのURL:に、下記URLを入力してください。  https://dl.espressif.com/dl/package_esp32_index.json ツール→ボード→ボードマネージャを選択し、esp32 by Espressifl Systemsを検索し、インストールのボタンを押しましょう。  ツール → ボード → ESP32 Dev Moduleを選択すれば、ESP32 MCUが使えるようになります。  サンプルデザインで動作確認  「ファイル」→「スケッチ例」→「01.Basics」→「Blink」 「マイコンボードに書き込む」ボタンを押す  ライブラリのインストール 一部のリーフを使用するには、追加のライブラリのインストールが必要となる場合があります。 下記の手順を参考に、あらかじめ全てののライブラリをインストールしておきましょう。\n1. 使用するライブラリ Basic Kit、Extension Kitで使用するライブラリは以下の通りです。\n  リーフ名 必要なライブラリ名 推奨バージョン 説明   BLE TBGLib  Bluetoothライブラリ   4-Sensors Adafruit_Sensor.h  ユニファイドセンサドライバ   HTS221.h  温湿度センサライブラリ   ClosedCube_OPT3001.h  照度センサライブラリ   Adafruit_LSI3DH.h 1.1.2 加速度センサライブラリ   LCD ST7032.h  LCDライブラリ   AVR MCU MsTimer2.h  タイマ割り込みライブラリ   RTC\u0026MicroSD RTClib.h  RTCライブラリ   2. Githubからライブラリをダウンロード 上記表のリンクをクリックすると、ライブラリのGitHubリポジトリにアクセスします。 Clone or download → Download ZIPをクリックし、ライブラリをダウンロードしましょう。\n3. ライブラリのインクルード Arduinoを立ち上げ、スケッチ → ライブラリをインクルード → ZIP形式のライブラリをインストールの順に選択して、先程ダウンロードしたZIPファイルを読み込みましょう。\n","excerpt":"以下の手順で Leafony ESP32 Wi-Fi Kit 開発環境の設定を行いましょう。\nArduino IDEのインストール Leafonyに書き込むプログラムは、Arduino IDEを使って …","ref":"/docs/environment/esp32/","title":"ESP32 Wi-Fi Kit"},{"body":" ESP32 Wi-Fi Kit A1.0には、既に組み立てられたハードウェアが入っています。そのままで、スマートフォンやパソコンにWi-Fiを使ってタッチセンサの値を送信し、簡単に表示できます。 下記SSIDとパスワードでESP32 Wi-Fi Kitとパソコン等を接続します。\nSSID：Leafony_ESP32-AP\nパスワード：password ブラウザを起動して、下記URLにアクセスしてください。\nhttp://192.168.4.1 29pin headerの7、9、22、24、26、28ピンがタッチセンサに割り当てられております。\nピンに触れると静電容量が減るため、値が減少します。値が閾値20以下になると”Touch detected”と表示されます。 24ピンはRTC\u0026amp;microSDと干渉しているため、サンプルスケッチでは非表示にしています。\n検出閾値は、スケッチで変更可能です。以下の写真では、指先で26ピンに触れています。   26ピンに触れていると、以下のようにブラウザの表示が変化します。　  重要：クイックスタートのプログラム等を詳しく知りたい方は、こちらを参照してください。\nより深く理解したい方へ   ESP32 MCUのスケッチを書く方へ\n以下に注意点が纏めてありますので、まずはお読みください。\n ESP32 MCU ご使用時の注意点 https://garretlab.web.fc2.com/arduino/esp32/    他のMCUからESP32 MCUのWi-Fiを制御する方へ\n以下に注意点が纏めてありますので、まずはお読みください。\n ESP32 MCUをATコマンドで使用する場合    ESP32 Wi-Fi Kitを固定したい方へ\nESP32 Wi-Fi Kitに同梱しているNut Plateの材質は、鉄（めっき処理）にしました。マグネットが、同梱しているので、冷蔵庫に取り付けることが容易にできます。\n  ","excerpt":" ESP32 Wi-Fi Kit A1.0には、既に組み立てられたハードウェアが入っています。そのままで、スマートフォンやパソコンにWi-Fiを使ってタッチセンサの値を送信し、簡単に表示できます。 下 …","ref":"/en/docs/getting-started/esp32/","title":"ESP32 Wi-Fi Kit A1.0"},{"body":" ESP32 Wi-Fi Kit A1.0には、既に組み立てられたハードウェアが入っています。そのままで、スマートフォンやパソコンにWi-Fiを使ってタッチセンサの値を送信し、簡単に表示できます。 下記SSIDとパスワードでESP32 Wi-Fi Kitとパソコン等を接続します。\nSSID：Leafony_ESP32-AP\nパスワード：password ブラウザを起動して、下記URLにアクセスしてください。\nhttp://192.168.4.1 29pin headerの7、9、22、24、26、28ピンがタッチセンサに割り当てられております。\nピンに触れると静電容量が減るため、値が減少します。値が閾値20以下になると”Touch detected”と表示されます。 24ピンはRTC\u0026amp;microSDと干渉しているため、サンプルスケッチでは非表示にしています。\n検出閾値は、スケッチで変更可能です。以下の写真では、指先で26ピンに触れています。   26ピンに触れていると、以下のようにブラウザの表示が変化します。　  重要：クイックスタートのプログラム等を詳しく知りたい方は、こちらを参照してください。\nより深く理解したい方へ   ESP32 MCUのスケッチを書く方へ\n以下に注意点が纏めてありますので、まずはお読みください。\n ESP32 MCU ご使用時の注意点 https://garretlab.web.fc2.com/arduino/esp32/    他のMCUからESP32 MCUのWi-Fiを制御する方へ\n以下に注意点が纏めてありますので、まずはお読みください。\n ESP32 MCUをATコマンドで使用する場合    ESP32 Wi-Fi Kitを固定したい方へ\nESP32 Wi-Fi Kitに同梱しているNut Plateの材質は、鉄（めっき処理）にしました。マグネットが、同梱しているので、冷蔵庫に取り付けることが容易にできます。\n  ","excerpt":" ESP32 Wi-Fi Kit A1.0には、既に組み立てられたハードウェアが入っています。そのままで、スマートフォンやパソコンにWi-Fiを使ってタッチセンサの値を送信し、簡単に表示できます。 下 …","ref":"/docs/getting-started/esp32/","title":"ESP32 Wi-Fi Kit A1.0"},{"body":"","excerpt":"","ref":"/en/docs/products/extension/","title":"Extension Kit"},{"body":"","excerpt":"","ref":"/docs/products/extension/","title":"Extension Kit"},{"body":"Leafony（リーフォニー）または、Leafony platform（リーフォニー・プラットフォーム） 超小型、電池で動く、組み立て簡単なオープンイノベーション・プラットフォームです。特に、新しいITサービスやガジェット、マシンあるいはIoTのエッジノードなどを生み出すための試みが簡単になるエレクトロニクスおよびソフトウェアのプラットフォームとなっています。このようなプラットフォーム構築を目指して、トリリオンノード・エンジン・プロジェクト１）がその研究開発を進めています。このプロジェクトで研究開発が終了し、仕様などが確定したものをLeafonyと呼びます。LeafonyはLeafとSymphonyの造語ですが、個と全体の調和を目指した造語です。Symphonyでは、さまざまな楽器の出す音色が調和して素晴らしい楽曲を奏でるようにLeafが集まって素晴らしい価値を創造して欲しいという願いが込められています。「Leafony」は登録商標です。\nLeafonyは、現在Arduino Pro or Pro Mini (3.3V/8MHz) のソフトウェア環境で動作するようになっていますが、プロセッサリーフを変更することにより、どのようなプロセッサ環境／ソフトウェア環境でも使用できるようになっています。新規開発ソフトウェアは、MITライセンスで公開していますので、商用でも自由に無償で使用できます。\nトリリオンノード・エンジンプロジェクトでは、今後、Leafonyがより強力なプロセッサ環境にも対応できるように、また将来、AIなどの開発プラットフォームとしても使えることを目指して、引き続き各種の拡張を研究開発しています。\nLeaf（リーフ） Leafonyの基礎となる2cm角程度の電子基板／電子モジュールのことです。小さくて緑色なのでリーフ（木の葉）と呼んでいます。\nLeafony block（リーフォニー・ブロック）作成中 複数のリーフを組合わせて出来上がった電子機器のことです。Leafony blockは、単体で使用する場合や、機器の中に組み込まれる場合があります。\nLeafony bus（リーフォニー・バス） 複数のリーフ間を相互に接続する共通経路部をLeafonyバスと呼びます。電気信号および電源接続を行うための電気的および物理的な仕様が定義されています。典型的にはリーフの20mm x 5.5mmの領域となります。Leafonyバス準拠のリーフは他のリーフと交信可能になりますが、Leafonyプラットフォームと完全に問題なく繋がるかはソフトウェアなどにもよるため、Leafonyバス準拠というのはあくまでも物理レベルに近いところで接続可能といっているに過ぎません。\nLeafonyバスのアートワークには著作権があり、CC-BYライセンスで公開していますので、商用でもLeafony準拠と明記すれば自由に無償で使用できます。従って、自由に独自のリーフを開発や販売ができます。ただし、Leafonyは登録商標ですので、独自に作ったリーフそのものにはLeafonyとは表示しないでください。Leafonyと表示のあるリーフは製品品質が確かめられていることがわかり、混乱を避けられます。\nLEAFONY SYSTEMS Co.,Ltd.（リーフォニー・システムズ 株式会社） トリリオンノード・エンジン・プロジェクトが研究開発したLeafonyを製造、販売する唯一の会社です。LeafにLeafonyを表示しているのはLEAFONY SYSTEMS社のLeafだけです。Leafonyと表示されたLeafは、相互接続などがトリリオンノード・エンジン・プロジェクトによって確認されています。\nLeafonyバス準拠のリーフ、他の企業や個人などから多数販売されますし、そのような活動を推奨していますが、リーフ自体にLeafonyの表示はされません。\nトリリオンノード研究会 IoT/CPS２）など将来非常に多くのITノードが社会で使われるようになると言われています。そのような未来を議論し情報を共有するための研究会です。具体的に考えるベースとして、Leafonyを使っており、IoT/CPSの発展のため、Leafonyの普及に力を入れています。また、ニーズとシーズを持った関連企業をつなぐ場も提供しています。\n １）トリリオンノード・エンジン・プロジェクトは、国立研究開発法人新エネルギー・産業技術総合開発機構（ＮＥＤＯ）の委託・助成事業による研究開発プロジェクトです。\n２）IoTはInternet of Things、CPSはCyber-Physical Systemsの略です。特に、CPSはネットにつながらずとも、リアルな物理的空間とデジタル空間をつなぐような システムです。\n","excerpt":"Leafony（リーフォニー）または、Leafony platform（リーフォニー・プラットフォーム） 超小型、電池で動く、組み立て簡単なオープンイノベーション・プラットフォームです。特に、新し …","ref":"/docs/overview/terms/","title":"用語の説明"},{"body":"","excerpt":"","ref":"/en/docs/products/esp32/","title":"ESP32 Wi-Fi Kit"},{"body":"","excerpt":"","ref":"/docs/products/esp32/","title":"ESP32 Wi-Fi Kit"},{"body":"シリアルポートが見つからない Arduino IDEでLeafonyのシリアルポートが見つからない場合は、USBシリアル変換IC(FT232)のドライバをインストールしてみましょう。 FTDI VCP Driverからデバイスドライバをダウンロードしてインストールしましょう。\n電源が入らない Leafonyの電源が入らない場合は以下の項目を確かめてみましょう。\n ボタン電池の入れる向き 電源スイッチがONになっているか ネジの締まり具合 電池の残量が十分にあるか  ","excerpt":"シリアルポートが見つからない Arduino IDEでLeafonyのシリアルポートが見つからない場合は、USBシリアル変換IC(FT232)のドライバをインストールしてみましょう。 FTDI VCP …","ref":"/docs/environment/solution/","title":"うまく動かないときは"},{"body":"キット  Basic Kit Bluetooth LEと4つのセンサを搭載した小型なIoTエッジデバイスを開発できるキットです。\nBasic Kit   Extension Kit Leafonyをさらに楽しく使うための拡張機能\nExtension Kit   ESP32 Wi-Fi Kit Wi-FiとBluetoothを搭載したEspressif Systems社のESP32\nESP32 Wi-Fi Kit   その他  Connector Connector\nConnector   Nut \u0026amp; Conn. Cover Nut \u0026amp; Connector cover\nNut \u0026 Conn. Cover  ","excerpt":"キット  Basic Kit Bluetooth LEと4つのセンサを搭載した小型なIoTエッジデバイスを開発できるキットです。\nBasic Kit   Extension Kit Leafonyをさ …","ref":"/en/docs/products/","title":"製品一覧"},{"body":"キット  Basic Kit Bluetooth LEと4つのセンサを搭載した小型なIoTエッジデバイスを開発できるキットです。\nBasic Kit   Extension Kit Leafonyをさらに楽しく使うための拡張機能\nExtension Kit   ESP32 Wi-Fi Kit Wi-FiとBluetoothを搭載したEspressif Systems社のESP32\nESP32 Wi-Fi Kit   その他  Connector Connector\nConnector   Nut \u0026amp; Conn. Cover Nut \u0026amp; Connector cover\nNut \u0026 Conn. Cover  ","excerpt":"キット  Basic Kit Bluetooth LEと4つのセンサを搭載した小型なIoTエッジデバイスを開発できるキットです。\nBasic Kit   Extension Kit Leafonyをさ …","ref":"/docs/products/","title":"製品一覧"},{"body":" Basic Kit ESP32 Wi-Fi Kit  ","excerpt":" Basic Kit ESP32 Wi-Fi Kit  ","ref":"/en/docs/getting-started/","title":"Getting Started"},{"body":"Leafonyが届いたらさっそく使ってみましょう！ キットには電源を入れればすぐ使えるアプリがインストールされています。 こちらのページを参考にIoTの世界を体験してみましょう。\n Basic Kit ESP32 Wi-Fi Kit  ","excerpt":"Leafonyが届いたらさっそく使ってみましょう！ キットには電源を入れればすぐ使えるアプリがインストールされています。 こちらのページを参考にIoTの世界を体験してみましょう。\n Basic Kit …","ref":"/docs/getting-started/","title":"クイックスタート"},{"body":"  \n特徴 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。MCUリーフとはI2Cで接続されます。\n性能 温湿度センサ    Item Description     Part number HTS221TR   Relative Temperature range -40～120℃   Temperature accuracy ±0.5°C (15 to +40°C)   Relative humidity range 0 to 100%   Humidity accuracy 3.5% rH (20 to +80% rH)   Interfaces I2C(Address: 0x5F)    照度センサ    Item Description     Part number OPT3001   Measurement range 0.01 lux to 83 k lux   IR Rejects \u0026gt; 99% (typ)   Interfaces I2C(Address: 0x44 or 0x45)    加速度センサ    Item Description     Part number LIS2DHTR   Measurement range ±2g/±4g/±8g/±16g (selectable)   Function 6D/4D orientation detection   Freefall detection    Motion detection    Interfaces I2C(Address: 0x49)    ブロック図 \nピン配置 サンプルプロジェクト  LED点滅  ライブラリ(関数の概要は、仕様書に記載） ライブラリは、予めここからインストールしておきましょう。 関数は、仕様書に記載していますので、必要に応じて、確認してください。\n温度（または、湿度）の補正の仕方 表示させたい温度（または、湿度）と４-Sensorsの温度（または、湿度）に、ずれがあるときは、２点間補正を行います。詳しくは、こちら。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。MCUリーフとはI2Cで接続されます。\n性能 温湿度センサ    Item Description     Part number …","ref":"/en/docs/leaf/io/ai01a/","title":"AI01A 4-Sensors"},{"body":"  \n特徴 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。MCUリーフとはI2Cで接続されます。\n性能 温湿度センサ    Item Description     Part number HTS221TR   Relative Temperature range -40～120℃   Temperature accuracy ±0.5°C (15 to +40°C)   Relative humidity range 0 to 100%   Humidity accuracy 3.5% rH (20 to +80% rH)   Interfaces I2C(Address: 0x5F)    照度センサ    Item Description     Part number OPT3001   Measurement range 0.01 lux to 83 k lux   IR Rejects \u0026gt; 99% (typ)   Interfaces I2C(Address: 0x44 or 0x45)    加速度センサ    Item Description     Part number LIS2DHTR   Measurement range ±2g/±4g/±8g/±16g (selectable)   Function 6D/4D orientation detection   Freefall detection    Motion detection    Interfaces I2C(Address: 0x49)    ブロック図 \nピン配置 サンプルプロジェクト  LED点滅  ライブラリ(関数の概要は、仕様書に記載） ライブラリは、予めここからインストールしておきましょう。 関数は、仕様書に記載していますので、必要に応じて、確認してください。\n温度（または、湿度）の補正の仕方 表示させたい温度（または、湿度）と４-Sensorsの温度（または、湿度）に、ずれがあるときは、２点間補正を行います。詳しくは、こちら。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。MCUリーフとはI2Cで接続されます。\n性能 温湿度センサ    Item Description     Part number …","ref":"/docs/leaf/io/ai01a/","title":"AI01A 4-Sensors"},{"body":"  \n特徴 ATmega328Pを使用したリーフ。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタンを備えています。 USB接続する場合はUSB を接続、ICSPを使用する場合はShield を接続します。 Arduino IDE使用時は、ボードをArduino Pro or Pro　Mini、プロセッサをATmega328P(3.3V,8MHz)選択。\n性能    Item Description     Part number ATmega328P   Operating voltage 3.3V   Input voltage 1.5-5V   Digital I/O 14   Analog input 6   Flash memory 32 KB   SRAM 2KB   EEPROM 1KB   Clock speed 8MHz    ブロック図 \nピン配置 \nサンプルプロジェクト  LED点滅  ライブラリ ライブラリは、予めここからインストールしておきましょう。\n関数は、仕様書に記載していますので、必要に応じて、確認してください。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf) ブートローダ  ","excerpt":"特徴 ATmega328Pを使用したリーフ。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタンを備えています。 USB接続する場 …","ref":"/en/docs/leaf/processor/ap01a/","title":"AP01A AVR MCU"},{"body":"  \n特徴 ATmega328Pを使用したリーフ。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタンを備えています。 USB接続する場合はUSB を接続、ICSPを使用する場合はShield を接続します。 Arduino IDE使用時は、ボードをArduino Pro or Pro　Mini、プロセッサをATmega328P(3.3V,8MHz)選択。\n性能    Item Description     Part number ATmega328P   Operating voltage 3.3V   Input voltage 1.5-5V   Digital I/O 14   Analog input 6   Flash memory 32 KB   SRAM 2KB   EEPROM 1KB   Clock speed 8MHz    ブロック図 \nピン配置 \nサンプルプロジェクト  LED点滅  ライブラリ ライブラリは、予めここからインストールしておきましょう。\n関数は、仕様書に記載していますので、必要に応じて、確認してください。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf) ブートローダ  ","excerpt":"特徴 ATmega328Pを使用したリーフ。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタンを備えています。 USB接続する場 …","ref":"/docs/leaf/processor/ap01a/","title":"AP01A AVR MCU"},{"body":"Basic Kit Basic Kitで遊べるサンプル\n LED点滅 バッテリ電圧読み取り 温湿度センサ読み取り 照度センサ読み取り 加速度センサ読み取り Web Bluetoothを使ったIoTアプリ入門 Google sheetsを使ったIoTサービス入門  ","excerpt":"Basic Kit Basic Kitで遊べるサンプル\n LED点滅 バッテリ電圧読み取り 温湿度センサ読み取り 照度センサ読み取り 加速度センサ読み取り Web Bluetoothを使ったIoTアプ …","ref":"/docs/examples/basic/","title":"Basic Kit"},{"body":"","excerpt":"","ref":"/en/docs/products/conn/","title":"Connector"},{"body":"","excerpt":"","ref":"/docs/products/conn/","title":"Connector"},{"body":" Basic Kit ESP32 Wi-Fi Kit  ","excerpt":" Basic Kit ESP32 Wi-Fi Kit  ","ref":"/en/docs/environment/","title":"Environment Settings"},{"body":"概要 KiCad向けLeafonyテンプレートプロジェクトを使うとリーフ基板の設計を簡単に行えます。\nテンプレートプロジェクトには下記の項目が設定がされています。\n 2cm x 2cm リーフの外形 Leafony bus フットプリント デザインルール  \nダウンロード 下記のリンクからテンプレートプロジェクトをダウンロードできます。\nGitHub - Leafony/cad-template\n開発環境  KiCad 5.0.0 or later  使い方 新規プロジェクトを作成  KiCadを起動 ファイル -\u0026gt; 新規 -\u0026gt; プロジェクト -\u0026gt; テンプレートからプロジェクトを作成 ユーザーテンプレートタブを選択 テンプレートのパスでダウンロードしたテンプレートプロジェクトから下記パスを参照  \\cad-template-master\\KiCad\\Leafony_Template Leafony Leafを選択しOKをクリック  \nプロジェクト名を入力し、任意の場所にプロジェクトを保存  ","excerpt":"概要 KiCad向けLeafonyテンプレートプロジェクトを使うとリーフ基板の設計を簡単に行えます。\nテンプレートプロジェクトには下記の項目が設定がされています。\n 2cm x 2cm リー …","ref":"/en/docs/pcb/kicad/","title":"KiCad テンプレートプロジェクト"},{"body":"概要 KiCad向けLeafonyテンプレートプロジェクトを使うとリーフ基板の設計を簡単に行えます。\nテンプレートプロジェクトには下記の項目が設定がされています。\n 2cm x 2cm リーフの外形 Leafony bus フットプリント デザインルール  \nダウンロード 下記のリンクからテンプレートプロジェクトをダウンロードできます。\nGitHub - Leafony/cad-template\n開発環境  KiCad 5.0.0 or later  使い方 新規プロジェクトを作成  KiCadを起動 ファイル -\u0026gt; 新規 -\u0026gt; プロジェクト -\u0026gt; テンプレートからプロジェクトを作成 ユーザーテンプレートタブを選択 テンプレートのパスでダウンロードしたテンプレートプロジェクトから下記パスを参照  \\cad-template-master\\KiCad\\Leafony_Template Leafony Leafを選択しOKをクリック  \nプロジェクト名を入力し、任意の場所にプロジェクトを保存  ","excerpt":"概要 KiCad向けLeafonyテンプレートプロジェクトを使うとリーフ基板の設計を簡単に行えます。\nテンプレートプロジェクトには下記の項目が設定がされています。\n 2cm x 2cm リー …","ref":"/docs/pcb/kicad/","title":"KiCad テンプレートプロジェクト"},{"body":"  \n特徴 EASELの技的認証済みLoRaモジュールES920LRA1を搭載したリーフです。MCUリーフとはUARTで接続されます。\n性能    Item Description     Part Number ES920LRA1   SoC MKL16Z128 (ARM Cortex-M0+)   RF Transceiver SX1276 (SEMTECH)   Frequency range 920.6～928.0MHz   Transmission speed 146bps～22kbps   RX sensitivity -118～-142dBm   TX power Max 13dBm（20mW)   RF certification TELEC   Approximate communication distance (wire antenna) Prospect 5km   Flash 128KB   RAM 32KB   Interfaces UART    ブロック図 \nピン配置 サンプルプロジェクト  LED点滅  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 EASELの技的認証済みLoRaモジュールES920LRA1を搭載したリーフです。MCUリーフとはUARTで接続されます。\n性能    Item Description     Part …","ref":"/en/docs/leaf/communication/ac03a/","title":"AC03A LoRa Easy"},{"body":"  \n特徴 EASELの技的認証済みLoRaモジュールES920LRA1を搭載したリーフです。MCUリーフとはUARTで接続されます。\n性能    Item Description     Part Number ES920LRA1   SoC MKL16Z128 (ARM Cortex-M0+)   RF Transceiver SX1276 (SEMTECH)   Frequency range 920.6～928.0MHz   Transmission speed 146bps～22kbps   RX sensitivity -118～-142dBm   TX power Max 13dBm（20mW)   RF certification TELEC   Approximate communication distance (wire antenna) Prospect 5km   Flash 128KB   RAM 32KB   Interfaces UART    ブロック図 \nピン配置 サンプルプロジェクト  LED点滅  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 EASELの技的認証済みLoRaモジュールES920LRA1を搭載したリーフです。MCUリーフとはUARTで接続されます。\n性能    Item Description     Part …","ref":"/docs/leaf/communication/ac03a/","title":"AC03A LoRa Easy"},{"body":"  \n特徴 圧電スピーカと人感センサを搭載したリーフです。圧電スピーカはPWM、人感センサはI2CでMCUリーフと接続されます。人感センサは接近検知アルゴリズムを内蔵しており、簡単な設定で接近を検知することが出来、接近検知時に割り込み信号を出力することが可能です。\n性能 圧電スピーカ    Item Description     Part number CMT-1203-SMT   dimensions 12 x 12 x 3mm   rated frequency 4kHz(typ)   sound pressure level 81dB(min) at 10 cm, 5 Vp-p, 4,000 Hz square wave   Current consumption 5mA(max) at 5 Vp-p, 4,000 Hz square wave    人感センサ    Item Description     Part number AK9754   Sensor Quantum-type IR Sensor   Interfaces I2C(Address: 0x65 or 0x64)    ブロック図 ピン配置 サンプルプロジェクト  LED点滅  ドキュメント  仕様書 回路図 SP\u0026amp;PIR 回路図 PIR 部品配置図 レイアウト図 SP＆PIR (Zuken) レイアウト図 PIR (Zuken) レイアウト図 SP＆PIR (dxf) レイアウト図 PIR (dxf)  ","excerpt":"  \n特徴 圧電スピーカと人感センサを搭載したリーフです。圧電スピーカはPWM、人感センサはI2CでMCUリーフと接続されます。人感センサは接近検知アルゴリズムを内蔵しており、簡単な設定で接近を検知す …","ref":"/en/docs/leaf/io/ai02a/","title":"AI02A SP\u0026PIR"},{"body":"  \n特徴 圧電スピーカと人感センサを搭載したリーフです。圧電スピーカはPWM、人感センサはI2CでMCUリーフと接続されます。人感センサは接近検知アルゴリズムを内蔵しており、簡単な設定で接近を検知することが出来、接近検知時に割り込み信号を出力することが可能です。\n性能 圧電スピーカ    Item Description     Part number CMT-1203-SMT   dimensions 12 x 12 x 3mm   rated frequency 4kHz(typ)   sound pressure level 81dB(min) at 10 cm, 5 Vp-p, 4,000 Hz square wave   Current consumption 5mA(max) at 5 Vp-p, 4,000 Hz square wave    人感センサ    Item Description     Part number AK9754   Sensor Quantum-type IR Sensor   Interfaces I2C(Address: 0x65 or 0x64)    ブロック図 ピン配置 サンプルプロジェクト  LED点滅  ドキュメント  仕様書 回路図 SP\u0026amp;PIR 回路図 PIR 部品配置図 レイアウト図 SP＆PIR (Zuken) レイアウト図 PIR (Zuken) レイアウト図 SP＆PIR (dxf) レイアウト図 PIR (dxf)  ","excerpt":"  \n特徴 圧電スピーカと人感センサを搭載したリーフです。圧電スピーカはPWM、人感センサはI2CでMCUリーフと接続されます。人感センサは接近検知アルゴリズムを内蔵しており、簡単な設定で接近を検知す …","ref":"/docs/leaf/io/ai02a/","title":"AI02A SP\u0026PIR"},{"body":"概要 CR2032コイン電池リーフに搭載されたADコンバータを使って電池の電圧を読み取りましょう。\nこのサンプルはAV03A AA BATリーフや、AV04A 2V～4.5Vリーフなどの電池リーフでも動作します。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty     AP01A AVR MCU 1   AZ01A USB 1   AV01A CR2032 1   AZ62A コネクタカバー 1    CR2032 コイン電池 1    M2ネジ 2    リーフの組み立て ソースコード Arduino IDEで下記のプログラムを作成しましょう。\n//===================================================================== // Battery Voltage // // (c) 2020 Trillion-Node Study Group // Released under the MIT license // https://opensource.org/licenses/MIT // // Rev.00 2020/05/05 First release //=====================================================================  #include \u0026lt;Wire.h\u0026gt; const int BATT_ADC_ADDR = 0x50; void setup() { // initialize serial communication at 115200 second per second:  Serial.begin(115200); // initialize I2C communication at 100kHz:  Wire.begin(); delay(10); } void loop(){ // read ADC registers:  Wire.beginTransmission(BATT_ADC_ADDR); Wire.write(0x00); Wire.endTransmission(false); Wire.requestFrom(BATT_ADC_ADDR,2); uint8_t adcVal1 = Wire.read(); uint8_t adcVal2 = Wire.read(); // when ADC is not connected, read values are 0xFF:  if (adcVal1 == 0xff \u0026amp;\u0026amp; adcVal2 == 0xff) { adcVal1 = adcVal2 = 0; } // voltage mV = adcVal * Vref(3.3V) / resolution(8bit) * Vdiv(2)  double tempMillivolt = ((double)((adcVal1 \u0026lt;\u0026lt; 4) | (adcVal2 \u0026gt;\u0026gt; 4)) * 3300 * 2) / 256; float dataBatt = (float)(tempMillivolt / 1000); Serial.println(\u0026#34;Batt[V] = \u0026#34; + String(dataBatt)); delay(1000); } 動作 Arduino IDEのシリアルモニタを開き、ボーレートを115200bpsすると、電池の電圧が表示されます。\n","excerpt":"概要 CR2032コイン電池リーフに搭載されたADコンバータを使って電池の電圧を読み取りましょう。\nこのサンプルはAV03A AA BATリーフや、AV04A 2V～4.5Vリーフなどの電池リーフでも …","ref":"/docs/examples/basic/read_battery/","title":"バッテリ残量"},{"body":"プロセッサ  AP01A AVR MCU ATmega328Pを使用したリーフ。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタンを備えています。 USB接続する場合はUSB を接続、ICSPを使用する場合はShield を接続します。 Arduino IDE使用時は、ボードをArduino Pro or Pro　Mini、プロセッサをATmega328P(3.3V,8MHz)選択。\nBasic Kit   AP02A ESP32 MCU Espressif SystemsのXtensa Dual-Core 32-bit LX6 マイクロプロセッサ、技的認証済みWi-FiとBLEを内蔵したESP32-WROOM-32を搭載した32bit MCUリーフである。 無線の認証は、 FCC、CE-RED、IC、TELEC、KCC、SRRC、NCCを取得（Espressif Systems Data Sheet V2.9）。USB電源を供給して、VBUS(5V)電源として使用可能。\nESP32 Wi-Fi Kit   ","excerpt":"プロセッサ  AP01A AVR MCU ATmega328Pを使用したリーフ。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタ …","ref":"/en/docs/leaf/processor/","title":"プロセッサリーフ"},{"body":"プロセッサ  AP01A AVR MCU ATmega328Pを使用したリーフ。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタンを備えています。 USB接続する場合はUSB を接続、ICSPを使用する場合はShield を接続します。 Arduino IDE使用時は、ボードをArduino Pro or Pro　Mini、プロセッサをATmega328P(3.3V,8MHz)選択。\nBasic Kit   AP02A ESP32 MCU Espressif SystemsのXtensa Dual-Core 32-bit LX6 マイクロプロセッサ、技的認証済みWi-FiとBLEを内蔵したESP32-WROOM-32を搭載した32bit MCUリーフである。 無線の認証は、 FCC、CE-RED、IC、TELEC、KCC、SRRC、NCCを取得（Espressif Systems Data Sheet V2.9）。USB電源を供給して、VBUS(5V)電源として使用可能。\nESP32 Wi-Fi Kit   ","excerpt":"プロセッサ  AP01A AVR MCU ATmega328Pを使用したリーフ。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタ …","ref":"/docs/leaf/processor/","title":"プロセッサリーフ"},{"body":"これからLeafonyを使った開発を行うために、PCの環境を整えましょう。\n必要なツールやライブラリのインストール方法、Leafonyの組み立て方などはここから学べます。\n Basic Kit ESP32 Wi-Fi Kit  ","excerpt":"これからLeafonyを使った開発を行うために、PCの環境を整えましょう。\n必要なツールやライブラリのインストール方法、Leafonyの組み立て方などはここから学べます。\n Basic Kit …","ref":"/docs/environment/","title":"開発環境設定"},{"body":"  \n特徴 Espressif SystemsのXtensa Dual-Core 32-bit LX6 マイクロプロセッサ、技的認証済みWi-FiとBLEを内蔵したESP32-WROOM-32を搭載した32bit MCUリーフである。無線の認証は、 FCC、CE-RED、IC、TELEC、KCC、SRRC、NCCを取得（Espressif Systems Data Sheet V2.9）。 USB電源を供給して、VBUS(5V)電源として使用可能。\n性能    Item Description     Part number ESP32-WROOM-32    SoC ESP32-D0WDQ6 (CPU:Xtensa LX6)   Operating voltage 3.3V   Input voltage 2.2-3.6V   Digital I/O 14   Analog input 6   TouchSensor I/F 6   Flash Memory 4 MB   SRAM 520 KB   Clock frequency 80M-240MHz   Wi-Fi protocols IEEE 802.11b/g/n   Bluetooth protocols Bluetooth v4.2 BR/EDR and BLE specification   RF certification FCC/CE-RED/IC/TELEC/KCC/SRRC/NCC    ブロック図 \nピン配置 \nサンプルプロジェクト  Wi-Fi を使ってタッチセンサの値を表示 ※リンク先 要変更  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ソフトウェア仕様 ","excerpt":"特徴 Espressif SystemsのXtensa Dual-Core 32-bit LX6 マイクロプロセッサ、技的認証済みWi-FiとBLEを内蔵したESP32-WROOM-32を搭載し …","ref":"/en/docs/leaf/processor/ap02a/","title":"AP02A ESP32 MCU"},{"body":"  \n特徴 Espressif SystemsのXtensa Dual-Core 32-bit LX6 マイクロプロセッサ、技的認証済みWi-FiとBLEを内蔵したESP32-WROOM-32を搭載した32bit MCUリーフである。無線の認証は、 FCC、CE-RED、IC、TELEC、KCC、SRRC、NCCを取得（Espressif Systems Data Sheet V2.9）。 USB電源を供給して、VBUS(5V)電源として使用可能。\n性能    Item Description     Part number ESP32-WROOM-32    SoC ESP32-D0WDQ6 (CPU:Xtensa LX6)   Operating voltage 3.3V   Input voltage 2.2-3.6V   Digital I/O 14   Analog input 6   TouchSensor I/F 6   Flash Memory 4 MB   SRAM 520 KB   Clock frequency 80M-240MHz   Wi-Fi protocols IEEE 802.11b/g/n   Bluetooth protocols Bluetooth v4.2 BR/EDR and BLE specification   RF certification FCC/CE-RED/IC/TELEC/KCC/SRRC/NCC    ブロック図 \nピン配置 \nサンプルプロジェクト  Wi-Fi を使ってタッチセンサの値を表示 ※リンク先 要変更  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ソフトウェア仕様 ","excerpt":"特徴 Espressif SystemsのXtensa Dual-Core 32-bit LX6 マイクロプロセッサ、技的認証済みWi-FiとBLEを内蔵したESP32-WROOM-32を搭載し …","ref":"/docs/leaf/processor/ap02a/","title":"AP02A ESP32 MCU"},{"body":"","excerpt":"","ref":"/en/docs/products/nut/","title":"Nut \u0026 Connector Cover"},{"body":"","excerpt":"","ref":"/docs/products/nut/","title":"Nut \u0026 Connector Cover"},{"body":"Basic Kit Basic Kitのみで遊べるサンプルです。\n LED Blink Read Battery Voltage Temperature and Humidity Sensors Illuminance Sensor Accelerometer Web Bluetooth Commnication Google sheets Commnication  Extension Kit Extension Kitと組み合わせて遊べるサンプルです。\n Speaker IR motion Sensor Sound Level Meter LCD Display Real-Time Clock Micro SD Card  ESP32 Wi-Fi ESP32 Wi-Fi Kitで遊べるサンプル\n Wi-Fi touchsensor  Grove Extention KitのGroveリーフとGroveモジュールで遊べるサンプル\n Distance measurement with ultrasonic sensor Shooting the camera  サンプルコードGithubリポジトリ  https://github.com/Leafony/Sample-Sketches  ","excerpt":"Basic Kit Basic Kitのみで遊べるサンプルです。\n LED Blink Read Battery Voltage Temperature and Humidity Sensors …","ref":"/en/docs/examples/","title":"Examples"},{"body":"各種Leafを使ったサンプルアプリケーションを紹介します。\n実際に動かして使い方を学んでいきましょう。\nBasic Kit Basic Kitで遊べるサンプル\n LED点滅 バッテリ電圧読み取り 温湿度センサ読み取り 照度センサ読み取り 加速度センサ読み取り Web Bluetoothを使ったIoTアプリ入門 Google sheetsを使ったIoTサービス入門  Extension Kit Basic KitとExtension Kitと組み合わせて遊べるサンプル\n スピーカ 人感センサ サウンドレベルメータ LCD ディスプレイ リアルタイムクロック MicroSDカード  ESP32 Wi-Fi ESP32 Wi-Fi Kitで遊べるサンプル\n Wi-Fi タッチセンサ  Grove Extention KitのGroveリーフとGroveモジュールで遊べるサンプル\n 超音波センサで距離測定 カメラの撮影  サンプルコードGithubリポジトリ その他様々なサンプルコードが公開されています。\n GitHub - Leafony/Sample-Sketches  ","excerpt":"各種Leafを使ったサンプルアプリケーションを紹介します。\n実際に動かして使い方を学んでいきましょう。\nBasic Kit Basic Kitで遊べるサンプル\n LED点滅 バッテリ電圧読み取り 温湿 …","ref":"/docs/examples/","title":"サンプルデザイン"},{"body":"  \n特徴 Silicon Labsの技的認証済みBLEモジュールBGM11S22F256GA-V2を搭載したリーフです。MCUリーフとはUARTで接続されます。無線の認証は、CE、FCC、ISED Canada、TELEC、KC South-Korea、NCC Taiwanを取得（SLICON LABS Module Data Sheet　Revision 1.2)。\n性能    Item　 Description     Part number BGM11S22F256GA-V2   SoC EFR32BG1 (ARM Cortex-M4)   Bluetooth version 4.2   Frequency range 2400M ~ 2483.5MHz   RX sensitivity -90 dBm @ 1 Mbit/s GFSK   TX power +8dBm以下   RF certification CE, full FCC, ISED Canada, Japan and South-Korea   Flash 256KB   RAM 32KB   Interfaces UART    ブロック図 \nピン配置 \nサンプルプロジェクト  Web Bluetooth を使ってセンサの値を表示 ※リンク先要変更  ライブラリ ライブラリは、予めここからインストールしておきましょう。 関数は、仕様書に記載していますので、必要に応じて、確認してください。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 Silicon Labsの技的認証済みBLEモジュールBGM11S22F256GA-V2を搭載したリーフです。MCUリーフとはUARTで接続されます。無線の認証は、CE、FCC、ISED …","ref":"/en/docs/leaf/communication/ac02a/","title":"AC02A BLE Sugar"},{"body":"  \n特徴 Silicon Labsの技的認証済みBLEモジュールBGM11S22F256GA-V2を搭載したリーフです。MCUリーフとはUARTで接続されます。無線の認証は、CE、FCC、ISED Canada、TELEC、KC South-Korea、NCC Taiwanを取得（SLICON LABS Module Data Sheet　Revision 1.2)。\n性能    Item　 Description     Part number BGM11S22F256GA-V2   SoC EFR32BG1 (ARM Cortex-M4)   Bluetooth version 4.2   Frequency range 2400M ~ 2483.5MHz   RX sensitivity -90 dBm @ 1 Mbit/s GFSK   TX power +8dBm以下   RF certification CE, full FCC, ISED Canada, Japan and South-Korea   Flash 256KB   RAM 32KB   Interfaces UART    ブロック図 \nピン配置 \nサンプルプロジェクト  Web Bluetooth を使ってセンサの値を表示 ※リンク先要変更  ライブラリ ライブラリは、予めここからインストールしておきましょう。 関数は、仕様書に記載していますので、必要に応じて、確認してください。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 Silicon Labsの技的認証済みBLEモジュールBGM11S22F256GA-V2を搭載したリーフです。MCUリーフとはUARTで接続されます。無線の認証は、CE、FCC、ISED …","ref":"/docs/leaf/communication/ac02a/","title":"AC02A BLE Sugar"},{"body":"Extension Kit Basic KitとExtension Kitと組み合わせて遊べるサンプル\n スピーカ 人感センサ サウンドレベルメータ LCD ディスプレイ リアルタイムクロック MicroSDカード  ","excerpt":"Extension Kit Basic KitとExtension Kitと組み合わせて遊べるサンプル\n スピーカ 人感センサ サウンドレベルメータ LCD …","ref":"/docs/examples/extension/","title":"Extension Kit"},{"body":"Leafony規格・開発データ  Leafony bus Leafonyで使用される基板間インターフェイスです。Leafony connectorを使って基板を上下方向に接続可能です。\n   プロセッサ  AP01A AVR MCU ATmega328Pを使用したリーフです。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタンを備えています。\nBasic Kit   AP02A ESP32 MCU Espressif Systemsの、技的認証済みWi-FiとBluetooth LEを内蔵したモジュールESP32-WROOM-32を搭載した32bit MCUリーフです。\nESP32 Wi-Fi Kit   通信  AC02A BLE Sugar Silicon Labsの技的認証済みBluetooth LEモジュールBGM11S22F256GA-V2を搭載したリーフです。\nBasic Kit   AC03A LoRa Easy EASELの技的認証済みLoRaモジュールES920LRA1を搭載したリーフです。\n   IO  AI01A 4-Sensors 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。省電力なセンサを搭載し長時間のセンシングに適しています。\nBasic Kit   AI02A SP\u0026amp;PIR 圧電スピーカと人感センサを搭載したリーフです。人感センサは接近検知アルゴリズムを内蔵しており、簡単な設定で物体の接近を検知することが可能です。\nExtension Kit   AI03A MIC\u0026amp;VR\u0026amp;LED MEMSマイク、ボリューム、LEDを搭載したリーフです。低消費電力を実現するためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\nExtension Kit   AI04A LCD キャラクタLCDユニットとユーザスイッチ2個を搭載したリーフです。低消費電力を実現するためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\nExtension Kit   電源  AV01A CR2032 CR2032コイン電池ホルダと電源スイッチ、電圧モニタ用のADコンバータ、3V→3.3V昇圧回路を搭載した電源リーフです。2cm x 2cmのサイズで3.3Vの電源を供給可能です。\nBasic Kit   AV02A CR2450 CR2450コイン電池ホルダと電源スイッチ、電圧モニタ用のADコンバータ、3V→3.3V昇圧回路を搭載した電源リーフです。\n   AV03A AA BAT 単3電池ホルダと電源スイッチ、電圧モニタ用のADコンバータ、3V→3.3V昇圧回路を搭載した電源リーフです。3つのLeafonyコネクタを搭載しより多くのリーフに電源供給が可能です。\nExtension Kit   AV04A 2V～4.5V リチウムイオンバッテリや電池ボックス接続用のSHコネクタと電源スイッチ、電圧モニタ用のADコンバータ、3.3V昇降圧回路を搭載した電源リーフです。2V～4.5Vの電池電圧入力に対応しています。\nExtension Kit   拡張  AX01A Shield Arduino Shield接続用コネクタ、SWDコネクタ、ICSPコネクタ、リーフI/F3個を実装した拡張基板です。\nExtension Kit   AX02A 29pin Leafonyコネクタの29ピン全てを2.54mmピッチのスルーホールに接続したリーフです。\nBasic Kit   AX03A Leaf x2 リーフを横並びに接続するためのコネクタリーフです。\nExtension Kit   AX04A Spacer 積み重ねた2枚のリーフの間に挟むスペーサリーフです。リーフ同士の部品がぶつかってしまう場合などに使えます。\nExtension Kit   AX05A I Meas. 3.3VおよびVBUSに流れる電流を測定するためのリーフです。通常Leafony busは両面とも電気的に接続されていますが、このリーフでは3.3VとVBUSのみ表裏で切断され、それぞれスルーホールに接続されています。\nExtension Kit   AX06A Grove\u0026amp;5V Seeed Studio製 Groveシリーズに準拠する5Vで動作するUART、I2C、アナログ入力、デジタル入力が可能なリーフです。3.3Vから昇圧電源回路により5Vに変換しGroveに供給します。低消費電力を実現するためI2C Expander を制御することにより5Vの電源をオフすることが可能です。\nExtension Kit   AX07A Back to back リーフを背中合わせに接続可能なコネクタリーフです。\nESP32 Wi-Fi Kit   AX08A 29pin header Leafonyコネクタの29ピン全てを2.54mmピッチのピンヘッダに接続したリーフです。\nESP32 Wi-Fi Kit   その他  AZ01A USB AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USBのVBUS(5V)から降圧電源回路により3.3Vに変換し、各リーフにVBUSと3.3Vを供給します。\nBasic Kit   AZ02A RTC\u0026amp;microSD NXPのReal-Time Clock PCF8523TKおよびMicro SDカードスロットを搭載したリーフです。RTCはアラームやタイマによりMCUに割り込み信号を出力することが可能です。micro SDカードはSPIでアクセスします。\nESP32 Wi-Fi Kit   AZ61A Connector Leafony Platformは、ACR (Anisotropic Conductive Rubber)を採用しています。ACRは、絶縁性シリコーンゴムに、金属又は導電性エラストマの導電部材が、狭ピッチで配列されており、圧縮されることで電気的接続が実現できます。\nConnector   AZ62A Connector Cover Connector Coverは、ACR (Anisotropic Conductive Rubber)に付着するゴミを防御することが出来ます。\nNut \u0026 Conn. Cover   AZ63A Nut Plate Nut Plateは、リーフをネジで固定する時に使用します。市販の六角ナットを用いると基板の電極に触れて、ショートをおこすことがあるので要注意\nNut \u0026 Conn. Cover   AZ66A Basic Kit Case Leafony用のケースです。底面に付いたマグネットで壁に固定することが可能です。\nBasic Kit  ","excerpt":"Leafony規格・開発データ  Leafony bus Leafonyで使用される基板間インターフェイスです。Leafony connectorを使って基板を上下方向に接続可能です。\n   プロセッ …","ref":"/en/docs/leaf/","title":"リーフ技術資料"},{"body":"Leafony規格・開発データ  Leafony bus Leafonyで使用される基板間インターフェイスです。Leafony connectorを使って基板を上下方向に接続可能です。\n   プロセッサ  AP01A AVR MCU ATmega328Pを使用したリーフです。14個のデジタル入出力ピン（6個はPWM出力として使用可能）、6個のアナログ入力ピン、8MHz振動子、およびリセットボタンを備えています。\nBasic Kit   AP02A ESP32 MCU Espressif Systemsの、技的認証済みWi-FiとBluetooth LEを内蔵したモジュールESP32-WROOM-32を搭載した32bit MCUリーフです。\nESP32 Wi-Fi Kit   通信  AC02A BLE Sugar Silicon Labsの技的認証済みBluetooth LEモジュールBGM11S22F256GA-V2を搭載したリーフです。\nBasic Kit   AC03A LoRa Easy EASELの技的認証済みLoRaモジュールES920LRA1を搭載したリーフです。\n   IO  AI01A 4-Sensors 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。省電力なセンサを搭載し長時間のセンシングに適しています。\nBasic Kit   AI02A SP\u0026amp;PIR 圧電スピーカと人感センサを搭載したリーフです。人感センサは接近検知アルゴリズムを内蔵しており、簡単な設定で物体の接近を検知することが可能です。\nExtension Kit   AI03A MIC\u0026amp;VR\u0026amp;LED MEMSマイク、ボリューム、LEDを搭載したリーフです。低消費電力を実現するためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\nExtension Kit   AI04A LCD キャラクタLCDユニットとユーザスイッチ2個を搭載したリーフです。低消費電力を実現するためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\nExtension Kit   電源  AV01A CR2032 CR2032コイン電池ホルダと電源スイッチ、電圧モニタ用のADコンバータ、3V→3.3V昇圧回路を搭載した電源リーフです。2cm x 2cmのサイズで3.3Vの電源を供給可能です。\nBasic Kit   AV02A CR2450 CR2450コイン電池ホルダと電源スイッチ、電圧モニタ用のADコンバータ、3V→3.3V昇圧回路を搭載した電源リーフです。\n   AV03A AA BAT 単3電池ホルダと電源スイッチ、電圧モニタ用のADコンバータ、3V→3.3V昇圧回路を搭載した電源リーフです。3つのLeafonyコネクタを搭載しより多くのリーフに電源供給が可能です。\nExtension Kit   AV04A 2V～4.5V リチウムイオンバッテリや電池ボックス接続用のSHコネクタと電源スイッチ、電圧モニタ用のADコンバータ、3.3V昇降圧回路を搭載した電源リーフです。2V～4.5Vの電池電圧入力に対応しています。\nExtension Kit   拡張  AX01A Shield Arduino Shield接続用コネクタ、SWDコネクタ、ICSPコネクタ、リーフI/F3個を実装した拡張基板です。\nExtension Kit   AX02A 29pin Leafonyコネクタの29ピン全てを2.54mmピッチのスルーホールに接続したリーフです。\nBasic Kit   AX03A Leaf x2 リーフを横並びに接続するためのコネクタリーフです。\nExtension Kit   AX04A Spacer 積み重ねた2枚のリーフの間に挟むスペーサリーフです。リーフ同士の部品がぶつかってしまう場合などに使えます。\nExtension Kit   AX05A I Meas. 3.3VおよびVBUSに流れる電流を測定するためのリーフです。通常Leafony busは両面とも電気的に接続されていますが、このリーフでは3.3VとVBUSのみ表裏で切断され、それぞれスルーホールに接続されています。\nExtension Kit   AX06A Grove\u0026amp;5V Seeed Studio製 Groveシリーズに準拠する5Vで動作するUART、I2C、アナログ入力、デジタル入力が可能なリーフです。3.3Vから昇圧電源回路により5Vに変換しGroveに供給します。低消費電力を実現するためI2C Expander を制御することにより5Vの電源をオフすることが可能です。\nExtension Kit   AX07A Back to back リーフを背中合わせに接続可能なコネクタリーフです。\nESP32 Wi-Fi Kit   AX08A 29pin header Leafonyコネクタの29ピン全てを2.54mmピッチのピンヘッダに接続したリーフです。\nESP32 Wi-Fi Kit   その他  AZ01A USB AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USBのVBUS(5V)から降圧電源回路により3.3Vに変換し、各リーフにVBUSと3.3Vを供給します。\nBasic Kit   AZ02A RTC\u0026amp;microSD NXPのReal-Time Clock PCF8523TKおよびMicro SDカードスロットを搭載したリーフです。RTCはアラームやタイマによりMCUに割り込み信号を出力することが可能です。micro SDカードはSPIでアクセスします。\nESP32 Wi-Fi Kit   AZ61A Connector Leafony Platformは、ACR (Anisotropic Conductive Rubber)を採用しています。ACRは、絶縁性シリコーンゴムに、金属又は導電性エラストマの導電部材が、狭ピッチで配列されており、圧縮されることで電気的接続が実現できます。\nConnector   AZ62A Connector Cover Connector Coverは、ACR (Anisotropic Conductive Rubber)に付着するゴミを防御することが出来ます。\nNut \u0026 Conn. Cover   AZ63A Nut Plate Nut Plateは、リーフをネジで固定する時に使用します。市販の六角ナットを用いると基板の電極に触れて、ショートをおこすことがあるので要注意\nNut \u0026 Conn. Cover   AZ66A Basic Kit Case Leafony用のケースです。底面に付いたマグネットで壁に固定することが可能です。\nBasic Kit  ","excerpt":"Leafony規格・開発データ  Leafony bus Leafonyで使用される基板間インターフェイスです。Leafony connectorを使って基板を上下方向に接続可能です。\n   プロセッ …","ref":"/docs/leaf/","title":"リーフ技術資料"},{"body":"概要 4-Sensorsリーフに搭載された温湿度センサの値を読み取って、シリアルモニタに表示するサンプルです。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty     AI01A 4-Sensors 1   AP01A AVR MCU 1   AZ01A USB 1   AV01A CR2032 1   AZ62A コネクタカバー 1    CR2032 コイン電池 1    M2ネジ 2    リーフの組み立て 下図を参考にリーフを組み立ててみましょう。\nソースコード Arduino IDEで下記のプログラムを書きましょう。\n4-Sensors リーフを使うためにはライブラリのインストールが必要です。 まだインストールしていない場合は開発環境設定ページを参考にライブラリをインストールしてください。\n//===================================================================== // Thermo-hygrometer // // (c) 2020 Trillion-Node Study Group // Released under the MIT license // https://opensource.org/licenses/MIT // // Rev.00 2020/05/05 First release //===================================================================== #include \u0026lt;Wire.h\u0026gt;#include \u0026lt;HTS221.h\u0026gt; //--------------------------- // 2点補正用データ //--------------------------- // 温度補正用データ0 float TL0 = 25.0; // 4-Sensors温度測定値 float TM0 = 25.0; // 温度計等測定値 // 温度補正用データ1 float TL1 = 40.0; // 4-Sensors温度測定値 float TM1 = 40.0; // 温度計等測定値  // 湿度補正用データ0 float HL0 = 60.0; // 4-Sensors湿度測定値 float HM0 = 60.0; // 湿度計等測定値 // 湿度補正用データ1 float HL1 = 80.0; // 4-Sensors湿度測定値 float HM1 = 80.0; // 湿度計等測定値  void setup() { // initialize serial communication at 115200 second per second:  Serial.begin(115200); // initialize i2c communication with HTS221:  smeHumidity.begin(); delay(10); } void loop() { // read temperature and humidity:  float dataTemp = (float)smeHumidity.readTemperature(); float dataHumid = (float)smeHumidity.readHumidity(); // calibration:  dataTemp = TM0 + (TM1 - TM0) * (dataTemp - TL0) / (TL1 - TL0); // 温度補正  dataHumid = HM0 + (HM1 - HM0) * (dataHumid - HL0) / (HL1 - HL0); // 湿度補正  Serial.println(String(dataTemp) + \u0026#34;[℃], \u0026#34; + String(dataHumid) + \u0026#34;[%]\u0026#34;); delay(1000); } 実行結果 Arduino IDEのシリアルモニタを開き、ボーレートを115200bpsとすると、温度と湿度が表示されます。\n","excerpt":"概要 4-Sensorsリーフに搭載された温湿度センサの値を読み取って、シリアルモニタに表示するサンプルです。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty …","ref":"/docs/examples/basic/temp_humid_sensors/","title":"温湿度センサ読み取り"},{"body":"通信  AC02A BLE Sugar Silicon Labsの技的認証済みBLEモジュールBGM11S22F256GA-V2を搭載したリーフです。MCUリーフとはUARTで接続されます。無線の認証は、CE、FCC、ISED Canada、TELEC、KC South-Korea、NCC Taiwanを取得（SLICON LABS Module Data Sheet　Revision 1.2)。\nBasic Kit   AC03A LoRa Easy EASELの技的認証済みLoRaモジュールES920LRA1を搭載したリーフです。MCUリーフとはUARTで接続されます。\n   ","excerpt":"通信  AC02A BLE Sugar Silicon Labsの技的認証済みBLEモジュールBGM11S22F256GA-V2を搭載したリーフです。MCUリーフとはUARTで接続されます。無線の認証 …","ref":"/en/docs/leaf/communication/","title":"通信"},{"body":"通信  AC02A BLE Sugar Silicon Labsの技的認証済みBLEモジュールBGM11S22F256GA-V2を搭載したリーフです。MCUリーフとはUARTで接続されます。無線の認証は、CE、FCC、ISED Canada、TELEC、KC South-Korea、NCC Taiwanを取得（SLICON LABS Module Data Sheet　Revision 1.2)。\nBasic Kit   AC03A LoRa Easy EASELの技的認証済みLoRaモジュールES920LRA1を搭載したリーフです。MCUリーフとはUARTで接続されます。\n   ","excerpt":"通信  AC02A BLE Sugar Silicon Labsの技的認証済みBLEモジュールBGM11S22F256GA-V2を搭載したリーフです。MCUリーフとはUARTで接続されます。無線の認証 …","ref":"/docs/leaf/communication/","title":"通信"},{"body":"概要 4-Sensorsリーフに搭載された照度センサの値を読み取って、シリアルモニタに表示するサンプルです。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty     AI01A 4-Sensors 1   AP01A AVR MCU 1   AZ01A USB 1   AV01A CR2032 1   AZ62A コネクタカバー 1    CR2032 コイン電池 1    M2ネジ 2    リーフの組み立て 下図を参考にリーフを組み立ててみましょう。\nソースコード Arduino IDEで下記のプログラムを書きましょう。\n4-Sensors リーフを使うためにはライブラリのインストールが必要です。 まだインストールしていない場合は開発環境設定ページを参考にライブラリをインストールしてください\n//===================================================================== // Illuminance meter // // (c) 2020 Trillion-Node Study Group // Released under the MIT license // https://opensource.org/licenses/MIT // // Rev.00 2020/05/05 First release //===================================================================== #include \u0026lt;Wire.h\u0026gt;#include \u0026lt;ClosedCube_OPT3001.h\u0026gt; #define OPT3001_ADDRESS 0x45 // ADDR pin = VCC  ClosedCube_OPT3001 illum; float dataIllum; void setup() { // initialize serial communication at 115200 second per second:  Serial.begin(115200); // initialize i2c communication with OPT3001:  Wire.begin(); delay(10); OPT3001_Config illumConfig; OPT3001_ErrorCode illumErrorConfig; illum.begin(OPT3001_ADDRESS); illumConfig.RangeNumber = B1100; // automatic full scale  illumConfig.ConvertionTime = B1; // convertion time = 800ms  illumConfig.ModeOfConversionOperation = B11; // continous conversion  illumConfig.Latch = B0; // hysteresis-style  illumErrorConfig = illum.writeConfig(illumConfig); if(illumErrorConfig != NO_ERROR){ illumErrorConfig = illum.writeConfig(illumConfig); //retry  } } void loop() { OPT3001 result = illum.readResult(); if(result.error == NO_ERROR){ dataIllum = result.lux; } Serial.println(\u0026#34;Lum[lx] = \u0026#34; + String(dataIllum)); delay(1000); } 実行結果 Arduino IDEのシリアルモニタを開き、ボーレートを115200bpsとすると、照度が表示されます。\n","excerpt":"概要 4-Sensorsリーフに搭載された照度センサの値を読み取って、シリアルモニタに表示するサンプルです。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty …","ref":"/docs/examples/basic/illum_sensor/","title":"照度センサ読み取り"},{"body":"概要 4-Sensorsリーフに搭載された加速度センサの値を読み取って、シリアルモニタに表示するサンプルです。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty     AI01A 4-Sensors 1   AP01A AVR MCU 1   AZ01A USB 1   AV01A CR2032 1   AZ62A コネクタカバー 1    CR2032 コイン電池 1    M2ネジ 2    リーフの組み立て 下図を参考にリーフを組み立ててみましょう。\nソースコード Arduino IDEで下記のプログラムを書きましょう。\n4-Sensors リーフを使うためにはライブラリのインストールが必要です。 まだインストールしていない場合は開発環境設定ページを参考にライブラリをインストールしてください。\n//===================================================================== // Accelerometer // // (c) 2020 Trillion-Node Study Group // Released under the MIT license // https://opensource.org/licenses/MIT // // Rev.00 2020/05/05 First release //===================================================================== #include \u0026lt;Adafruit_LIS3DH.h\u0026gt; #define LIS3DH_ADDRESS 0x19  Adafruit_LIS3DH accel = Adafruit_LIS3DH(); void setup() { // initialize serial communication at 115200 second per second:  Serial.begin(115200); // initialize i2c communication with LIS3DH:  accel.begin(LIS3DH_ADDRESS); accel.setClick(0, 0); // Disable Interrupt  accel.setRange(LIS3DH_RANGE_2_G); // Full scale +/- 2G  accel.setDataRate(LIS3DH_DATARATE_10_HZ); // Data rate = 10Hz  delay(100); } void loop() { accel.read(); Serial.print(\u0026#34;X [g] = \u0026#34; + String(accel.x_g)); Serial.print(\u0026#34;, \u0026#34;); Serial.print(\u0026#34;Y [g] = \u0026#34; + String(accel.y_g)); Serial.print(\u0026#34;, \u0026#34;); Serial.print(\u0026#34;Z [g] = \u0026#34; + String(accel.z_g)); Serial.println(\u0026#34;\u0026#34;); delay(100); } 実行結果 Arduino IDEのシリアルモニタを開き、ボーレートを115200bpsとすると、加速度と傾きが表示されます。\n","excerpt":"概要 4-Sensorsリーフに搭載された加速度センサの値を読み取って、シリアルモニタに表示するサンプルです。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty …","ref":"/docs/examples/basic/accelerometer/","title":"加速度センサ読み取り"},{"body":"ESP32 Wi-Fi ESP32 Wi-Fi Kitで遊べるサンプル\n Wi-Fi タッチセンサ  ","excerpt":"ESP32 Wi-Fi ESP32 Wi-Fi Kitで遊べるサンプル\n Wi-Fi タッチセンサ  ","ref":"/docs/examples/esp32/","title":"ESP32"},{"body":"IO  AI01A 4-Sensors 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。MCUリーフとはI2Cで接続されます。\nBasic Kit   AI02A SP\u0026amp;PIR 圧電スピーカと人感センサを搭載したリーフです。圧電スピーカはPWM、人感センサはI2CでMCUリーフと接続されます。人感センサは接近検知アルゴリズムを内蔵しており、簡単な設定で接近を検知することが出来、接近検知時に割り込み信号を出力することが可能です。\nExtension Kit   AI03A MIC\u0026amp;VR\u0026amp;LED MEMSマイク、ボリューム、LEDを搭載したリーフです。MEMSマイクとボリュームはアナログ入力ピン、LEDはデジタル出力ピンでMCUリーフと接続されます。低消費電力を実現するためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\nExtension Kit   AI04A LCD キャラクタLCDユニットとスイッチ2個を搭載したリーフです。LCDユニットはI2CでMCUリーフと接続される。スイッチはMCUのデジタル入力ピンとI2C ExpanderのP1ピンに接続されています。 低消費電力を実現するためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\nExtension Kit   ","excerpt":"IO  AI01A 4-Sensors 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。MCUリーフとはI2Cで接続されます。\nBasic Kit   AI02A SP\u0026amp;PIR 圧 …","ref":"/en/docs/leaf/io/","title":"IO"},{"body":"IO  AI01A 4-Sensors 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。MCUリーフとはI2Cで接続されます。\nBasic Kit   AI02A SP\u0026amp;PIR 圧電スピーカと人感センサを搭載したリーフです。圧電スピーカはPWM、人感センサはI2CでMCUリーフと接続されます。人感センサは接近検知アルゴリズムを内蔵しており、簡単な設定で接近を検知することが出来、接近検知時に割り込み信号を出力することが可能です。\nExtension Kit   AI03A MIC\u0026amp;VR\u0026amp;LED MEMSマイク、ボリューム、LEDを搭載したリーフです。MEMSマイクとボリュームはアナログ入力ピン、LEDはデジタル出力ピンでMCUリーフと接続されます。低消費電力を実現するためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\nExtension Kit   AI04A LCD キャラクタLCDユニットとスイッチ2個を搭載したリーフです。LCDユニットはI2CでMCUリーフと接続される。スイッチはMCUのデジタル入力ピンとI2C ExpanderのP1ピンに接続されています。 低消費電力を実現するためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\nExtension Kit   ","excerpt":"IO  AI01A 4-Sensors 温湿度センサ、照度センサ、加速度センサを搭載したリーフです。MCUリーフとはI2Cで接続されます。\nBasic Kit   AI02A SP\u0026amp;PIR 圧 …","ref":"/docs/leaf/io/","title":"IO"},{"body":"概要 https://qiita.com/s_nkg/items/bdb235388eaeb567b54d\n","excerpt":"概要 https://qiita.com/s_nkg/items/bdb235388eaeb567b54d","ref":"/docs/examples/basic/webbluetooth_iot/","title":"Web BluetoothをつかったIoTアプリ入門"},{"body":"基板CAD用テンプレートプロジェクト Leafonyの基板設計には各種回路CAD向けのテンプレートプロジェクトを用いると便利です。\n KiCad  I2Cアドレスマップ Leafonyキットには、I2C通信を使用しているリーフがいくつか存在します。\n同じI2Cピンを使用して複数のICと通信する場合、原則として同じI2Cアドレスを使用することはできません。\n自作基板でI2C通信を使用する場合は、アドレスが重複しないように設計して下さい。\nすでに使用されているアドレスは下表のとおりです。\n   Type Leaf Description Chip I2Cアドレス     AI01A 4-Sensors 温湿度センサ HTS221TR 0x5F - -  照度センサ OPT3001 0x45 0x44 -   加速度センサ LIS3DHTR 0x19 - -   AI02A SP\u0026PIR PIR AK9754 0x65 0x66 -   AI03A MIC\u0026VR\u0026LED IOエキスパンダ PCA9557RGVR 0x1B - -   AI04A LCD LCD AQM0802A-RN-GBW 0x3E - -  IOエキスパンダ PCA9557RGVR 0x1A 0x1E -   AV01A-AV04A BAT ADC ADC081C027CIMK 0x50 0x51 0x52   AV05A Solar ADC ADC081C027CIMK 0x52 0x50 0x51   AV06A Grove IOエキスパンダ PCA9557RGVR 0x18 - -   AZ02A SD\u0026RTC リアルタイムクロック Chip 0x68 - -    Leafony bus ピンレイアウト \n基板製造チュートリアル ","excerpt":"基板CAD用テンプレートプロジェクト Leafonyの基板設計には各種回路CAD向けのテンプレートプロジェクトを用いると便利です。\n KiCad  I2Cアドレスマップ Leafonyキットに …","ref":"/en/docs/pcb/","title":"自作リーフ開発"},{"body":"基板CAD用テンプレートプロジェクト Leafonyの基板設計には各種回路CAD向けのテンプレートプロジェクトを用いると便利です。\n KiCad  I2Cアドレスマップ Leafonyキットには、I2C通信を使用しているリーフがいくつか存在します。\n同じI2Cピンを使用して複数のICと通信する場合、原則として同じI2Cアドレスを使用することはできません。\n自作基板でI2C通信を使用する場合は、アドレスが重複しないように設計して下さい。\nすでに使用されているアドレスは下表のとおりです。\n   Type Leaf Description Chip I2Cアドレス     AI01A 4-Sensors 温湿度センサ HTS221TR 0x5F - -  照度センサ OPT3001 0x45 0x44 -   加速度センサ LIS3DHTR 0x19 - -   AI02A SP\u0026PIR PIR AK9754 0x65 0x66 -   AI03A MIC\u0026VR\u0026LED IOエキスパンダ PCA9557RGVR 0x1B - -   AI04A LCD LCD AQM0802A-RN-GBW 0x3E - -  IOエキスパンダ PCA9557RGVR 0x1A 0x1E -   AV01A-AV04A BAT ADC ADC081C027CIMK 0x50 0x51 0x52   AV05A Solar ADC ADC081C027CIMK 0x52 0x50 0x51   AV06A Grove IOエキスパンダ PCA9557RGVR 0x18 - -   AZ02A SD\u0026RTC リアルタイムクロック Chip 0x68 - -    Leafony bus ピンレイアウト \n基板製造チュートリアル ","excerpt":"基板CAD用テンプレートプロジェクト Leafonyの基板設計には各種回路CAD向けのテンプレートプロジェクトを用いると便利です。\n KiCad  I2Cアドレスマップ Leafonyキットに …","ref":"/docs/pcb/","title":"自作リーフ開発"},{"body":"   \u0026lt;\n特徴 MEMSマイク、ボリューム、LEDを搭載したリーフです。MEMSマイクとボリュームはアナログ入力ピン、LEDはデジタル出力ピンでMCUリーフと接続されます。低消費電力を実現するのためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\n性能 マイク    Item Description     Part number SPW2430HR5H-B   Type MEMS   Direction Omnidirectional   Frequency range 100Hz ～ 10kHz   Gain 0dB   Interfaces Analog    ボリューム    Item Description     Part number ST-4ETA10kΩ   Nominal resistance 10kΩ   Resistance law Linear law (B)   Effective electrical angle 210° (1 turn)    LED    Item Description     Part number SML-A12Y8TT86   Package type Side-view   Emitting color Yellow    I2C I/O Expander    Item Description     Part number PCA9557RGVR   Interface I2C (Address: 0x1B)    ブロック図 \nピン配置 サンプルプロジェクト  LED点滅  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"\u0026lt;\n特徴 MEMSマイク、ボリューム、LEDを搭載したリーフです。MEMSマイクとボリュームはアナログ入力ピン、LEDはデジタル出力ピンでMCUリーフと接続されます。低消費電力を実現するのた …","ref":"/en/docs/leaf/io/ai03a/","title":"AI03A MIC\u0026VR\u0026LED"},{"body":"   \u0026lt;\n特徴 MEMSマイク、ボリューム、LEDを搭載したリーフです。MEMSマイクとボリュームはアナログ入力ピン、LEDはデジタル出力ピンでMCUリーフと接続されます。低消費電力を実現するのためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\n性能 マイク    Item Description     Part number SPW2430HR5H-B   Type MEMS   Direction Omnidirectional   Frequency range 100Hz ～ 10kHz   Gain 0dB   Interfaces Analog    ボリューム    Item Description     Part number ST-4ETA10kΩ   Nominal resistance 10kΩ   Resistance law Linear law (B)   Effective electrical angle 210° (1 turn)    LED    Item Description     Part number SML-A12Y8TT86   Package type Side-view   Emitting color Yellow    I2C I/O Expander    Item Description     Part number PCA9557RGVR   Interface I2C (Address: 0x1B)    ブロック図 \nピン配置 サンプルプロジェクト  LED点滅  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"\u0026lt;\n特徴 MEMSマイク、ボリューム、LEDを搭載したリーフです。MEMSマイクとボリュームはアナログ入力ピン、LEDはデジタル出力ピンでMCUリーフと接続されます。低消費電力を実現するのた …","ref":"/docs/leaf/io/ai03a/","title":"AI03A MIC\u0026VR\u0026LED"},{"body":"  \n特徴 キャラクタLCDユニットとスイッチ2個を搭載したリーフです。LCDユニットはI2CでMCUリーフと接続されます。スイッチはMCUのデジタル入力ピンとI2C ExpanderのP1ピンに接続されています。 低消費電力化を実現するためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\n性能 LCD    Item Description     Part number AQM0802A-RN-GBW   Display format 8x2 Character   Viewing area (WxH) 27x10.5mm   Dot size (WxH) 0.45x0.5mm   Dot pitch (WxH) 0.5x0.55mm   Character size (WxH) 2.45x4.35mm   Character pitch (WxH) 2.95x4.9mm   Viewing direction 6:00 O\u0026rsquo;Clock   Driving method 1/16Duty,1/5Bias   Controller IC ST7032I-0D(Sitronix) or compatible   Display mode STN (Gray)/Positive/Reflective   Interfaces I2C (Address: 0x3E)    I2C I/O Expander    Item Description     Part number PCA9557RGVR   Interface I2C (Address: 0x1A or 0x1E)    ブロック図 \nピン配置 サンプルプロジェクト  LED点滅  ライブラリ ライブラリは、予めここからインストールしておきましょう。\n関数は、仕様書に記載していますので、必要に応じて、確認してください。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 キャラクタLCDユニットとスイッチ2個を搭載したリーフです。LCDユニットはI2CでMCUリーフと接続されます。スイッチはMCUのデジタル入力ピンとI2C ExpanderのP1ピンに接続されて …","ref":"/en/docs/leaf/io/ai04a/","title":"AI04A LCD"},{"body":"  \n特徴 キャラクタLCDユニットとスイッチ2個を搭載したリーフです。LCDユニットはI2CでMCUリーフと接続されます。スイッチはMCUのデジタル入力ピンとI2C ExpanderのP1ピンに接続されています。 低消費電力化を実現するためI2C Expander を制御することにより電源をロードスイッチによりオフすることが可能です。\n性能 LCD    Item Description     Part number AQM0802A-RN-GBW   Display format 8x2 Character   Viewing area (WxH) 27x10.5mm   Dot size (WxH) 0.45x0.5mm   Dot pitch (WxH) 0.5x0.55mm   Character size (WxH) 2.45x4.35mm   Character pitch (WxH) 2.95x4.9mm   Viewing direction 6:00 O\u0026rsquo;Clock   Driving method 1/16Duty,1/5Bias   Controller IC ST7032I-0D(Sitronix) or compatible   Display mode STN (Gray)/Positive/Reflective   Interfaces I2C (Address: 0x3E)    I2C I/O Expander    Item Description     Part number PCA9557RGVR   Interface I2C (Address: 0x1A or 0x1E)    ブロック図 \nピン配置 サンプルプロジェクト  LED点滅  ライブラリ ライブラリは、予めここからインストールしておきましょう。\n関数は、仕様書に記載していますので、必要に応じて、確認してください。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 キャラクタLCDユニットとスイッチ2個を搭載したリーフです。LCDユニットはI2CでMCUリーフと接続されます。スイッチはMCUのデジタル入力ピンとI2C ExpanderのP1ピンに接続されて …","ref":"/docs/leaf/io/ai04a/","title":"AI04A LCD"},{"body":"  \n特徴 CR2032コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\n性能 電源    Item Description     Part number TPS61099YFFR   Battery voltage 0.7～3.8V   Output voltage 3.3V±2%   Controlling method PWM/PFM Automatic switching control   Maximum output current 300mA @3.3V to 5V   Protection circuit Over current protection / Thermal shutdown    ADコンバータ    Item Description     Part number ADC081C027CIMK   Resolution 8bit   Reference voltage Vdd(3.3V)   Sample rate 188.9kSPS(max)   Interfaces I2C (Address: 0x50)    ブロック図 \nピン配置 \nサンプルプロジェクト  電池の電圧をパソコンに表示 ※リンク先要変更  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 CR2032コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電 …","ref":"/en/docs/leaf/power/av01a/","title":"AV01A CR2032"},{"body":"  \n特徴 CR2032コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\n性能 電源    Item Description     Part number TPS61099YFFR   Battery voltage 0.7～3.8V   Output voltage 3.3V±2%   Controlling method PWM/PFM Automatic switching control   Maximum output current 300mA @3.3V to 5V   Protection circuit Over current protection / Thermal shutdown    ADコンバータ    Item Description     Part number ADC081C027CIMK   Resolution 8bit   Reference voltage Vdd(3.3V)   Sample rate 188.9kSPS(max)   Interfaces I2C (Address: 0x50)    ブロック図 \nピン配置 \nサンプルプロジェクト  電池の電圧をパソコンに表示 ※リンク先要変更  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 CR2032コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電 …","ref":"/docs/leaf/power/av01a/","title":"AV01A CR2032"},{"body":"概要 Leafony Beacon1)とRaspberry Piとを使ってIoT環境センサを作り、Google スプレッドシートを使って、センサデータを可視化します。\n Beaconとは、地上にある電波を特定の機器で受信することで、位置をはじめとした各種情報を取得するための設備です。BluetoothのBeacon機器の場合、温度や気圧などのセンサを搭載したモジュールを任意の場所に設置して、その場所の環境を観測します。  必要なハードウェア Leafony Beacon (送信側)    Type Name Q\u0026rsquo;ty     AC02A BLE Sugar 1   AI01A 4-Sensors 1   AP01A AVR MCU 1   AV01A CR2032 1   AZ01A USB 1   AZ62A Connector Cover 1   - CR2032 3V Lithium coin cell battery 1   - Screw M2×25mm 2    Raspberry Pi (受信側)  Raspberry Pi 初めての方は、Raspberry Pi 3 B＋ スターターキット（ https://www.switch-science.com/catalog/3880/ ）が便利です。Raspbian OSイメージを書き込んだmicroSDが入っていますが、ディスプレイ、キーボード、マウスは有りません。別途　ご用意してください。 Raspberry Pi は、無線LANでインターネットに接続します。こちらも事前にご用意してください。  Leafony Beaconの作成 組み立て スケッチの書き込み  書き込みには、BLE、4-Sensorsライブラリが必要です。予め、ライブラリをインクルードしておいてください。詳しくは、こちら。 Arduino IDEで、以下のスケッチをマイコンボードに書き込んでください。 ・leafony_beacon.ino Arduino IDE 1.8.9で動作を確認しています。書き込みエラーが発生したら、IDEのバージョンを確認してください。  Raspberry Piの環境構築 BLE Beaconの受信機にはRaspberry Piを使います。今回使用するサンプルコードでは、Node.jsでnobleを使ってBLE Beaconを受信します。受信したデータはGoogle API経由でGoogle スプレッドシートに書き込んでいます。\n下記のスクリプト(6項目)を実行して環境構築をします。https://github.com/Leafony/leafony-beacon/tree/master/spreadsheet-logger\nsudo apt update sudo apt upgrade sudo apt install -y bluetooth libbluetooth-dev libudev-dev git git clone https://github.com/Leafony/leafony-beacon cd leafony-beacon/spreadsheet-logger npm install 注意:WARNINGと表示されますが、このまま進んでください。 Google Sheets APIの取得 Google スプレットシートをNode.jsで操作するためにはAPIを取得する必要があります。まず、下記 Node.js Quick Start のStep.1で、 Enable the Google Sheets API をクリックし、credentials.jsonをダウンロードします。次に、credentials.jsonをleafony-beacon/spreadsheet-loggerディレクトリにコピーしてください。\nNode.js Quickstart | Sheets API | Google Developers : https://developers.google.com/sheets/api/quickstart/nodejs\nindex.js へGoogle SheetsのIDとシート名の設定 Google スプレッドシート を開いて、URLの赤線部分の「シートID」と「シート名」を確認します。 leafony-beacon/spreadsheet-loggerディレクトリ「index.js」があります。「index.js」の18, 19行目にある「spreadsheetId」と「sheetName」に、上記の「シートID」と「シート名」を貼り付けることで、データが書き込まれます。\nアプリの実行 Raspberry piのターミナルに「sudo node .」と入力してEnterをクリックしてください。\n上記URLにブラウザでアクセスすると、Googleアカウントに移動し、ご自身のアカウントを選択します。\n「詳細」をクリックしてください。\n「Leafony Beacon Logger「安全ではないページ」に移動」をクリックしてください。\n「詳細」をクリックしてください。\n「Leafony Beacon Logger「安全ではないページ」に移動」をクリックしてください。\n「許可」をクリックしてください。以下のコードをコピーしてください。ターミナル内に貼り付けると、「token.json」というファイルが生成されたあとに、beaconのスキャンが始まります。\nBeaconが見つかるとログが表示されると同時に、スプレッドシートに同じ内容が追記されるので、スプレッドシートを開いてデータを確認してください。\n","excerpt":"概要 Leafony Beacon1)とRaspberry Piとを使ってIoT環境センサを作り、Google スプレッドシートを使って、センサデータを可視化します。\n Beaconとは、地上にある電 …","ref":"/docs/examples/basic/google_sheets_iot/","title":"Google SheetsをつかったIoTサービス入門"},{"body":"Grove Extention KitのGroveリーフとGroveモジュールで遊べるサンプル\n 超音波センサで距離測定 カメラの撮影  ","excerpt":"Grove Extention KitのGroveリーフとGroveモジュールで遊べるサンプル\n 超音波センサで距離測定 カメラの撮影  ","ref":"/docs/examples/grove/","title":"Grove"},{"body":"電源  AV01A CR2032 CR2032コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\nBasic Kit   AV02A CR2450 CR2450コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\n   AV03A AA BAT 単3電池ホルダを実装し、1.5Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\nExtension Kit   AV04A 2V～4.5V SHコネクタを実装し、2～4.5Vの電池電圧を昇降圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。 SHコネクタに接続可能な電池は乾電池2～3本またはLi-Po、Li-ION電池を想定しています。\nExtension Kit   ","excerpt":"電源  AV01A CR2032 CR2032コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッ …","ref":"/en/docs/leaf/power/","title":"電源リーフ"},{"body":"電源  AV01A CR2032 CR2032コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\nBasic Kit   AV02A CR2450 CR2450コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\n   AV03A AA BAT 単3電池ホルダを実装し、1.5Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\nExtension Kit   AV04A 2V～4.5V SHコネクタを実装し、2～4.5Vの電池電圧を昇降圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。 SHコネクタに接続可能な電池は乾電池2～3本またはLi-Po、Li-ION電池を想定しています。\nExtension Kit   ","excerpt":"電源  AV01A CR2032 CR2032コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッ …","ref":"/docs/leaf/power/","title":"電源リーフ"},{"body":"  \n特徴 CR2450コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\n性能　 電源    Item Description     Part number TPS61099YFFR   Battery voltage 0.7～3.8V   Output voltage 3.3V±2%   Controlling method PWM/PFM Automatic switching control   Maximum output current 300mA @3.3V to 5V   Protection circuit Over current protection / Thermal shutdown    ADコンバータ    Item Description     Part number ADC081C027CIMK   Resolution 8bit   Reference voltage Vdd(3.3V)   Sample rate 188.9kSPS(max)   Interfaces I2C (Address: 0x50)    ブロック図 \nピン配置 \nサンプルプロジェクト  電池の電圧をパソコンに表示 ※リンク先要変更  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 CR2450コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電 …","ref":"/en/docs/leaf/power/av02a/","title":"AV02A CR2450"},{"body":"  \n特徴 CR2450コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\n性能　 電源    Item Description     Part number TPS61099YFFR   Battery voltage 0.7～3.8V   Output voltage 3.3V±2%   Controlling method PWM/PFM Automatic switching control   Maximum output current 300mA @3.3V to 5V   Protection circuit Over current protection / Thermal shutdown    ADコンバータ    Item Description     Part number ADC081C027CIMK   Resolution 8bit   Reference voltage Vdd(3.3V)   Sample rate 188.9kSPS(max)   Interfaces I2C (Address: 0x50)    ブロック図 \nピン配置 \nサンプルプロジェクト  電池の電圧をパソコンに表示 ※リンク先要変更  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 CR2450コイン電池ホルダを実装し、3Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電 …","ref":"/docs/leaf/power/av02a/","title":"AV02A CR2450"},{"body":"  \n特徴 単3電池ホルダを実装し、1.5Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\n性能 電源    Item Description     Part number TPS61099YFFR   Battery voltage 0.7～3.8V   Output voltage 3.3V±2%   Controlling method PWM/PFM Automatic switching control   Maximum output current 300mA @3.3V to 5V   Protection circuit Over current protection / Thermal shutdown    ADコンバータ    Item Description     Part number ADC081C027CIMK   Resolution 8bit   Reference voltage Vdd(3.3V)   Sample rate 188.9kSPS(max)   Interfaces I2C (Address: 0x50)    ブロック図 \nピン配置 \nサンプルプロジェクト  電池の電圧をパソコンに表示 ※リンク先要変更  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 単3電池ホルダを実装し、1.5Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモ …","ref":"/en/docs/leaf/power/av03a/","title":"AV03A AA BAT"},{"body":"  \n特徴 単3電池ホルダを実装し、1.5Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニタするためのADコンバータを実装しています。\n性能 電源    Item Description     Part number TPS61099YFFR   Battery voltage 0.7～3.8V   Output voltage 3.3V±2%   Controlling method PWM/PFM Automatic switching control   Maximum output current 300mA @3.3V to 5V   Protection circuit Over current protection / Thermal shutdown    ADコンバータ    Item Description     Part number ADC081C027CIMK   Resolution 8bit   Reference voltage Vdd(3.3V)   Sample rate 188.9kSPS(max)   Interfaces I2C (Address: 0x50)    ブロック図 \nピン配置 \nサンプルプロジェクト  電池の電圧をパソコンに表示 ※リンク先要変更  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 単3電池ホルダを実装し、1.5Vの電池電圧を昇圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモ …","ref":"/docs/leaf/power/av03a/","title":"AV03A AA BAT"},{"body":"  \n特徴 SHコネクタを実装し、2～4.5Vの電池電圧を昇降圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニターするためのADコンバータを実装しています。 SHコネクタに接続可能な電池は乾電池2～3本またはLi-Po、Li-ION電池を想定しています。\n性能　 電源    Item Description     Part number RP604K331B-TR   Battery voltage 1.8～5.5V   Output voltage 3.3V±2%   Controlling method PWM/PFM Automatic switching control   Maximum output current 300mA (when step down)   Protection circuit Over current protection / Thermal shutdown    ADコンバータ    Item Description     Part number ADC081C027CIMK   Resolution 8bit   Reference voltage Vdd(3.3V)   Sample rate 188.9kSPS(max)   Interfaces I2C (Address: 0x50)    ブロック図 \nピン配置 \nサンプルプロジェクト  電池の電圧をパソコンに表示 ※リンク先要変更  ドキュメント  仕様書 回路図 部品配置図(表面) 部品配置図(裏面) レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 SHコネクタを実装し、2～4.5Vの電池電圧を昇降圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧 …","ref":"/en/docs/leaf/power/av04a/","title":"AV04A 2V～4.5V"},{"body":"  \n特徴 SHコネクタを実装し、2～4.5Vの電池電圧を昇降圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧をモニターするためのADコンバータを実装しています。 SHコネクタに接続可能な電池は乾電池2～3本またはLi-Po、Li-ION電池を想定しています。\n性能　 電源    Item Description     Part number RP604K331B-TR   Battery voltage 1.8～5.5V   Output voltage 3.3V±2%   Controlling method PWM/PFM Automatic switching control   Maximum output current 300mA (when step down)   Protection circuit Over current protection / Thermal shutdown    ADコンバータ    Item Description     Part number ADC081C027CIMK   Resolution 8bit   Reference voltage Vdd(3.3V)   Sample rate 188.9kSPS(max)   Interfaces I2C (Address: 0x50)    ブロック図 \nピン配置 \nサンプルプロジェクト  電池の電圧をパソコンに表示 ※リンク先要変更  ドキュメント  仕様書 回路図 部品配置図(表面) 部品配置図(裏面) レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 SHコネクタを実装し、2～4.5Vの電池電圧を昇降圧電源回路により3.3Vに変換し、3.3Vを各リーフに供給するリーフです。3.3Vをオン/オフするためのスイッチを実装しています。また、電池電圧 …","ref":"/docs/leaf/power/av04a/","title":"AV04A 2V～4.5V"},{"body":"  \n特徴 Arduino Shield接続用コネクタ、SWDコネクタ、ICSPコネクタ、リーフI/F3個を実装した拡張基板です。\nブロック図 \nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 Arduino Shield接続用コネクタ、SWDコネクタ、ICSPコネクタ、リーフI/F3個を実装した拡張基板です。\nブロック図 \nドキュメント  仕様書 回路図 部品配置図 レイアウト …","ref":"/en/docs/leaf/extension/ax01a/","title":"AX01A Shield"},{"body":"  \n特徴 Arduino Shield接続用コネクタ、SWDコネクタ、ICSPコネクタ、リーフI/F3個を実装した拡張基板です。\nブロック図 \nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 Arduino Shield接続用コネクタ、SWDコネクタ、ICSPコネクタ、リーフI/F3個を実装した拡張基板です。\nブロック図 \nドキュメント  仕様書 回路図 部品配置図 レイアウト …","ref":"/docs/leaf/extension/ax01a/","title":"AX01A Shield"},{"body":"Leafony bus のライセンスについて  Leafony busのアートワークの著作者は、Leafony Systems 社です。ライセンスは、 表示 4.0 国際(CC BY 4.0) で、提供されています。なお、著作権表示や無保証を参照する表示は、ありません。Leafony bus以外は、Leafony Systems社は、著作権を主張することはありません。 Leafony busのアートワークをコピーして、使用する場合は、「この製品の一部は、Leafony SystemsによるLeafony busのアートワークを利用しています。」と表示をお願いします。  Leafony bus 準拠のオリジナルリーフを制作する場合 Leafony は、Leafony Systems社の商標です。 オリジナルのリーフを作成する場合は、他のリーフとの互換性を確保するため、Leafony busの電気的・物理的仕様に合致させてください。合致させたものは、「Leafony bus 準拠」と表示して頂いても結構です。勿論、商業的にも自由に無償で使えますが、商品名称に、Leafony の名前を付けることは、Leafony Systems社の製品ラインナップと混同してしまうので、控えて下さい。\n","excerpt":"Leafony bus のライセンスについて  Leafony busのアートワークの著作者は、Leafony Systems 社です。ライセンスは、 表示 4.0 国際(CC BY 4.0) で、提 …","ref":"/en/docs/license/","title":"ライセンス・規約"},{"body":"Leafony bus のライセンスについて  Leafony busのアートワークの著作者は、Leafony Systems 社です。ライセンスは、 表示 4.0 国際(CC BY 4.0) で、提供されています。なお、著作権表示や無保証を参照する表示は、ありません。Leafony bus以外は、Leafony Systems社は、著作権を主張することはありません。 Leafony busのアートワークをコピーして、使用する場合は、「この製品の一部は、Leafony SystemsによるLeafony busのアートワークを利用しています。」と表示をお願いします。  Leafony bus 準拠のオリジナルリーフを制作する場合 Leafony は、Leafony Systems社の商標です。 オリジナルのリーフを作成する場合は、他のリーフとの互換性を確保するため、Leafony busの電気的・物理的仕様に合致させてください。合致させたものは、「Leafony bus 準拠」と表示して頂いても結構です。勿論、商業的にも自由に無償で使えますが、商品名称に、Leafony の名前を付けることは、Leafony Systems社の製品ラインナップと混同してしまうので、控えて下さい。\n","excerpt":"Leafony bus のライセンスについて  Leafony busのアートワークの著作者は、Leafony Systems 社です。ライセンスは、 表示 4.0 国際(CC BY 4.0) で、提 …","ref":"/docs/license/","title":"ライセンス・規約"},{"body":"拡張  AX01A Shield Arduino Shield接続用コネクタ、SWDコネクタ、ICSPコネクタ、リーフI/F3個を実装した拡張基板です。(Connectorは1つのみ）\nExtension Kit   AX02A 29pin リーフI/Fの29ピン全てをスルーホールに接続したリーフです。\nBasic Kit   AX03A Leaf x2 全てのリーフI/F端子を接続したリーフを横に接続するためのリーフです。\nExtension Kit   AX04A Spacer 全てのリーフI/F端子を接続した高さが2mm以上ある部品を使用しているリーフの上に別のリーフを接続するためのリーフです。\nExtension Kit   AX05A I Meas. 3.3VおよびVBUSの消費電流を測定することが出来るリーフです。 電流測定リーフでは3.3VとVBUSは表面と裏面のパッドが電気的に切り離されているので、下記の各々スルーホールに電流計を接続することで、電池リーフから遠い部分にある単体リーフあるいは複数リーフ群の全電源電流を測定できます。下の例では、センサリーフとBLEリーフが電流測定リーフを介して、電池リーフの遠い側に配置されているので、両リーフの合計電流が測定できます。\nExtension Kit   AX06A Grove\u0026amp;5V Seeed Studio製 Groveシリーズに準拠する5Vで動作するUART、I2C、アナログ入力、デジタル入力が可能なリーフです。3.3Vから昇圧電源回路により5Vに変換しGroveに供給します。Grove対応ピンの仕様は以下の通り。 低消費電力を実現するためI2C Expander を制御することにより5Vの電源をオフすることが可能です。\nExtension Kit   AX07A Back to back 全てのリーフI/F端子を接続したリーフを反転させて接続するためのリーフです。\nESP32 Wi-Fi Kit   AX08A 29pin header リーフI/Fの29ピン全てをピンヘッダに接続したリーフです。\nESP32 Wi-Fi Kit   ","excerpt":"拡張  AX01A Shield Arduino Shield接続用コネクタ、SWDコネクタ、ICSPコネクタ、リーフI/F3個を実装した拡張基板です。(Connectorは1つのみ） …","ref":"/en/docs/leaf/extension/","title":"拡張リーフ"},{"body":"拡張  AX01A Shield Arduino Shield接続用コネクタ、SWDコネクタ、ICSPコネクタ、リーフI/F3個を実装した拡張基板です。(Connectorは1つのみ）\nExtension Kit   AX02A 29pin リーフI/Fの29ピン全てをスルーホールに接続したリーフです。\nBasic Kit   AX03A Leaf x2 全てのリーフI/F端子を接続したリーフを横に接続するためのリーフです。\nExtension Kit   AX04A Spacer 全てのリーフI/F端子を接続した高さが2mm以上ある部品を使用しているリーフの上に別のリーフを接続するためのリーフです。\nExtension Kit   AX05A I Meas. 3.3VおよびVBUSの消費電流を測定することが出来るリーフです。 電流測定リーフでは3.3VとVBUSは表面と裏面のパッドが電気的に切り離されているので、下記の各々スルーホールに電流計を接続することで、電池リーフから遠い部分にある単体リーフあるいは複数リーフ群の全電源電流を測定できます。下の例では、センサリーフとBLEリーフが電流測定リーフを介して、電池リーフの遠い側に配置されているので、両リーフの合計電流が測定できます。\nExtension Kit   AX06A Grove\u0026amp;5V Seeed Studio製 Groveシリーズに準拠する5Vで動作するUART、I2C、アナログ入力、デジタル入力が可能なリーフです。3.3Vから昇圧電源回路により5Vに変換しGroveに供給します。Grove対応ピンの仕様は以下の通り。 低消費電力を実現するためI2C Expander を制御することにより5Vの電源をオフすることが可能です。\nExtension Kit   AX07A Back to back 全てのリーフI/F端子を接続したリーフを反転させて接続するためのリーフです。\nESP32 Wi-Fi Kit   AX08A 29pin header リーフI/Fの29ピン全てをピンヘッダに接続したリーフです。\nESP32 Wi-Fi Kit   ","excerpt":"拡張  AX01A Shield Arduino Shield接続用コネクタ、SWDコネクタ、ICSPコネクタ、リーフI/F3個を実装した拡張基板です。(Connectorは1つのみ） …","ref":"/docs/leaf/extension/","title":"拡張リーフ"},{"body":"  \n特徴 リーフI/Fの29ピン全てをスルーホールに接続したリーフです。\nKiCadとEAGLEのデータ 個人の方が、多く利用しているKiCadとEAGLEのデータをご用意しました。Zuken のCADデータを変換して作成したので、変換ミスの可能性をぬぐいきれません。各自で、寸法等十分確認の上、ご使用ください。\n レイアウト図(KiCad) レイアウト図(EAGLE)  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 リーフI/Fの29ピン全てをスルーホールに接続したリーフです。\nKiCadとEAGLEのデータ 個人の方が、多く利用しているKiCadとEAGLEのデータをご用意しました。Zuken  …","ref":"/en/docs/leaf/extension/ax02a/","title":"AX02A 29 pin"},{"body":"  \n特徴 リーフI/Fの29ピン全てをスルーホールに接続したリーフです。\nKiCadとEAGLEのデータ 個人の方が、多く利用しているKiCadとEAGLEのデータをご用意しました。Zuken のCADデータを変換して作成したので、変換ミスの可能性をぬぐいきれません。各自で、寸法等十分確認の上、ご使用ください。\n レイアウト図(KiCad) レイアウト図(EAGLE)  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 リーフI/Fの29ピン全てをスルーホールに接続したリーフです。\nKiCadとEAGLEのデータ 個人の方が、多く利用しているKiCadとEAGLEのデータをご用意しました。Zuken  …","ref":"/docs/leaf/extension/ax02a/","title":"AX02A 29 pin"},{"body":"概要 SP\u0026amp;PIRリーフに搭載された圧電スピーカを使って、メロディーを鳴らしましょう。\n使用するリーフ 以下のリーフを使用します。\n   Type Name Q\u0026rsquo;ty     AI02A SP\u0026amp;PIR 1   AP01A AVR MCU 1   AV01A CR2032 1   AZ01A USB 1   AZ62A Connector Cover 1    CR2032 コイン電池 1    M2ネジ 2    リーフの組み立て 下図のようにリーフを組み立てましょう。\nソースコード Arduinoを開き、ファイル → スケッチ例 → 02.Digital → toneMelodyを開いてください。\nこのサンプルコードでは、スピーカが8番ピンに接続されている事になっています。\nしかし、Leafonyではスピーカが5番ピンに接続されているので、下記の部分を修正して正しいピン接続になるようにしましょう。\n 37行目の8を5に変更  tone(5, melody[thisNote], noteDuration);  44行目の8を5に変更  noTone(5); 実行結果 スピーカーから一度だけメロディが鳴ります。\n","excerpt":"概要 SP\u0026amp;PIRリーフに搭載された圧電スピーカを使って、メロディーを鳴らしましょう。\n使用するリーフ 以下のリーフを使用します。\n   Type Name Q\u0026rsquo;ty …","ref":"/docs/examples/extension/speaker/","title":"スピーカ"},{"body":"  \n特徴 全てのリーフI/F端子を接続したリーフを横に接続するためのリーフです\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 全てのリーフI/F端子を接続したリーフを横に接続するためのリーフです\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","ref":"/en/docs/leaf/extension/ax03a/","title":"AX03A Leaf x2"},{"body":"  \n特徴 全てのリーフI/F端子を接続したリーフを横に接続するためのリーフです\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 全てのリーフI/F端子を接続したリーフを横に接続するためのリーフです\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","ref":"/docs/leaf/extension/ax03a/","title":"AX03A Leaf x2"},{"body":"概要 SP\u0026amp;PIRリーフに搭載された近距離検出用途の赤外線センサIC(AKM AK9754AE)を使って、人が近づいたら音が鳴るシステムを作りましょう。 磁石付きのLeafonyケースに入れると、玄関などにくっつけて使えます。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty     AI02A SP\u0026amp;PIR 1   AP01A AVR MCU 1   AZ01A USB 1   AV01A CR2032 1   AZ62A コネクタカバー 1    CR2032 コイン電池 1    M2ネジ 2    リーフの組み立て 下図のようにリーフを組み立てましょう。\nソースコード Arduino IDEで下記のプログラムを書きましょう。\n ビープ音の場合  //===================================================================== // Human Sensing // // (c) 2020 Trillion-Node Study Group // Released under the MIT license // https://opensource.org/licenses/MIT // // Rev.00 2020/05/16 First release //===================================================================== #include \u0026lt;Wire.h\u0026gt; #define I2C_PIR_ADDR 0x65 #define I2C_SEND_BUF_LENGTH 10 #define I2C_RECV_BUF_LENGTH 10  unsigned char i2c_sendBuf[I2C_SEND_BUF_LENGTH]; unsigned char i2c_recvBuf[I2C_RECV_BUF_LENGTH]; double irData; double tempData; // 人を検出したら呼び出される関数 void onHumanDetected() { Serial.println(\u0026#34;Detect!\u0026#34;); tone(5, 262, 300); // ビープ音を鳴らす } void setup() { // initialize serial communication at 115200 second per second:  Serial.begin(115200); // initialize i2c communication with AK9754AE:  Wire.begin(); delay(100); //人感センサ設定  i2c_write_byte(I2C_PIR_ADDR, 0x20, 0xFF); //CNTL1 Resrt  i2c_write_byte(I2C_PIR_ADDR, 0x2A, 0xF2); //CNTL11 人感アルゴリズム有効/割り込み出力有効  i2c_write_byte(I2C_PIR_ADDR, 0x25, 0x0F); //CNTL6 センサゲイン205%(最大)  i2c_write_byte(I2C_PIR_ADDR, 0x2B, 0xFF); //CNTL12 Mode=1 start Meas(連続測定モード)  delay(1000); //人接近検知割り込み  attachInterrupt(0, onHumanDetected, FALLING ); } void loop() { // バッファをクリア  clearI2CReadbuf(); // レジスタ読み出し  i2c_read(I2C_PIR_ADDR, 0x04, 6, i2c_recvBuf); //IRセンサ  irData = clacIR(); Serial.print(\u0026#34;IR = \u0026#34;); Serial.print(irData,2); Serial.println(\u0026#34; pA\u0026#34;); //センサ温度  tempData = clacTemp(); Serial.print(\u0026#34;TSENS = \u0026#34;); Serial.print(tempData,2); Serial.println(\u0026#34; deg\u0026#34;); Serial.println(\u0026#34;===================================\u0026#34;); delay(1000); } double clacTemp() { double ret; unsigned short val = (unsigned short)((i2c_recvBuf[4] \u0026lt;\u0026lt; 8) | i2c_recvBuf[3]); if ( (val \u0026amp; 0x8000) == 0x8000) { val = ~val + 1; ret = (double)((val) * 0.0019837 ) * -1; } else { ret = (double)val * 0.0019837; } return ret + 25; } double clacIR() { double ret; unsigned short val = (unsigned short)((i2c_recvBuf[2] \u0026lt;\u0026lt; 8) | i2c_recvBuf[1]); if ( (val \u0026amp; 0x8000) == 0x8000) { val = ~val + 1; ret = (double)(val * 0.4578 ) * -1; } else { ret = (double)(val * 0.4578 ); } return ret; } /********************************************** * I2C スレーブデバイスに1バイト書き込む **********************************************/ void i2c_write_byte(int device_address, int reg_address, int write_data){ Wire.beginTransmission(device_address); Wire.write(reg_address); Wire.write(write_data); Wire.endTransmission(); } /********************************************** * I2C スレーブデバイスから1バイト読み込む **********************************************/ unsigned char i2c_read_byte(int device_address, int reg_address){ int read_data = 0; Wire.beginTransmission(device_address); Wire.write(reg_address); Wire.endTransmission(false); Wire.requestFrom(device_address, 1); read_data = Wire.read(); return read_data; } /********************************************** * I2C スレーブデバイスに複数バイト書き込む **********************************************/ void i2c_write(int device_address, int reg_address, int lengrh, unsigned char* write_byte){ Wire.beginTransmission(device_address); Wire.write(reg_address); for (int i = 0; i \u0026lt; lengrh; i++){ Wire.write(write_byte[i]); } Wire.endTransmission(); } /********************************************** * I2C スレーブデバイスから複数バイト読み込む **********************************************/ void i2c_read(int device_address, int reg_address, int lengrh, unsigned char* read_byte){ Wire.beginTransmission(device_address); Wire.write(reg_address); Wire.endTransmission(false); Wire.requestFrom(device_address, lengrh); for (int i = 0; i \u0026lt; lengrh; i++){ read_byte[i] = Wire.read(); } } /********************************************** * I2C 受信バッファクリア **********************************************/ void clearI2CReadbuf(){ memcpy(i2c_recvBuf, 0x00, I2C_RECV_BUF_LENGTH); } ","excerpt":"概要 SP\u0026amp;PIRリーフに搭載された近距離検出用途の赤外線センサIC(AKM AK9754AE)を使って、人が近づいたら音が鳴るシステムを作りましょう。 磁石付きのLeafonyケースに入れる …","ref":"/docs/examples/extension/ir_sensor/","title":"人感センサ"},{"body":"  \n特徴 全てのリーフI/F端子を接続した高さが2mm以上ある部品を使用しているリーフの上に別のリーフを接続するためのリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 全てのリーフI/F端子を接続した高さが2mm以上ある部品を使用しているリーフの上に別のリーフを接続するためのリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト …","ref":"/en/docs/leaf/extension/ax04a/","title":"AX04A Spacer"},{"body":"  \n特徴 全てのリーフI/F端子を接続した高さが2mm以上ある部品を使用しているリーフの上に別のリーフを接続するためのリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 全てのリーフI/F端子を接続した高さが2mm以上ある部品を使用しているリーフの上に別のリーフを接続するためのリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト …","ref":"/docs/leaf/extension/ax04a/","title":"AX04A Spacer"},{"body":"概要 工場出荷時に、ESP32 MCUリーフにArduinoのスケッチが書き込まれているので、スマートフォンやパソコンのWi-Fiを使ってタッチセンサの値を送信して、表示がされます。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty     AP02A ESP32 MCU 1   AV04A 2V~4.5V 1   AX07A Back to back 1   AX08A 29pin header 1    Screw M2×？mm 4    リーフの組み立て 下図のようにリーフを組み立てましょう。\nソースコード  ESP32 MCUをArduino IDEで使用するには、Arduino core for the ESP32 のインストールが必要です。詳しくは、[こちら]。 Arduino IDEで、以下のスケッチをマイコンボードに書き込んでください。  //===================================================================== // Leafony Platform sample sketch // Platform : ESP32 // Processor : ESP32-WROOM-32 // Application : ESP32 Touch Sensor // // Leaf configuration // (1) AP02A ESP MCU // (2) AX08A 29pin header // // (c) 2019 Trillion-Node Study Group // Released under the MIT license // https://opensource.org/licenses/MIT // // Rev.00 2019/11/21 First release //===================================================================== #include \u0026lt;WiFi.h\u0026gt; // ESP32用WiFiライブラリ#include \u0026lt;WiFiClient.h\u0026gt;#include \u0026lt;WiFiAP.h\u0026gt; //---------------------------------------------- // Wi-Fi Set these to your desired credentials. //---------------------------------------------- const char *ssid = \u0026#34;Leafony_ESP32-AP\u0026#34;; const char *password = \u0026#34;password\u0026#34;; WiFiServer server(80); #define TIMEOUT 20000 // タイムアウト 20秒 int update=1; // ブラウザのページ更新間隔(秒)初期値  //---------------------------------------------- // Touch //---------------------------------------------- int threshold = 20; // Touch 検出閾値 // bool touch1detected = false; // bool touch2detected = false; // bool touch3detected = false; // bool touch4detected = false; // bool touch5detected = false; // bool touch6detected = false;  //---------------------------------------------- // Touch 割り込み //---------------------------------------------- // ------ T0 ------ // void gotTouch1(){ // touch1detected = true; // } // ------ T3 ------ // void gotTouch2(){ // touch2detected = true; // } // ------ T4 ------ // void gotTouch3(){ // touch3detected = true; // } // ------ T5 ------ // void gotTouch4(){ // touch4detected = true; // } // ------ T6 ------ // void gotTouch5(){ // touch5detected = true; // } // ------ T7 ------ // void gotTouch6(){ // touch6detected = true; // }  //==================================================================== void setup(){ Serial.begin(115200); // デバッグシリアル出力開始  Serial.println(\u0026#34;Wi-Fi \u0026amp; Touch Sensor Test\u0026#34;); // シリアル出力表示  WiFi.softAP(ssid, password); IPAddress myIP = WiFi.softAPIP(); Serial.print(\u0026#34;AP IP address: \u0026#34;); Serial.println(myIP); server.begin(); // サーバ起動  delay(1000); // Wait  Serial.println(\u0026#34;Server started\u0026#34;); //---------------------------------------------- // Touch 割り込み設定 //---------------------------------------------- // touchAttachInterrupt(T0, gotTouch1, threshold); // D2/22pin // touchAttachInterrupt(T3, gotTouch2, threshold); // D7/9pin // touchAttachInterrupt(T4, gotTouch3, threshold); // D5/28pin // touchAttachInterrupt(T5, gotTouch4, threshold); // D4/26pin // touchAttachInterrupt(T6, gotTouch5, threshold); // D6/7pin // touchAttachInterrupt(T7, gotTouch6, threshold); // D3/24pin } //==================================================================== void loop(){ delay(1000); // Wait：これが短いと”このページは動作していません\u0026#34;が頻発する  WiFiClient client = server.available(); // 接続中のクライアントからデータを受信  char read_data; // 文字変数を定義  char s[65]; // 文字列変数を定義 65バイト64文字  byte data[32]; // 画像転送用の一時保存変数  int len=0; // 文字列等の長さカウント用  int t_wait=0; // 更新時間カウント用  int i,f_size; delay(500); // Wait：これが短いと”このページは動作していません\u0026#34;が頻発する  client = server.available(); // 接続されたクライアントを生成  if(!client)return; // loop()の先頭に戻る // Serial.println(\u0026#34;Connected\u0026#34;); // シリアル出力表示  while(client.connected()){ // 当該クライアントの接続状態を確認  if(client.available()){ // クライアントからのデータを確認  t_wait=0; // 待ち時間変数をリセット  read_data=client.read(); // データを文字変数read_dataに代入  if(read_data==\u0026#39;\\n\u0026#39;){ // 改行を検出した時  if(len\u0026gt;5 \u0026amp;\u0026amp; strncmp(s,\u0026#34;GET /\u0026#34;,5)==0) break; len=0; // 文字列長を0に  }else if(read_data!=\u0026#39;\\r\u0026#39; \u0026amp;\u0026amp; read_data!=\u0026#39;\\0\u0026#39;){ s[len]=read_data; // 文字列変数に文字read_dataを追加  len++; // 変数lenに1を加算  s[len]=\u0026#39;\\0\u0026#39;; // 文字列を終端  if(len\u0026gt;=64) len=63; // 文字列変数の上限  } } t_wait++; // 変数t_waitの値を1増加させる  if(t_wait\u0026gt;TIMEOUT) break; else delay(1); // TIMEOUTに到達したらwhileを抜ける  } delay(1); // クライアント側の応答待ち時間  if(!client.connected()||len\u0026lt;6) return; // 切断された場合はloop()の先頭へ // Serial.println(s); // 受信した命令をシリアル出力表示  if(strncmp(s,\u0026#34;GET / \u0026#34;,6)==0){ // コンテンツ取得命令時  //----------------------------------------------  // Web 表示  //----------------------------------------------  html(client,update,WiFi.softAPIP()); // コンテンツ表示  client.flush(); // ESP32用 ERR_CONNECTION_RESET対策 // client.stop(); // クライアントの切断  return; // 処理の終了・loop()の先頭へ  } //----------------------------------------------  // 更新時間の設定  //----------------------------------------------  if(strncmp(s,\u0026#34;GET /?INT=\u0026#34;,10)==0){ // 更新時間の設定命令を受けた時  update = atoi(\u0026amp;s[10]); // 受信値を変数updateに代入  } //----------------------------------------------  // コマンド送信  //----------------------------------------------  for(i=6;i\u0026lt;strlen(s);i++) if(s[i]==\u0026#39; \u0026#39;||s[i]==\u0026#39;+\u0026#39;) s[i]=\u0026#39;\\0\u0026#39;; htmlMesg(client,\u0026amp;s[6],WiFi.softAPIP()); // メッセージ表示  client.flush(); // ESP32用 ERR_CONNECTION_RESET対策 // client.stop(); // クライアント切断  Serial.println(\u0026#34;Sent HTML\u0026#34;); // シリアル出力表示 } * ESP32_AP_Touch.inoと同じフォルダに保存してください。自動的に読み込まれます //===================================================================== // Leafony Platform sample sketch // Application : html // // (c) 2019 Trillion-Node Study Group // Released under the MIT license // https://opensource.org/licenses/MIT // // Rev.00 2019/11/07 First release //===================================================================== //==================================================================== // Web表示 //==================================================================== void html(WiFiClient \u0026amp;client, int update, uint32_t ip){ char s[65],s_ip[16]; uint16_t touchData; uint16_t touchTemp; sprintf(s_ip,\u0026#34;%d.%d.%d.%d\u0026#34;, ip \u0026amp; 255, ip\u0026gt;\u0026gt;8 \u0026amp; 255, ip\u0026gt;\u0026gt;16 \u0026amp; 255, ip\u0026gt;\u0026gt;24 ); client.println(\u0026#34;HTTP/1.1 200 OK\u0026#34;); // HTTP OKを応答  client.println(\u0026#34;Content-Type: text/html\u0026#34;); // HTMLコンテンツ  client.println(\u0026#34;Connection: close\u0026#34;); // 応答終了後にセッションを閉じる  client.println(); client.println(\u0026#34;\u0026lt;html\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Test Page\u0026lt;/title\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;meta http-equiv=\\\u0026#34;Content-type\\\u0026#34;content=\\\u0026#34;text/html; charset=UTF-8\\\u0026#34;\u0026gt;\u0026#34;); if(update){ client.print(\u0026#34;\u0026lt;meta http-equiv=\\\u0026#34;refresh\\\u0026#34;content=\\\u0026#34;\u0026#34;); client.print(update); client.print(\u0026#34;;URL=http://\u0026#34;); client.print(s_ip); client.println(\u0026#34;/\\\u0026#34;\u0026gt;\u0026#34;); } client.println(\u0026#34;\u0026lt;/head\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;body\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;h3\u0026gt;Wi-Fi \u0026amp; Touch Sensor Test\u0026lt;/h3\u0026gt;\u0026#34;); // ------ T6 ------  touchData=touchRead(T6); client.print(\u0026#34;F7 /D6:\u0026#34;); for (touchTemp=0; touchTemp\u0026lt;=touchData/5; touchTemp++){ client.print(\u0026#34;*\u0026#34;); } client.print(\u0026#34;:\u0026#34;+String(touchData)); // if(touch5detected){  if(touchData\u0026lt;=threshold){ // touch5detected = false;  Serial.println(\u0026#34;T6/D6/ 7pin :\u0026#34;+String(touchData)+\u0026#34; :Touch detected\u0026#34;); client.println(\u0026#34; :Touch detected\u0026#34;); } client.println(\u0026#34;\u0026lt;br\u0026gt;\u0026#34;); // ------ T3 ------  touchData=touchRead(T3); client.print(\u0026#34;F9 /D7:\u0026#34;); for (touchTemp=0; touchTemp\u0026lt;=touchData/5; touchTemp++){ client.print(\u0026#34;*\u0026#34;); } client.print(\u0026#34;:\u0026#34;+String(touchData)); // if(touch2detected){  if(touchData\u0026lt;=threshold){ // touch2detected = false;  Serial.println(\u0026#34;T3/D7/ 9pin :\u0026#34;+String(touchData)+\u0026#34; :Touch detected\u0026#34;); client.println(\u0026#34; :Touch detected\u0026#34;); } client.println(\u0026#34;\u0026lt;br\u0026gt;\u0026#34;); // ------ T0 ------  touchData=touchRead(T0); client.print(\u0026#34;F22/D2:\u0026#34;); for (touchTemp=0; touchTemp\u0026lt;=touchData/5; touchTemp++){ client.print(\u0026#34;*\u0026#34;); } client.print(\u0026#34;:\u0026#34;+String(touchData)); // if(touch1detected){  if(touchData\u0026lt;=threshold){ // touch1detected = false;  Serial.println(\u0026#34;T0/D2/22pin :\u0026#34;+String(touchData)+\u0026#34; :Touch detected\u0026#34;); client.println(\u0026#34; :Touch detected\u0026#34;); } client.println(\u0026#34;\u0026lt;br\u0026gt;\u0026#34;); /* // ------ T7 ------ touchData=touchRead(T7); client.print(\u0026#34;F24/D3:\u0026#34;); for (touchTemp=0; touchTemp\u0026lt;=touchData/5; touchTemp++){ client.print(\u0026#34;*\u0026#34;); } client.print(\u0026#34;:\u0026#34;+String(touchData)); // if(touch6detected){ if(touchData\u0026lt;=threshold){ // touch6detected = false; Serial.println(\u0026#34;T7/D3/24pin :\u0026#34;+String(touchData)+\u0026#34; :Touch detected\u0026#34;); client.println(\u0026#34; :Touch detected\u0026#34;); } client.print(\u0026#34;\u0026lt;br\u0026gt;\u0026#34;); */ // ------ T5 ------  touchData=touchRead(T5); client.print(\u0026#34;F26/D4:\u0026#34;); for (touchTemp=0; touchTemp\u0026lt;=touchData/5; touchTemp++){ client.print(\u0026#34;*\u0026#34;); } client.print(\u0026#34;:\u0026#34;+String(touchData)); // if(touch4detected){  if(touchData\u0026lt;=threshold){ // touch4detected = false;  Serial.println(\u0026#34;T5/D4/26pin :\u0026#34;+String(touchData)+\u0026#34; :Touch detected\u0026#34;); client.println(\u0026#34; :Touch detected\u0026#34;); } client.println(\u0026#34;\u0026lt;br\u0026gt;\u0026#34;); // ------ T4 ------  touchData=touchRead(T4); client.print(\u0026#34;F28/D5:\u0026#34;); for (touchTemp=0; touchTemp\u0026lt;=touchData/5; touchTemp++){ client.print(\u0026#34;*\u0026#34;); } client.print(\u0026#34;:\u0026#34;+String(touchData)); // if(touch3detected){  if(touchData\u0026lt;=threshold){ // touch3detected = false;  Serial.println(\u0026#34;T4/D5/28pin :\u0026#34;+String(touchData)+\u0026#34; :Touch detected\u0026#34;); client.println(\u0026#34; :Touch detected\u0026#34;); } client.println(\u0026#34;\u0026lt;br\u0026gt;\u0026#34;); client.print(\u0026#34;更新間隔 = \u0026#34;); client.print(update); client.println(\u0026#34; 秒\u0026lt;/p\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;hr\u0026gt;\u0026#34;); // client.println(\u0026#34;\u0026lt;h3\u0026gt;HTTP GET\u0026lt;/h3\u0026gt;\u0026#34;);  client.print(\u0026#34;\u0026lt;p\u0026gt;http://\u0026#34;); client.print(s_ip); sprintf(s,\u0026#34;\u0026lt;form method=\\\u0026#34;GET\\\u0026#34;action=\\\u0026#34;http://%s/\\\u0026#34;\u0026gt;\u0026#34;,s_ip); client.println(s); client.println(\u0026#34;自動更新:\u0026lt;input type=\\\u0026#34;submit\\\u0026#34;name=\\\u0026#34;INT\\\u0026#34;value=\\\u0026#34;0 停止\\\u0026#34;\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;input type=\\\u0026#34;submit\\\u0026#34;name=\\\u0026#34;INT\\\u0026#34;value=\\\u0026#34;1 秒\\\u0026#34;\u0026gt;\u0026#34;); // client.println(\u0026#34;\u0026lt;input type=\\\u0026#34;submit\\\u0026#34; name=\\\u0026#34;INT\\\u0026#34; value=\\\u0026#34;2 秒\\\u0026#34;\u0026gt;\u0026#34;); // client.println(\u0026#34;\u0026lt;input type=\\\u0026#34;submit\\\u0026#34; name=\\\u0026#34;INT\\\u0026#34; value=\\\u0026#34;5 秒\\\u0026#34;\u0026gt;\u0026#34;); // client.println(\u0026#34;\u0026lt;input type=\\\u0026#34;submit\\\u0026#34; name=\\\u0026#34;INT\\\u0026#34; value=\\\u0026#34;10 秒\\\u0026#34;\u0026gt;\u0026#34;); // client.println(\u0026#34;　\u0026lt;input type=\\\u0026#34;submit\\\u0026#34; name=\\\u0026#34;RESET\\\u0026#34; value=\\\u0026#34;リセット\\\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026#34;);  client.println(\u0026#34;\u0026lt;/form\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;/body\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;/html\u0026gt;\u0026#34;); } //==================================================================== // コマンド送信 //==================================================================== void htmlMesg(WiFiClient \u0026amp;client, char *txt, uint32_t ip){ char s_ip[16]; sprintf(s_ip,\u0026#34;%d.%d.%d.%d\u0026#34;, ip \u0026amp; 255, ip\u0026gt;\u0026gt;8 \u0026amp; 255, ip\u0026gt;\u0026gt;16 \u0026amp; 255, ip\u0026gt;\u0026gt;24 ); client.println(\u0026#34;HTTP/1.1 200 OK\u0026#34;); // HTTP OKを応答  client.println(\u0026#34;Content-Type: text/html\u0026#34;); // HTMLコンテンツ  client.println(\u0026#34;Connection: close\u0026#34;); // 応答終了後にセッションを閉じる  client.println(); client.println(\u0026#34;\u0026lt;html\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Test Page2\u0026lt;/title\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;meta http-equiv=\\\u0026#34;Content-type\\\u0026#34;content=\\\u0026#34;text/html; charset=UTF-8\\\u0026#34;\u0026gt;\u0026#34;); client.print(\u0026#34;\u0026lt;meta http-equiv=\\\u0026#34;refresh\\\u0026#34;content=\\\u0026#34;3;URL=http://\u0026#34;); client.print(s_ip); client.println(\u0026#34;/\\\u0026#34;\u0026gt;\u0026#34;); client.print(\u0026#34;\u0026lt;p\u0026gt;\u0026#34;); client.print(txt); client.println(\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;/body\u0026gt;\u0026#34;); client.println(\u0026#34;\u0026lt;/html\u0026gt;\u0026#34;); }  Arduino IDE 1.8.9で動作を確認しています。書き込みエラーが発生したら、IDEのバージョンを確認してください  表示のやり方 表示のやり方は、クイックスタートに記載していますので、ご参照願います。\n","excerpt":"概要 工場出荷時に、ESP32 MCUリーフにArduinoのスケッチが書き込まれているので、スマートフォンやパソコンのWi-Fiを使ってタッチセンサの値を送信して、表示がされます。\n使用するリーフ  …","ref":"/docs/examples/esp32/wifi_touchsensor/","title":"Wi-Fi タッチセンサ"},{"body":"概要 ボリュームを回転させると回転量に応じた数のLEDが点灯。また、マイクにより周囲の音量に応じた数のLEDを点灯させることが出来ます。\n使用するリーフ 以下のリーフを使用します\n   Type Name Q\u0026rsquo;ty     AI03A MIC\u0026amp;VR\u0026amp;LED 1   AP01A AVR MCU 1   AV01A CR2032 1   AZ01A USB 1   AZ62A Connector Cover 1    CR2032 コイン電池 1    M2ネジ 2    リーフの組み立て 下図のようにリーフを組み立てましょう。\nソースコード Arduino IDEで下記のプログラムを書きましょう。\nMIC\u0026amp;VR\u0026amp;LEDリーフを使うためにはライブラリのインストールが必要です。 まだインストールしていない場合は開発環境設定ページを参考にライブラリをインストールしてください\n//===================================================================== // Sound level meter // // (c) 2020 Trillion-Node Study Group // Released under the MIT license // https://opensource.org/licenses/MIT // // Rev.00 2020/05/17 First release //===================================================================== #include \u0026lt;MsTimer2.h\u0026gt;#include \u0026lt;avr/wdt.h\u0026gt;#include \u0026lt;avr/sleep.h\u0026gt;#include \u0026lt;avr/power.h\u0026gt;#include \u0026lt;Wire.h\u0026gt; #define AVR_LED 13 #define LED1 6 #define LED2 7 #define LED3 8 #define LED4 9 #define LED5 10 #define LED6 11  #define MIC 16 #define VR 17  unsigned int dataVR; unsigned int dataMic; //----------------------------------------------- // VRとMICデータを取得する //----------------------------------------------- void getSencerData() { dataVR = analogRead(A3); dataMic = analogRead(A2); Serial.println(\u0026#34;---------------------\u0026#34;); Serial.print(\u0026#34;MIC = \u0026#34;); Serial.println(dataMic,DEC); Serial.print(\u0026#34;VR = \u0026#34;); Serial.println(dataVR,DEC); } //----------------------------------------------- // VRとMICの値にあわせてLEDを点灯、消灯させる //----------------------------------------------- void viewSencerData() { if (dataVR \u0026lt; 400) { digitalWrite(LED4,LOW); digitalWrite(LED5,LOW); digitalWrite(LED6,LOW); } else if (dataVR \u0026gt;= 400 \u0026amp;\u0026amp; dataVR \u0026lt; 800) { digitalWrite(LED4,LOW); digitalWrite(LED5,LOW); digitalWrite(LED6,HIGH); } else if (dataVR \u0026gt;= 800 \u0026amp;\u0026amp; dataVR \u0026lt; 900) { digitalWrite(LED4,LOW); digitalWrite(LED5,HIGH); digitalWrite(LED6,HIGH); } else { digitalWrite(LED4,HIGH); digitalWrite(LED5,HIGH); digitalWrite(LED6,HIGH); } if (dataMic \u0026lt; 450) { digitalWrite(LED1,LOW); digitalWrite(LED2,LOW); digitalWrite(LED3,LOW); } else if (dataMic \u0026gt;= 450 \u0026amp;\u0026amp; dataMic \u0026lt; 550) { digitalWrite(LED1,LOW); digitalWrite(LED2,LOW); digitalWrite(LED3,HIGH); } else if (dataMic \u0026gt;= 550 \u0026amp;\u0026amp; dataMic \u0026lt; 650) { digitalWrite(LED1,LOW); digitalWrite(LED2,HIGH); digitalWrite(LED3,HIGH); } else { digitalWrite(LED1,HIGH); digitalWrite(LED2,HIGH); digitalWrite(LED3,HIGH); } } void setup() { Serial.begin(115200); Serial.println(\u0026#34;start!!\u0026#34;); pinMode(AVR_LED, OUTPUT); digitalWrite(AVR_LED, LOW); pinMode(LED1, OUTPUT); digitalWrite(LED1, LOW); pinMode(LED2, OUTPUT); digitalWrite(LED2, LOW); pinMode(LED3, OUTPUT); digitalWrite(LED3, LOW); pinMode(LED4, OUTPUT); digitalWrite(LED4, LOW); pinMode(LED5, OUTPUT); digitalWrite(LED5, LOW); pinMode(LED6, OUTPUT); digitalWrite(LED6, LOW); pinMode(MIC, INPUT); pinMode(VR, INPUT); //起動テスト(LED)  digitalWrite(LED1,HIGH); delay(200); digitalWrite(LED2,HIGH); delay(200); digitalWrite(LED3,HIGH); delay(200); digitalWrite(LED4,HIGH); delay(200); digitalWrite(LED5,HIGH); delay(200); digitalWrite(LED6,HIGH); delay(200); digitalWrite(LED1,LOW); digitalWrite(LED2,LOW); digitalWrite(LED3,LOW); digitalWrite(LED4,LOW); digitalWrite(LED5,LOW); digitalWrite(LED6,LOW); delay(200); } void loop() { getSencerData(); viewSencerData(); delay(100); } ","excerpt":"概要 ボリュームを回転させると回転量に応じた数のLEDが点灯。また、マイクにより周囲の音量に応じた数のLEDを点灯させることが出来ます。\n使用するリーフ 以下のリーフを使用します\n   Type …","ref":"/docs/examples/extension/sound_level/","title":"サウンドレベルメータ"},{"body":"  \n特徴 3.3VおよびVBUSの消費電流を測定することが出来るリーフです。 電流測定リーフでは3.3VとVBUSは表面と裏面のパッドが電気的に切り離されているので、下記の各々スルーホールに電流計を接続することで、電池リーフから遠い部分にある単体リーフあるいは複数リーフ群の全電源電流を測定出来ます。下の例では、センサーリーフとBLEリーフが電流測定リーフを介して、電池リーフの遠い側に配置されているので、両リーフの合計電流が測定出来ます。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 3.3VおよびVBUSの消費電流を測定することが出来るリーフです。 電流測定リーフでは3.3VとVBUSは表面と裏面のパッドが電気的に切り離されているので、下記の各々スルーホールに電流計を …","ref":"/en/docs/leaf/extension/ax05a/","title":"AX05A I Meas"},{"body":"  \n特徴 3.3VおよびVBUSの消費電流を測定することが出来るリーフです。 電流測定リーフでは3.3VとVBUSは表面と裏面のパッドが電気的に切り離されているので、下記の各々スルーホールに電流計を接続することで、電池リーフから遠い部分にある単体リーフあるいは複数リーフ群の全電源電流を測定出来ます。下の例では、センサーリーフとBLEリーフが電流測定リーフを介して、電池リーフの遠い側に配置されているので、両リーフの合計電流が測定出来ます。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 3.3VおよびVBUSの消費電流を測定することが出来るリーフです。 電流測定リーフでは3.3VとVBUSは表面と裏面のパッドが電気的に切り離されているので、下記の各々スルーホールに電流計を …","ref":"/docs/leaf/extension/ax05a/","title":"AX05A I Meas"},{"body":"概要 電源リーフには、電池電圧をモニタするためのADコンバータを実装。温度、湿度、照度、傾きだけでなく、電池電圧も測定し、LCDに表示させます。 温度（または、湿度）の補正の仕方 表示させたい温度（または、湿度）と４-Sensorsの温度（または、湿度）に、ずれがあるときは、２点間補正を行います。詳しくは、こちら。\n必要なハードウェアの準備    Type Name Q\u0026rsquo;ty     AI04A LCD 1   AI01A 4-Sensors 1   AP01A AVR MCU 1   AZ01A USB 1   AX03A Leaf×2 1   AV01A CR2032 1   AZ62A Connector Cover 2   AZ63A Nut Plate 1    CR2032 3V Lithium coin cell battery 1    Screw M2×25mm 4    リーフの組立 ソースコード  書き込みには、4-Sensors、LCD、AVR MCUライブラリ（タイマ割り込み）が必要です。予め、ライブラリをインクルードしておいてください。詳しくは、[こちら]。 Arduino IDEで、以下のスケッチをマイコンボードに書き込んでください。  //===================================================================== // Leafony Platform sample sketch // Platform : 4-Sensors // Processor : ATmega328P (3.3V /8MHz) // Application : 4-Sensors with LCD // // Leaf configuration // (1) AI01 4-Sensors // (2) AI04 LCD // (3) AP01 AVR MCU // (4) AV02 CR2450 or AV01 CR2032 // (5) AZ01 USB\t(for debug) // //\t(c) 2019 Trillion-Node Study Group //\tReleased under the MIT license //\thttps://opensource.org/licenses/MIT // // Rev.00 2019/08/20 First release //===================================================================== //use libraries //Adafruit LIS3DH //https://github.com/adafruit/Adafruit_LIS3DH //※ Adafruit_LIS3DH.h // uint8_t readRegister8(uint8_t reg); // void writeRegister8(uint8_t reg, uint8_t value); // をpublic:に移動する //Adafruit Unified Sensor Driver //https://github.com/adafruit/Adafruit_Sensor //SmartEverything ST HTS221 Humidity Sensor //https://github.com/ameltech/sme-hts221-library //ClosedCube Arduino Library for ClosedCube OPT3001 //https://github.com/closedcube/ClosedCube_OPT3001_Arduino //ST7032 - Arduino LiquidCrystal compatible library //https://github.com/tomozh/arduino_ST7032 //=====================================================================  //===================================================================== // difinition //===================================================================== #include \u0026lt;MsTimer2.h\u0026gt;#include \u0026lt;avr/wdt.h\u0026gt;#include \u0026lt;avr/sleep.h\u0026gt;#include \u0026lt;avr/power.h\u0026gt; #include \u0026lt;Wire.h\u0026gt;#include \u0026lt;Adafruit_LIS3DH.h\u0026gt; #include \u0026lt;Adafruit_Sensor.h\u0026gt;#include \u0026lt;HTS221.h\u0026gt;#include \u0026lt;ClosedCube_OPT3001.h\u0026gt;#include \u0026lt;SoftwareSerial.h\u0026gt;#include \u0026lt;ST7032.h\u0026gt;//=====================================================================  //===================================================================== // シリアルコンソールへのデバック出力 // #define DEBUG = 出力あり //　//#define DEBUG = 出力なし（コメントアウトする） //===================================================================== #define DEBUG //=====================================================================  //===================================================================== // IOピンの名前定義 // 接続するリーフに合わせて定義する //===================================================================== // -------------------------------------------- // PD port // digital 0: PD0 = PCRX (HW UART) // digital 1: PD1 = PCTX (HW UART) // digital 2: PD2 = INT0# // digital 3: PD3 = INT1# // digital 4: PD4 = Reserved /* not use */ // digital 5: PD5 = Reserved /* not use */ // digital 6: PD6 = Reserved /* not use */ // digital 7: PD7 = Reserved /* not use */ // -------------------------------------------- #define PCTX 0 #define PCRX 1 #define INT0 2 #define INT1 3 #define RSV_D4 4 #define RSV_D5 5 #define RSV_D6 6 #define RSV_D7 7  // -------------------------------------------- // PB port // digital 8: PB0 = Reserved /* not use */ // digital 9: PB1 = Reserved /* not use */ // digital 10:PB2 = SS# // digital 11:PB3 = MOSI // digital 12:PB4 = MISO // digital 13:PB5 = SCK (LED) // PB6 = XTAL1 // PB7 = XTAL2 //--------------------------------------------- #define RSV_D8 8 #define RSV_D9 9 #define SS 10 #define MOSI 11 #define MISO 12 #define LED_PIN 13  // -------------------------------------------- // PC port // digital 14/ Analog0: PC0 = Reserved /* not use */ // digital 15/ Analog1: PC1 = Reserved /* not use */ // digital 16/ Analog2: PC2 = Reserved /* not use */ // digital 17/ Analog3: PC3 = Reserved /* not use */ // digital 18/ SDA : PC4 = SDA (I2C) // digital 19/ SCL : PC5 = SCL (I2C) // RESET : PC6 = RESET# //----------------------------------------------- #define RSV_D14 14 #define RSV_D15 15 #define RSV_D16 16 #define RSV_D17 17 #define SDA 18 #define SCL 19  //===================================================================== // プログラム内で使用する定数定義 // //===================================================================== //----------------------------------------------- //３軸センサ、輝度センサ I2Cアドレス //----------------------------------------------- #define LIS2DH_ADDRESS 0x19 // SD0/SA0 pin = VCC #define OPT3001_ADDRESS 0x45 // ADDR pin = VCC #define I2C_EXPANDER_ADDR_LCD 0x1A  //----------------------------------------------- // loop() interval // MsTimer2のタイマー割り込み発生間隔(ms) //----------------------------------------------- #define LOOP_INTERVAL 125 // 125ms interval  //----------------------------------------------- // LIS2DH //----------------------------------------------- #define DIVIDER_2G 16383 // full scale 2G (=0xFFFF/4) #define DIVIDER_4G 8191 // full scale 4G (=0xFFFF/4/2) #define DIVIDER_8G 4096 // full scale 8G (=0xFFFF/4/4) #define DIVIDER_16G 1365 // full scale 16G (=0xFFFF/4/12)  //----------------------------------------------- // Batt ADC ADC081C027 //----------------------------------------------- #define BATT_ADC_ADDR 0x50  //===================================================================== // object //===================================================================== //----------------------------------------------- // Sensor //----------------------------------------------- Adafruit_LIS3DH accel = Adafruit_LIS3DH(); ClosedCube_OPT3001 light; //----------------------------------------------- // LCD //-----------------------------------------------  ST7032 lcd; //===================================================================== // プログラムで使用する変数定義 // //===================================================================== //===================================================================== // RAM data //===================================================================== //--------------------------- // loop counter //--------------------------- uint8_t iLoop1s = 0; //--------------------------- // event //--------------------------- bool eventSensorRead = false; bool eventWriteLCD = false; //--------------------------- // int0 interrupt //--------------------------- volatile bool bEventSleep = false; //--------------------------- // interval Timer2 interrupt //--------------------------- volatile bool bInterval = false; //--------------------------- // LIS2DH : accelerometer //--------------------------- int16_t dataX, dataY, dataZ; float dataX_g, dataY_g, dataZ_g; float dataTilt, avrTilt; //--------------------------- // HTS221 : Temperature/Humidity //--------------------------- float dataTemp, avrTemp; float dataHumid, avrHumid; float calcTemp = 0; float calcHumid = 0; //--------------------------- // 2点補正用データ //--------------------------- // 温度補正用データ0 float TL0 = 25.0; // 4-Sensors温度測定値 float TM0 = 25.0; // 温度計等測定値 // 温度補正用データ1 float TL1 = 40.0; // 4-Sensors温度測定値 float TM1 = 40.0; // 温度計等測定値  // 湿度補正用データ0 float HL0 = 60.0; // 4-Sensors湿度測定値 float HM0 = 60.0; // 湿度計等測定値 // 湿度補正用データ1 float HL1 = 80.0; // 4-Sensors湿度測定値 float HM1 = 80.0; // 湿度計等測定値  //--------------------------- // OPT3001 : Light //--------------------------- float dataLight, avrLight; float calcLight = 0; //--------------------------- // LCD //--------------------------- volatile bool bLCDchange = false; volatile int lcd_view_sts = 0; //--------------------------- // Sleep, Watchdog Timer //---------------------------  volatile int countWDT = 0; volatile int wakeupWDT = 2; //--------------------------- // Batt //--------------------------- float dataBatt = 0; //===================================================================== // setup //===================================================================== //----------------------------------------------- // port //----------------------------------------------- //===================================================================== // IOピンの入出力設定 // 接続するリーフに合わせて設定する //===================================================================== void setupPort(){ //---------------------  // PD port  //---------------------  // PD0 : digital 0 = RX  // PD1 : digital 1 = TX  pinMode(INT0, INPUT); // PD2 : digital 2 = BLE interrupt  pinMode(INT1, INPUT); // PD3 : digital 3 = sensor interrupt  //---------------------  // PB port  //---------------------  pinMode(LED_PIN, OUTPUT); // PB5 : digital 13 = DEV _LED  digitalWrite(LED_PIN, LOW); //---------------------  // PC port  //---------------------  // PC4 : digital 18 = I2C SDA  // PC5 : digital 19 = I2C SCL } //===================================================================== // 割り込み処理初期設定 // //===================================================================== //----------------------------------------------- // external interrupt // 外部割り込み設定 //----------------------------------------------- void setupExtInt(){ attachInterrupt(0, intExtInt0, FALLING); // Sw1 INT0# = enabled  detachInterrupt(1); // sensor INT1# = disabled } //----------------------------------------------- // timer2 interrupt (interval=125ms, int=overflow) // メインループのタイマー割り込み設定 //----------------------------------------------- void setupTC2Int(){ MsTimer2::set(LOOP_INTERVAL, intTimer2); } //===================================================================== // I2C　制御関数 // //===================================================================== //----------------------------------------------- //I2C スレーブデバイスに1バイト書き込む //----------------------------------------------- void i2c_write_byte(int device_address, int reg_address, int write_data){ Wire.beginTransmission(device_address); Wire.write(reg_address); Wire.write(write_data); Wire.endTransmission(); } //----------------------------------------------- //I2C スレーブデバイスから1バイト読み込む //----------------------------------------------- unsigned char i2c_read_byte(int device_address, int reg_address){ int read_data = 0; Wire.beginTransmission(device_address); Wire.write(reg_address); Wire.endTransmission(false); Wire.requestFrom(device_address, 1); read_data = Wire.read(); return read_data; } //===================================================================== // 各デバイスの初期設定 // //===================================================================== //----------------------------------------------- // sensor //----------------------------------------------- void setupSensor(){ //-------------------------------------  // LIS2DH (accelerometer)  //-------------------------------------  //-------------------  // I2C address  //------------------  accel.begin(LIS2DH_ADDRESS); //-------------------  // register  //-------------------  accel.writeRegister8(LIS3DH_REG_CTRL1, 0x07); //X,Y,Z axis = enable  accel.setDataRate(LIS3DH_DATARATE_1_HZ); //Data rate = 1Hz  accel.writeRegister8(LIS3DH_REG_CTRL2, 0x00); accel.writeRegister8(LIS3DH_REG_CTRL3, 0x00); // INT Disable  accel.writeRegister8(LIS3DH_REG_CTRL4, 0x80); //BUD = enable, Scale = +/-2g  //-------------------------------------  // HTS221 (temperature /humidity)  //-------------------------------------  smeHumidity.begin(); //-------------------------------------  // OPT3001 (light)  //-------------------------------------  OPT3001_Config newConfig; OPT3001_ErrorCode errorConfig; //-------------------  // I2C address  //-------------------  light.begin(OPT3001_ADDRESS); //-------------------  // config register  //-------------------  newConfig.RangeNumber = B1100; // automatic full scale  newConfig.ConvertionTime = B1; // convertion time = 800ms  newConfig.ModeOfConversionOperation = B11; // continous conversion  newConfig.Latch = B0; // hysteresis-style  errorConfig = light.writeConfig(newConfig); if(errorConfig != NO_ERROR){ errorConfig = light.writeConfig(newConfig); //retry  } } //===================================================================== // 割り込み処理 // //===================================================================== //===================================================================== // interrupt //===================================================================== //---------------------------------------------- // Timer2 INT // タイマー割り込み関数 //---------------------------------------------- void intTimer2(){ bInterval = 1; } //--------------------------------------------- // Watchdog Timer INT // WDT割り込み関数 //--------------------------------------------- ISR(WDT_vect){ wdt_disable(); countWDT += 1; if (countWDT \u0026gt;= wakeupWDT){ countWDT = 0; } } //---------------------------------------------- // INT0 // INT0割り込み関数 //---------------------------------------------- void intExtInt0(){ if (bEventSleep == false) { bEventSleep = true; } else { bEventSleep = false; } } //---------------------------------------------- // INT1 // INT1割り込み関数 //---------------------------------------------- void intExtInt1(){ //bWakeupINT1 = true; } //==================================================================== // functions //==================================================================== //-------------------------------------------------------------------- // counter /event //-------------------------------------------------------------------- //----------------------------------------- // main loop // メインループのループ回数をカウントし // 1秒間隔でセンサーデータの取得をONにする // 4秒間隔でスリープ確認をONにする //----------------------------------------- void loopCounter(){ iLoop1s += 1; //--------------------  // 1s period  //--------------------  if (iLoop1s \u0026gt;= 8){ // 125ms x 8 = 1s  iLoop1s = 0; eventSensorRead = true; eventWriteLCD = true; } } //-------------------------------------------------------------------- // sensor //-------------------------------------------------------------------- //----------------------------------------- // main loop // センサーデータ取得がONのとき、各センサーからデータを取得 // コンソール出力がONのときシリアルに測定値と計算結果を出力する //----------------------------------------- void loopSensor(){ double temp_mv; //---------------------------  // 1s period  //---------------------------  if (eventSensorRead == true){ //-------------------------  // initialize parameter  //-------------------------  eventSensorRead = false; //-------------------------  // LIS2DH  // 3軸センサーのデータ取得  //-------------------------  accel.read(); dataX_g = accel.x_g; //X軸  dataY_g = accel.y_g; //Y軸  dataZ_g = accel.z_g; //Z軸  if(dataZ_g \u0026gt;= 1.0){ dataZ_g = 1.00; } else if (dataZ_g \u0026lt;= -1.0){ dataZ_g = -1.00; } dataTilt = acos(dataZ_g)/PI*180; //-------------------------  // HTS221  // 温湿度センサーデータ取得  //-------------------------  dataTemp = (float)smeHumidity.readTemperature(); //温度  dataHumid = (float)smeHumidity.readHumidity(); //湿度  //-------------------------  // 温度と湿度の2点補正  //-------------------------  dataTemp=TM0+(TM1-TM0)*(dataTemp-TL0)/(TL1-TL0); // 温度補正  dataHumid=HM0+(HM1-HM0)*(dataHumid-HL0)/(HL1-HL0); // 湿度補正  //-------------------------  // OPT3001  // 照度センサーデータ取得  //-------------------------  OPT3001 result = light.readResult(); if(result.error == NO_ERROR){ dataLight = result.lux; } //-------------------------  // ADC081C027（ADC)  // 電池リーフ電池電圧取得  //-------------------------  uint8_t adcVal1 = 0; uint8_t adcVal2 = 0; Wire.beginTransmission(BATT_ADC_ADDR); Wire.write(0x00); Wire.endTransmission(false); Wire.requestFrom(BATT_ADC_ADDR,2); adcVal1 = Wire.read(); adcVal2 = Wire.read(); if (adcVal1 == 0xff \u0026amp;\u0026amp; adcVal2 == 0xff) { //測定値がFFならバッテリリーフはつながっていない  adcVal1 = adcVal2 = 0; } //電圧計算　ADC　* （(リファレンス電圧(3.3V)/ ADCの分解能(256)) * 分圧比（２倍））  //dataBatt = (((adcVal1 \u0026lt;\u0026lt; 4) | (adcVal2 \u0026gt;\u0026gt; 4)) * (3.3 / 256)) * 2 ;  temp_mv = ((double)((adcVal1 \u0026lt;\u0026lt; 4) | (adcVal2 \u0026gt;\u0026gt; 4)) * 3300 * 2) / 256; dataBatt = (float)(temp_mv / 1000); //-------------------------  // シリアルモニタ表示  //------------------------- #ifdef DEBUG  Serial.println(\u0026#34;\u0026#34;); #if 0Serial.println(\u0026#34;--- sensor data ---\u0026#34;); Serial.println(\u0026#34; Tmp[degC] = \u0026#34; + String(dataTemp)); Serial.println(\u0026#34; Hum[%] = \u0026#34; + String(dataHumid)); Serial.println(\u0026#34; Lum[lx] = \u0026#34; + String(dataLight)); Serial.println(\u0026#34; Ang[arc deg] = \u0026#34; + String(dataTilt)); Serial.println(\u0026#34; Bat[V] = \u0026#34; + String(dataBatt)); //Serial.println(\u0026#34;\u0026#34;); //Serial.println(\u0026#34; Accel X,Y,Z\u0026#34; + String(dataX_g) + \u0026#34; \u0026#34; + String(dataY_g) + \u0026#34; \u0026#34; + String(dataZ_g)); #else  Serial.println(\u0026#34;T =\u0026#34; + String(dataTemp) + \u0026#34; H =\u0026#34; + String(dataHumid) + \u0026#34; L=\u0026#34; + String(dataLight) + \u0026#34; A=\u0026#34; + String(dataTilt) + \u0026#34; V=\u0026#34; + String(dataBatt)); #endif #endif  //bWakeupINT1 = false;  } } //debug /// void getBattVal() { uint8_t adcVal1 = 0; uint8_t adcVal2 = 0; Wire.beginTransmission(BATT_ADC_ADDR); Wire.write(0x00); Wire.endTransmission(false); Wire.requestFrom(BATT_ADC_ADDR,2); adcVal1 = Wire.read(); adcVal2 = Wire.read(); if (adcVal1 == 0xff \u0026amp;\u0026amp; adcVal2 == 0xff) { //測定値がFFならバッテリリーフはつながっていない  adcVal1 = adcVal2 = 0; } //電圧計算　ADC　* （(リファレンス電圧(3.3V)/ ADCの分解能(256)) * 分圧比（２倍））  //dataBatt = (((adcVal1 \u0026lt;\u0026lt; 4) | (adcVal2 \u0026gt;\u0026gt; 4)) * (3.3 / 256)) * 2 ;  double temp_mv = ((double)((adcVal1 \u0026lt;\u0026lt; 4) | (adcVal2 \u0026gt;\u0026gt; 4)) * 3300 * 2) / 256; float batval = (float)(temp_mv / 1000); Serial.println(\u0026#34; V=\u0026#34; + String(batval)); } void loopLCD( void ){ /* */ if( eventWriteLCD == true ){ eventWriteLCD = false; veiwSencerData(); } } //--------------------------------------- // Veiw sensor data // センサーデータを文字列に変換してLCDに表示する //--------------------------------------- void veiwSencerData(){ float value; char temp[7], humid[7], light[7], tilt[7],battVolt[7]; char code[4]; char sendData[40]; //-----------------------------------  //センサーデータを文字列に変換  //dtostrf(変換する数字,変換される文字数,小数点以下の桁数,変換した文字の格納先);  //変換される文字数を-にすると変換される文字は左詰め、+なら右詰めとなる  //-----------------------------------  //-------------------------  // Temperature (4Byte)  //-------------------------  value = dataTemp; if(value \u0026gt;= 100){ value = 99.9; } else if(value \u0026lt;= -10){ value = -9.9; } dtostrf(value,4,1,temp); //-------------------------  // Humidity (4Byte)  //-------------------------  value = dataHumid; dtostrf(value,4,1,humid); //-------------------------  // Ambient Light (5Byte)  //-------------------------  value = dataLight; if(value \u0026gt;= 100000){ value = 99999; } dtostrf(value,5,0,light); //-------------------------  // Tilt (4Byte)  //-------------------------  value = dataTilt; if(value \u0026lt; 3){ value = 0; } dtostrf(value,4,0,tilt); //-------------------------  // Battery Voltage (4Byte)  //-------------------------  value = dataBatt; if (value \u0026gt;= 10){ value = 9.99; } dtostrf(value, 4, 2, battVolt); trim(temp); trim(humid); trim(light); trim(tilt); trim(battVolt); lcd.clear(); switch (lcd_view_sts) { case 0: // Tmp XX.X [degC]  lcd.print(\u0026#34;Temp\u0026#34;); lcd.setCursor(0, 1); lcd.print( String(temp) +\u0026#34; C\u0026#34;); break; case 1: // Hum xx.x [%]  lcd.print(\u0026#34;Humidity\u0026#34;); lcd.setCursor(0, 1); lcd.print( String(humid) +\u0026#34; %\u0026#34;); break; case 2: // Lum XXXXX [lx]  lcd.print(\u0026#34;Luminous\u0026#34;); lcd.setCursor(0, 1); lcd.print( String(light) +\u0026#34; lx\u0026#34;); break; case 3: // Ang XXXX [arc deg]  lcd.print(\u0026#34;Angle\u0026#34;); lcd.setCursor(0, 1); lcd.print( String(tilt) +\u0026#34; deg\u0026#34;); break; case 4: // Bat X.XX [V]  lcd.print(\u0026#34;Battery\u0026#34;); lcd.setCursor(0, 1); lcd.print( String(battVolt) +\u0026#34; V\u0026#34;); break; default: break; } if (lcd_view_sts \u0026lt; 4){ lcd_view_sts++; } else{ lcd_view_sts = 0; } //debug// #ifdef DEBUG  //getBattVal(); #endif //debug// } //--------------------------------------- // trim // 文字列配列からSPを削除する //--------------------------------------- void trim(char * data) { int i = 0, j = 0; while (*(data + i) != \u0026#39;\\0\u0026#39;){ if (*(data + i) != \u0026#39; \u0026#39;){ *(data + j) = *(data + i); j++; } i++; } *(data + j) = \u0026#39;\\0\u0026#39;; } //-------------------------------------------------------------------- // sleep //-------------------------------------------------------------------- //----------------------------------------- // main loop // スリープ移行要求があった場合、センサーリーフをSLEEPさせて // WDTをセットしマイコンリーフをスリープさせる //----------------------------------------- void loopSleep(){ if (bEventSleep == true){ //bEventSleep = false;  #ifdef DEBUG  Serial.print(\u0026#34; \u0026gt;\u0026gt;\u0026gt; Go to sleep : \u0026#34;); Serial.flush(); #endif  //-----------------------  // sleep  //-----------------------  sleepLCD(); sleepSensor(); //wdt_start();  sleep(); //-----------------------  // wakeup  //-----------------------  wakeupSensor(); wakeupLCD(); #ifdef DEBUG  Serial.println(\u0026#34; \u0026lt;\u0026lt;\u0026lt; Wake up \u0026lt;\u0026lt;\u0026lt;\u0026#34;); #endif  } } //----------------------------------------- // SLEEP //----------------------------------------- void sleep(){ ADCSRA \u0026amp;= ~(1 \u0026lt;\u0026lt; ADEN); //ADC停止  set_sleep_mode(SLEEP_MODE_PWR_DOWN); //SET SLEEP MODE  sleep_enable(); // SLEEP ENABLE  // BOD停止  MCUCR |= (1 \u0026lt;\u0026lt; BODSE) | (1 \u0026lt;\u0026lt; BODS); // MCUCRのBODSとBODSEに1をセット  MCUCR = (MCUCR \u0026amp; ~(1 \u0026lt;\u0026lt; BODSE)) | (1 \u0026lt;\u0026lt; BODS); // すぐに（4クロック以内）BODSSEを0, BODSを1に設定  asm(\u0026#34;sleep\u0026#34;); // 3クロック以内にスリープ  sleep_disable(); // SLEEP DISABLE } //----------------------------------------- // WDT //----------------------------------------- void wdt_start(){ // watchdog timer reset  wdt_reset(); //disable interruput  cli(); //clear WatchDog system Reset Flag(WDRF)  MCUSR \u0026amp;= ~(1 \u0026lt;\u0026lt; WDRF); // WDT変更許可  // WDCEとWDE同時セットで変更許可  WDTCSR |= 1 \u0026lt;\u0026lt; WDCE | 1 \u0026lt;\u0026lt; WDE; //WDT設定  // WDE=0,WDIE=1 :WDT overflowで割り込み  // WDP3=1,WDP2=0,WDP1=0,WDP0=1: 8s  WDTCSR = 1 \u0026lt;\u0026lt; WDIE | 0 \u0026lt;\u0026lt; WDE | 1 \u0026lt;\u0026lt; WDP3 | 0 \u0026lt;\u0026lt; WDP2 | 0 \u0026lt;\u0026lt; WDP1 | 1 \u0026lt;\u0026lt; WDP0; //enable interruput  sei(); } //----------------------------------------- // sleep sensor // センサーリーフをスリープさせる //----------------------------------------- void sleepSensor(){ //-----------------------  // OPT3001 sleep  //-----------------------  OPT3001_Config newConfig; OPT3001_ErrorCode errorConfig; newConfig.ModeOfConversionOperation = B00; errorConfig = light.writeConfig(newConfig); if(errorConfig != NO_ERROR){ errorConfig = light.writeConfig(newConfig); } //-----------------------  // LIS2DH sleep  //-----------------------  accel.setDataRate(LIS3DH_DATARATE_POWERDOWN); //-----------------------  // HTS221 sleep  //-----------------------  smeHumidity.deactivate(); } //----------------------------------------- // wakeup sensor // センサーリーフをスリープから復帰させる //----------------------------------------- void wakeupSensor(){ //-----------------------  // OPT3001 wakeup  //-----------------------  OPT3001_Config newConfig; OPT3001_ErrorCode errorConfig; newConfig.RangeNumber = B1100; //automatic full scale  newConfig.ConvertionTime = B1; //convertion time = 800ms  newConfig.ModeOfConversionOperation = B11; //continous conversion  newConfig.Latch = B1; //latch window style  errorConfig = light.writeConfig(newConfig); if(errorConfig != NO_ERROR){ errorConfig = light.writeConfig(newConfig); //retry  } //-----------------------  // LIS2DH wakeup  //-----------------------  accel.setDataRate(LIS3DH_DATARATE_1_HZ); //-----------------------  // HTS221 wakeup  //-----------------------  smeHumidity.activate(); } //----------------------------------------- // sleep LCD // LCDリーフをスリープさせる //----------------------------------------- void sleepLCD() { lcd.noDisplay(); } //----------------------------------------- // sleep LCD // LCDリーフをスリープさせる //----------------------------------------- void wakeupLCD(){ lcd.display(); } //----------------------------------------- // poweroff LCD // LCDの電源OFF //----------------------------------------- void powerOffLCD(){ // LCD 電源 OFF  i2c_write_byte(I2C_EXPANDER_ADDR_LCD, 0x01, 0x00); } //----------------------------------------- // wakeup LCD // LCDリーフをスリープさせる //----------------------------------------- void powerOnLCD(){ // LCD 電源　ＯＮ  i2c_write_byte(I2C_EXPANDER_ADDR_LCD, 0x01, 0x01); // LCDの電源が一度落ちたので、ＬＣＤを再設定  lcd.begin(8, 2); lcd.setContrast(30); lcd.clear(); } //==================================================================== // setup //==================================================================== void setup() { //WDT disable  wdt_disable(); delay(10); Serial.begin(115200); // UART 9600bps  Wire.begin(); // I2C 100KHz  i2c_write_byte(I2C_EXPANDER_ADDR_LCD, 0x03, 0xFE); powerOnLCD(); #ifdef DEBUG  Serial.println(\u0026#34;=========================================\u0026#34;); Serial.println(\u0026#34;setup start\u0026#34;); #endif  setupPort(); delay(10); noInterrupts(); setupExtInt(); setupTC2Int(); interrupts(); setupSensor(); MsTimer2::start(); // Timer2 inverval start  #ifdef DEBUG  Serial.println(\u0026#34;\u0026#34;); Serial.println(\u0026#34;=========================================\u0026#34;); Serial.println(\u0026#34;loop start\u0026#34;); Serial.println(\u0026#34;\u0026#34;); #endif  } //==================================================================== // loop //==================================================================== void loop() { //-----------------------------------------------------  // Timer2 interval　125ms で1回ループ  //-----------------------------------------------------  if (bInterval == true){ bInterval = false; //--------------------------------------------  //--------------------------------------------  // loop counter  //--------------------------------------------  loopCounter(); //--------------------------------------------  // sensor read  //--------------------------------------------  loopSensor(); //--------------------------------------------  // LCD  //--------------------------------------------  loopLCD(); //--------------------------------------------  // sleep/resume  //--------------------------------------------  loopSleep(); } } ","excerpt":"概要 電源リーフには、電池電圧をモニタするためのADコンバータを実装。温度、湿度、照度、傾きだけでなく、電池電圧も測定し、LCDに表示させます。 温度（または、湿度）の補正の仕方 表示させたい温度（ま …","ref":"/docs/examples/extension/lcd/","title":"LCD"},{"body":"  \n特徴 Seeed Studio製 Groveシリーズに準拠する5Vで動作するUART、I2C、アナログ入力、デジタル入力が可能なリーフです。3.3Vから昇圧電源回路により5Vに変換しGroveに供給します。Grove対応ピンの仕様は以下の通り。 低消費電力を実現するためI2C Expander を制御することにより5Vの電源をオフすることが可能です。\n性能 電源    Item Description     Part number TPS61099YFFR   Battery voltage 0.7～3.8V   Output voltage 5V±2%   Controlling method PWM/PFM Automatic switching control   Maximum output current 300mA @3.3V to 5V   Protection circuit Over current protection / Thermal shutdown    I2C I/O Expander    Item Description     Part number PCA9557RGVR   Interface I2C (Address: 0x1B)    ブロック図 \nサンプルプロジェクト  LED点滅  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 Seeed Studio製 Groveシリーズに準拠する5Vで動作するUART、I2C、アナログ入力、デジタル入力が可能なリーフです。3.3Vから昇圧電源回路により5Vに変換しGroveに供給し …","ref":"/en/docs/leaf/extension/ax06a/","title":"AX06A Grove\u00265V"},{"body":"  \n特徴 Seeed Studio製 Groveシリーズに準拠する5Vで動作するUART、I2C、アナログ入力、デジタル入力が可能なリーフです。3.3Vから昇圧電源回路により5Vに変換しGroveに供給します。Grove対応ピンの仕様は以下の通り。 低消費電力を実現するためI2C Expander を制御することにより5Vの電源をオフすることが可能です。\n性能 電源    Item Description     Part number TPS61099YFFR   Battery voltage 0.7～3.8V   Output voltage 5V±2%   Controlling method PWM/PFM Automatic switching control   Maximum output current 300mA @3.3V to 5V   Protection circuit Over current protection / Thermal shutdown    I2C I/O Expander    Item Description     Part number PCA9557RGVR   Interface I2C (Address: 0x1B)    ブロック図 \nサンプルプロジェクト  LED点滅  ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 Seeed Studio製 Groveシリーズに準拠する5Vで動作するUART、I2C、アナログ入力、デジタル入力が可能なリーフです。3.3Vから昇圧電源回路により5Vに変換しGroveに供給し …","ref":"/docs/leaf/extension/ax06a/","title":"AX06A Grove\u00265V"},{"body":"概要 時刻がパソコンのシリアルモニタに表示されます。 必要なハードウェアの準備    Type Name Q\u0026rsquo;ty     AZ02A RTC\u0026amp;microSD 1   AP01A AVR MCU 1   AV01A CR2032 1   AZ01A USB 1   AZ62A Connector Cover 1    CR2032 3V Lithium coin cell battery 1    Screw M2×25mm 2    リーフの組立 スケッチの書き込み  書き込みには、RTC＆MicroSDライブラリが必要です。予め、ライブラリをインクルードしておいてください。詳しくは、[こちら]。 Arduino IDEで、「ファイル」→「スケッチ例」→「RTClib」→「pcf8523」で、マイコンボードに書き込んでください。 ここまででRTC自体は作動しますが、時刻の設定がされていません。  ソースコード  現在の時刻の自動設定と、低消費電力設定のため、以下のように青字の部分のスケッチを変更してください。  void setup () { while (!Serial) { delay(1); // for Leonardo/Micro/Zero 　} Serial.begin(57600);　if (! rtc.begin()) { Serial.println(“Couldn’t find RTC”); while (1); } if (! rtc.initialized()) { Serial.println(“RTC is NOT running!”); // following line sets the RTC to the date \u0026amp; time this sketch was compiled 　rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));　//自動時刻合わせ 　// This line sets the RTC with an explicit date \u0026amp; time, for example to set 　// January 21, 2014 at 3am you would call: 　//rtc.adjust(DateTime(2019, 8, 9, 13, 0, 0));　 } rtc.writeSqwPinMode(PCF8523_OFF);　//低消費電力化 } 時刻の設定 RTCの停止と起動を行って、時刻を設定してください。\n USBケーブルを抜き、CR2032リーフのPower switchをOFFにして、RTCを停止します。 USBケーブルを入れ、RTCを起動させます。 CR2032リーフのPower switchをONにします。  シリアルモニタの表示 シリアルモニターを起動させて、時刻が表示されていることを確認してください。\n","excerpt":"概要 時刻がパソコンのシリアルモニタに表示されます。 必要なハードウェアの準備    Type Name Q\u0026rsquo;ty     AZ02A RTC\u0026amp;microSD 1   AP01A …","ref":"/docs/examples/extension/rtc/","title":"リアルタイムクロック"},{"body":"  \n特徴 全てのリーフI/F端子を接続したリーフを反転させて接続するためのリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 全てのリーフI/F端子を接続したリーフを反転させて接続するためのリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","ref":"/en/docs/leaf/extension/ax07a/","title":"AX07A Back to back"},{"body":"  \n特徴 全てのリーフI/F端子を接続したリーフを反転させて接続するためのリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 全てのリーフI/F端子を接続したリーフを反転させて接続するためのリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","ref":"/docs/leaf/extension/ax07a/","title":"AX07A Back to back"},{"body":"概要 microSD カードの情報が、パソコンのシリアルモニタに表示されます。 必要なハードウェアの準備    Type Name Q\u0026rsquo;ty     AP01A AVR MCU 1   AV01A CR2032 1   AZ01A USB 1   AZ02A RTC\u0026amp;microSD 1   AZ62A Connector Cover 1    CR2032 3V Lithium coin cell battery 1    microSD card 1    Screw M2×25mm 2    リーフの組立 スケッチの書き込み  Arduino IDEで、「ファイル」→「スケッチ例」→「SD」→「CardInfo」で、マイコンボードに書き込んでください。  ソースコード  安定してデータを取得するため、HALF→QUARTERにスピードを遅くしてください。  if (!card.init(SPI_HALF_SPEED, chipSelect)) {　→if (!card.init(SPI_QUARTER_SPEED, chipSelect)) {  chipselectのデジタルピンを４→10に変更してください。  const int chipSelect = 4; →const int chipSelect = 10;　","excerpt":"概要 microSD カードの情報が、パソコンのシリアルモニタに表示されます。 必要なハードウェアの準備    Type Name Q\u0026rsquo;ty     AP01A AVR MCU 1 …","ref":"/docs/examples/extension/microsd/","title":"Micro SD"},{"body":"  \n特徴 リーフI/Fの29ピン全てをピンヘッダに接続したリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 リーフI/Fの29ピン全てをピンヘッダに接続したリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","ref":"/en/docs/leaf/extension/ax08a/","title":"AX08A 29pin header"},{"body":"  \n特徴 リーフI/Fの29ピン全てをピンヘッダに接続したリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"  \n特徴 リーフI/Fの29ピン全てをピンヘッダに接続したリーフです。\nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","ref":"/docs/leaf/extension/ax08a/","title":"AX08A 29pin header"},{"body":"\n特徴 Leafony Platformは、ACR (Anisotropic Conductive Rubber)を採用しています。ACRは、絶縁性シリコーンゴムに、金属又は導電性エラストマの導電部材が、狭ピッチで配列されており、圧縮されることで電気的接続が実現できます。\nドキュメント  仕様書  ","excerpt":"\n特徴 Leafony Platformは、ACR (Anisotropic Conductive Rubber)を採用しています。ACRは、絶縁性シリコーンゴムに、金属又は導電性エラストマの導電部材 …","ref":"/en/docs/leaf/others/az61a/","title":"AZ61A Connector"},{"body":"\n特徴 Leafony Platformは、ACR (Anisotropic Conductive Rubber)を採用しています。ACRは、絶縁性シリコーンゴムに、金属又は導電性エラストマの導電部材が、狭ピッチで配列されており、圧縮されることで電気的接続が実現できます。\nドキュメント  仕様書  ","excerpt":"\n特徴 Leafony Platformは、ACR (Anisotropic Conductive Rubber)を採用しています。ACRは、絶縁性シリコーンゴムに、金属又は導電性エラストマの導電部材 …","ref":"/docs/leaf/others/az61a/","title":"AZ61A Connector"},{"body":"  \n特徴 AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USBのVBUS(5V)から降圧電源回路により3.3Vに変換し、各リーフにVBUSと3.3Vを供給します。\n性能 USB-UART変換    Item Description     Part Number FT232RQ   USB USB 2.0 Full Speed   Data transfer rates 300 baud to 3 Mbaud    電源    Item Description     Part number XCL222B331ER-G   Output voltage 3.3V±2%   Controlling method　 PWM/PFM Automatic switching control   Maximum output current 500mA   Protection circuit Over current protection / thermal shutdown/short-circuit protection    ブロック図 \nピン配置 \nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USBのVBUS(5V)から降圧電 …","ref":"/en/docs/leaf/others/az01a/","title":"AZ01A USB"},{"body":"  \n特徴 AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USBのVBUS(5V)から降圧電源回路により3.3Vに変換し、各リーフにVBUSと3.3Vを供給します。\n性能 USB-UART変換    Item Description     Part Number FT232RQ   USB USB 2.0 Full Speed   Data transfer rates 300 baud to 3 Mbaud    電源    Item Description     Part number XCL222B331ER-G   Output voltage 3.3V±2%   Controlling method　 PWM/PFM Automatic switching control   Maximum output current 500mA   Protection circuit Over current protection / thermal shutdown/short-circuit protection    ブロック図 \nピン配置 \nドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USBのVBUS(5V)から降圧電 …","ref":"/docs/leaf/others/az01a/","title":"AZ01A USB"},{"body":"その他  AZ01A USB AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USBのVBUS(5V)から降圧電源回路により3.3Vに変換し、各リーフにVBUSと3.3Vを供給します。\nBasic Kit   AZ02A RTC\u0026amp;microSD NXPのReal-Time Clock PCF8523TKおよびMicro SDカードスロットを搭載したリーフです。RTCはアラームやタイマによりMCUに割り込み信号を出力することが可能です。micro SDカードはSPIでアクセスします。\nESP32 Wi-Fi Kit   AZ61A Connector Leafony Platformは、ACR (Anisotropic Conductive Rubber)を採用しています。ACRは、絶縁性シリコーンゴムに、金属又は導電性エラストマの導電部材が、狭ピッチで配列されており、圧縮されることで電気的接続が実現できます。\nConnector   AZ62A Connector Cover Connector Coverは、ACR (Anisotropic Conductive Rubber)に付着するゴミを防御することが出来ます。\nNut \u0026 Conn. Cover   AZ63A Nut Plate Nut Plateは、リーフをネジで固定する時に使用します。市販の六角ナットを用いると基板の電極に触れて、ショートをおこすことがあるので要注意\nNut \u0026 Conn. Cover   AZ64A Uppercase ケース（上）\nBasic Kit   AZ65A Lowercase ケース（下）\nBasic Kit  ","excerpt":"その他  AZ01A USB AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USB …","ref":"/en/docs/leaf/others/","title":"その他"},{"body":"その他  AZ01A USB AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USBのVBUS(5V)から降圧電源回路により3.3Vに変換し、各リーフにVBUSと3.3Vを供給します。\nBasic Kit   AZ02A RTC\u0026amp;microSD NXPのReal-Time Clock PCF8523TKおよびMicro SDカードスロットを搭載したリーフです。RTCはアラームやタイマによりMCUに割り込み信号を出力することが可能です。micro SDカードはSPIでアクセスします。\nESP32 Wi-Fi Kit   AZ61A Connector Leafony Platformは、ACR (Anisotropic Conductive Rubber)を採用しています。ACRは、絶縁性シリコーンゴムに、金属又は導電性エラストマの導電部材が、狭ピッチで配列されており、圧縮されることで電気的接続が実現できます。\nConnector   AZ62A Connector Cover Connector Coverは、ACR (Anisotropic Conductive Rubber)に付着するゴミを防御することが出来ます。\nNut \u0026 Conn. Cover   AZ63A Nut Plate Nut Plateは、リーフをネジで固定する時に使用します。市販の六角ナットを用いると基板の電極に触れて、ショートをおこすことがあるので要注意\nNut \u0026 Conn. Cover   AZ64A Uppercase ケース（上）\nBasic Kit   AZ65A Lowercase ケース（下）\nBasic Kit  ","excerpt":"その他  AZ01A USB AVR MCU へのスケッチ書き込みやシリアルモニタを使用する場合に接続するリーフです。USB-UART変換ICとしてFTDI製FT232RQを搭載しています。USB …","ref":"/docs/leaf/others/","title":"その他"},{"body":"概要 Seeed Studio の Grove シリーズのセンサを利用した例。超音波センサで測定した距離をLCDに表示させます。超音波センサは、通常、デジタルピンに入力するが、LCDのスイッチ1とGrove\u0026amp;5VのDin1が同じピンを使用しているため、UARTピンに接続しUARTピンをデジタルピンとして使用します。\n\n必要なハードウェアの準備    Type Name Q\u0026rsquo;ty     AI04A LCD 1   AP01A AVR MCU 1   AV01A CR2032 1   AX06A Grove\u0026amp;5V 1   AZ01A USB 1   AZ62A Connector Cover 1    Grove – Ultrasonic Distance Sensor 1    CR2032 3V Lithium coin cell battery 1    Screw M2×25mm 2    リーフの組み立て 下図のようにリーフを組み立てましょう。\nソースコード  書き込みには、LCDライブラリ、超音波制御 ライブラリ（ Ultrasonic.h ）が必要です。予め、ライブラリをインクルードしておいてください。詳しくは、[こちら]。 Arduino IDEで下記のプログラムを書きましょう。  //===================================================================== // Leafony Platform sample sketch // Platform : Grove + Ultrasonic // Processor : ATmega328P (3.3V /8MHz) // Application : Ultrasonic Ranger demo // // Leaf configuration // (1) AI04 LCD // (2) AP01 AVR MCU // (3) AX01 Grove\u0026amp;5V + Grove - Ultrasonic Ranger (UART pinに接続) // ※ Ultrasonic RangerはGrove\u0026amp;5VのUARTに接続する // (4) AZ01 USB // //\t(c) 2019 Trillion-Node Study Group //\tReleased under the MIT license //\thttps://opensource.org/licenses/MIT // // Rev.00 2019/08/01 First release //===================================================================== //Grove - Ultrasonic Rangerを使用したデモ //LCDに超音波センサーから取得した対象物からの距離を表示 //===================================================================== //use libraries //ST7032 - Arduino LiquidCrystal compatible library //https://github.com/tomozh/arduino_ST7032 //Grove_Ultrasonic_Ranger //https://github.com/Seeed-Studio/Grove_Ultrasonic_Ranger/ //=====================================================================  #include \u0026lt;Wire.h\u0026gt;#include \u0026lt;ST7032.h\u0026gt; // LCD ST7032 lcd; char strMessage[8]; #include \u0026#34;Ultrasonic.h\u0026#34;Ultrasonic ultrasonic(A1); void setup() { Serial.begin(115200); //LCD Initialize  lcd.begin(8, 2); lcd.setContrast(30); lcd.clear(); lcd.print(\u0026#34; Hello!\u0026#34;); lcd.setCursor(0, 1); delay(1000); lcd.begin(8, 2); lcd.setContrast(30); lcd.clear(); lcd.print(\u0026#34;12345678\u0026#34;); lcd.setCursor(0, 1); lcd.print(\u0026#34;87654321\u0026#34;); delay(500); lcd.clear(); lcd.blink(); int i; for (i=0 ; i\u0026lt;8 ;i++) { lcd.setCursor(i, 0); delay(100); } for (i=0 ; i\u0026lt;8 ;i++) { lcd.setCursor(i, 1); delay(100); } lcd.noBlink(); } void loop() { long RangeInCentimeters; lcd.clear(); lcd.print(\u0026#34;Distance\u0026#34;); RangeInCentimeters = ultrasonic.MeasureInCentimeters(); sprintf(strMessage,\u0026#34;%5d cm\u0026#34;,RangeInCentimeters); lcd.setCursor(0, 1); lcd.print(strMessage); delay(250); } ","excerpt":"概要 Seeed Studio の Grove シリーズのセンサを利用した例。超音波センサで測定した距離をLCDに表示させます。超音波センサは、通常、デジタルピンに入力するが、LCDのスイッチ1 …","ref":"/docs/examples/grove/distance_sensor/","title":"超音波センサで距離測定"},{"body":"\n特徴 Connector Coverは、ACR (Anisotropic Conductive Rubber)に付着するゴミを防御することが出来ます。\n外形図 \n","excerpt":"特徴 Connector Coverは、ACR (Anisotropic Conductive Rubber)に付着するゴミを防御することが出来ます。\n外形図","ref":"/en/docs/leaf/others/az62a/","title":"AZ62A Connector Cover"},{"body":"\n特徴 Connector Coverは、ACR (Anisotropic Conductive Rubber)に付着するゴミを防御することが出来ます。\n外形図 \n","excerpt":"特徴 Connector Coverは、ACR (Anisotropic Conductive Rubber)に付着するゴミを防御することが出来ます。\n外形図","ref":"/docs/leaf/others/az62a/","title":"AZ62A Connector Cover"},{"body":"  \n特徴 NXPのReal-Time Clock PCF8523TKおよびMicro SDカードスロットを搭載したリーフです。RTCはアラームやタイマによりMCUに割り込み信号を出力することが可能です。micro SDカードはSPIでアクセスします。\n性能　    Item Description     Part number PCF8523TK   Type Real-Time Clock (RTC) and calendar   Interrupt Alarm and timer   Quartz crystal unit FC-12M 32.768000kHz 7.0 +20.0-20.0   Interfaces I2C(Address: 0x68)    ブロック図 \nピン配置 \nサンプルプロジェクト  時刻をパソコンに表示 ※リンク先要変更 microSD カードの情報をパソコンに表示 ※リンク先要変更 カメラを使って撮影した画像を microSD カードに保存 ※リンク先要変更  ライブラリ ライブラリは、予めここからインストールしておきましょう。\n関数は、仕様書に記載していますので、必要に応じて、確認してください。　ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 NXPのReal-Time Clock PCF8523TKおよびMicro SDカードスロットを搭載したリーフです。RTCはアラームやタイマによりMCUに割り込み信号を出力することが可能で …","ref":"/en/docs/leaf/others/az02a/","title":"AZ02A RTC\u0026MicroSD"},{"body":"  \n特徴 NXPのReal-Time Clock PCF8523TKおよびMicro SDカードスロットを搭載したリーフです。RTCはアラームやタイマによりMCUに割り込み信号を出力することが可能です。micro SDカードはSPIでアクセスします。\n性能　    Item Description     Part number PCF8523TK   Type Real-Time Clock (RTC) and calendar   Interrupt Alarm and timer   Quartz crystal unit FC-12M 32.768000kHz 7.0 +20.0-20.0   Interfaces I2C(Address: 0x68)    ブロック図 \nピン配置 \nサンプルプロジェクト  時刻をパソコンに表示 ※リンク先要変更 microSD カードの情報をパソコンに表示 ※リンク先要変更 カメラを使って撮影した画像を microSD カードに保存 ※リンク先要変更  ライブラリ ライブラリは、予めここからインストールしておきましょう。\n関数は、仕様書に記載していますので、必要に応じて、確認してください。　ドキュメント  仕様書 回路図 部品配置図 レイアウト図(Zuken) レイアウト図(dxf)  ","excerpt":"特徴 NXPのReal-Time Clock PCF8523TKおよびMicro SDカードスロットを搭載したリーフです。RTCはアラームやタイマによりMCUに割り込み信号を出力することが可能で …","ref":"/docs/leaf/others/az02a/","title":"AZ02A RTC\u0026MicroSD"},{"body":"概要 Seeed Studio の Grove シリーズのセンサを利用した例。定点観測用カメラ。1分に一回カメラで撮影した画像をmicroSDカードに保存してみよう。 \n必要なハードウェアの準備    Type Name Q\u0026rsquo;ty     AP01A AVR MCU 1   AV01A CR2032 1   AX06A Grove\u0026amp;5V 1   AZ01A USB 1   AZ02A RTC\u0026amp;MicroSD 1   AZ62A Connector Cover 1    CR2032 3V Lithium coin cell battery 1    Grove-Serial Camera Kit 1    microSD card  1    Screw M2×25mm 2    リーフの組み立て ソースコード  書き込みには、4-Sensors、AVR MCUライブラリ（タイマ割り込み）が必要です。予め、ライブラリをインクルードしておいてください。詳しくは、[こちら]。 Arduino IDEで下記のプログラムを書きましょう。  //===================================================================== // Leafony Platform sample sketch // Platform : Grove + Camera // Processor : ATmega328P (3.3V /8MHz) // Application : Camera // // Leaf configuration // (1) AP01 AVR MCU // (2) AX01 Grove\u0026amp;5V + Grove Serial Camera Kit // (3) AZ01 USB // (4) AZ02 RTC＆MicroSD // //\t(c) 2019 Trillion-Node Study Group //\tReleased under the MIT license //\thttps://opensource.org/licenses/MIT // // Rev.00 2019/08/01 First release //===================================================================== //use libraries //=====================================================================  //===================================================================== // difinition //===================================================================== #include \u0026lt;MsTimer2.h\u0026gt;#include \u0026lt;SPI.h\u0026gt;#include \u0026lt;SD.h\u0026gt;#include \u0026lt;SoftwareSerial.h\u0026gt;#include \u0026lt;avr/wdt.h\u0026gt;#include \u0026lt;avr/sleep.h\u0026gt;#include \u0026lt;avr/power.h\u0026gt;//=====================================================================  #define DEBUG  //===================================================================== // SPI CLOCK // SDカードのSPI I/Fのクロック速度4Mでは動作しないので4M以下に設定すること //===================================================================== #define SD_CLCK 2500000  //===================================================================== // 撮影間隔（秒） // //===================================================================== #define SNAP_WAIT 60  //===================================================================== // IOピンの名前定義 // 接続するリーフに合わせて定義する //===================================================================== // -------------------------------------------- // PD port // digital 0: PD0 = PCRX (HW UART) // digital 1: PD1 = PCTX (HW UART) // digital 2: PD2 = INT0# // digital 3: PD3 = INT1# // digital 4: PD4 = RSV // digital 5: PD5 = RSV // digital 6: PD6 = RSV // digital 7: PD7 = RSV // -------------------------------------------- #define PCTX 0 #define PCRX 1 #define INT0 2 #define INT1 3 #define RSV_D4 4 #define RSV_D5 5 #define SD_EN 6 #define RSV_D7 7  // -------------------------------------------- // PB port // digital 8: PB0 = UART2_RX (software UART) /* not use */ // digital 9: PB1 = UART2_TX (software UART) /* not use */ // digital 10:PB2 = CS# // digital 11:PB3 = MOSI // digital 12:PB4 = MISO // digital 13:PB5 = SCK (AVR LED) // PB6 = XTAL1 // PB7 = XTAL2 //--------------------------------------------- #define UART2_RX 8 #define UART2_TX 9 #define SD_CS 10 #define MOSI 11 #define MISO 12 #define LED_PIN 13  // -------------------------------------------- // PC port // digital 14/ Analog0: PC0 = RSV // digital 15/ Analog1: PC1 = CAMERA TX (software UART) // digital 16/ Analog2: PC2 = CAMERA RX (software UART) // digital 17/ Analog3: PC3 = RSV // digital 18/ SDA : PC4 = SDA (I2C) // digital 19/ SCL : PC5 = SCL (I2C) // RESET : PC6 = RESET# //----------------------------------------------- #define RSV_D14 14 #define UART3_TX 15 #define UART3_RX 16 #define RSV_D17 17 #define SDA 18 #define SCL 19 //=====================================================================  //===================================================================== // camera //===================================================================== //Color Setting #define COLOR_2BIT_GRAY 0x01 #define COLOR_4BIT_GRAY 0x02 #define COLOR_8BIT_GRAY 0x03 #define COLOR_2BIT_COLOR 0x05 #define COLOR_4BIT_COLOR 0x06 #define COLOR_JPEG 0x07 //Preview Resolution #define PRE_RES_80_60 0x01 #define PRE_RES_160_120 0x03 //JPEG Resolution #define JPEG_RES_80_60 0x01 #define JPEG_RES_QQVGA 0x03 #define JPEG_RES_QVGA 0x05 #define JPEG_RES_VGA 0x07 //Get Setting #define GET_SNAPCHOT 0x01 #define GET_PRE_PIC 0x02 #define GET_PRE_JPEG 0x03 //Snapshot Setting #define COMPRESSED 0x00 #define UNCOMPRESSED 0x01 //data length #define PIC_PKT_LEN 128  //===================================================================== // SD //===================================================================== File myFile; SoftwareSerial CameraSerial(UART3_RX, UART3_TX); //===================================================================== // 変数定義 //===================================================================== unsigned long picTotalLen = 0; // picture length int picNameNum = 0; char fname[16]; //--------------------------- // interval Timer2 interrupt //--------------------------- volatile bool bInterval = false; volatile int intcnt = 0; //===================================================================== // setup //===================================================================== //----------------------------------------------- // port //----------------------------------------------- //===================================================================== // IOピンの入出力設定 // 接続するリーフに合わせて設定する //===================================================================== void setupPort(){ //---------------------  // PD port  //---------------------  // PD0 : digital 0 = RX  // PD1 : digital 1 = TX  pinMode(INT0, INPUT); // PD2 : digital 2 = INT0#  pinMode(INT1, INPUT); // PD3 : digital 3 = INT1#  pinMode(RSV_D4, OUTPUT); // PD4 : digital 4 = LED  digitalWrite(RSV_D4, LOW); pinMode(RSV_D5, OUTPUT); // PD5 : digital 5 = not used  digitalWrite(RSV_D5, LOW); pinMode(SD_EN, OUTPUT); // PD6 : digital 6 = BLE reset active-low  digitalWrite(SD_EN, HIGH); pinMode(RSV_D7, OUTPUT); // PD7 : digital 7 = BLE sleep  digitalWrite(RSV_D7, HIGH); //---------------------  // PB port  //---------------------  pinMode(UART2_RX, OUTPUT); // PB0 : digital 8 = software UART2  digitalWrite(UART2_RX, LOW); pinMode(UART2_TX, OUTPUT); // PB1 : digital 9 = software UART2  digitalWrite(UART2_TX, LOW); //---------------------  // PC port  //---------------------  pinMode(RSV_D14, OUTPUT); // PC0 : digital 14 = not used  digitalWrite(RSV_D14, LOW); // PC1 : digital 15 = Camera RX  // PC2 : digital 16 = Camera TX  pinMode(RSV_D17, OUTPUT); // PC3 : digital 17 = not used  digitalWrite(RSV_D17, LOW); // PC4 : digital 18 = I2C SDA  // PC5 : digital 19 = I2C SCL } //===================================================================== // 割り込み処理 // //===================================================================== //----------------------------------------------- // timer2 interrupt (interval=1000ms, int=overflow) // メインループのタイマー割り込み設定 //----------------------------------------------- void setupTC2Int(){ MsTimer2::set(1000, intTimer2);} //---------------------------------------------- // Timer2 INT // タイマー割り込み関数 //---------------------------------------------- void intTimer2(){ intcnt++; if (intcnt \u0026gt; SNAP_WAIT) { intcnt = 0; bInterval = true; } } //==================================================================== // camera //==================================================================== //---------------------------------------------- // clearReadBuf // カメラデータの受信バッファクリア //---------------------------------------------- void clearReadBuf() { while (CameraSerial.available()) { CameraSerial.read(); } } //---------------------------------------------- // sendCmd // カメラへのコマンド送信 //---------------------------------------------- void sendCmd(char cmd[], int cmd_len) { for (char i = 0; i \u0026lt; cmd_len; i++) CameraSerial.write(cmd[i]); } //---------------------------------------------- // readRespons // カメラからのデータ受信 //---------------------------------------------- int readRespons(char *dest, int len, unsigned int timeout) { int read_len = 0; unsigned long t = millis(); while (read_len \u0026lt; len) { while (CameraSerial.available()\u0026lt;1) { if ((millis() - t) \u0026gt; timeout) { //Serial.println(\u0026#34;timeout\u0026#34;);  return read_len; } } *(dest+read_len) = CameraSerial.read(); #ifdef DEBUG  //Serial.write(*(dest+read_len),); //debug #endif  read_len++; } return read_len; } //---------------------------------------------- // initialize // カメラとの通信確立 //---------------------------------------------- void initialize() { char cmd[] = {0xaa,0x0d,0x00,0x00,0x00,0x00} ; unsigned char resp[6]; Serial.print(\u0026#34;initializing camera...\u0026#34;); while (1) { sendCmd(cmd,6); if (readRespons((char *)resp, 6,1000) != 6) { Serial.print(\u0026#34;.\u0026#34;); continue; } if (resp[0] == 0xaa \u0026amp;\u0026amp; resp[1] == 0x0e \u0026amp;\u0026amp; resp[2] == 0x0d \u0026amp;\u0026amp; resp[4] == 0 \u0026amp;\u0026amp; resp[5] == 0) { if (readRespons((char *)resp, 6, 500) != 6) continue; if (resp[0] == 0xaa \u0026amp;\u0026amp; resp[1] == 0x0d \u0026amp;\u0026amp; resp[2] == 0 \u0026amp;\u0026amp; resp[3] == 0 \u0026amp;\u0026amp; resp[4] == 0 \u0026amp;\u0026amp; resp[5] == 0) break; } } cmd[1] = 0x0e; cmd[2] = 0x0d; sendCmd(cmd, 6); Serial.println(\u0026#34; done.\\r\\n\u0026#34;); } //---------------------------------------------- // preCapture // カメラの初期設定 //---------------------------------------------- void preCapture() { char cmd[] = { 0xaa, 0x01, 0x00, COLOR_JPEG, PRE_RES_80_60, JPEG_RES_VGA }; unsigned char resp[6]; while (1) { clearReadBuf(); sendCmd(cmd, 6); if (readRespons((char *)resp, 6, 100) != 6) continue; if (resp[0] == 0xaa \u0026amp;\u0026amp; resp[1] == 0x0e \u0026amp;\u0026amp; resp[2] == 0x01 \u0026amp;\u0026amp; resp[4] == 0 \u0026amp;\u0026amp; resp[5] == 0) break; } } //---------------------------------------------- // Capture // カメラの撮影実施 //---------------------------------------------- void Capture() { char cmd[] = { 0xaa, 0x06 , 0x08, PIC_PKT_LEN \u0026amp; 0xff, (PIC_PKT_LEN\u0026gt;\u0026gt;8) \u0026amp; 0xff ,0}; unsigned char resp[6]; while (1) { clearReadBuf(); sendCmd(cmd, 6); if (readRespons((char *)resp, 6, 100) != 6) continue; if (resp[0] == 0xaa \u0026amp;\u0026amp; resp[1] == 0x0e \u0026amp;\u0026amp; resp[2] == 0x06 \u0026amp;\u0026amp; resp[4] == 0 \u0026amp;\u0026amp; resp[5] == 0) break; } cmd[1] = 0x05; cmd[2] = 0; cmd[3] = 0; cmd[4] = 0; cmd[5] = 0; while (1) { clearReadBuf(); sendCmd(cmd, 6); if (readRespons((char *)resp, 6, 100) != 6) continue; if (resp[0] == 0xaa \u0026amp;\u0026amp; resp[1] == 0x0e \u0026amp;\u0026amp; resp[2] == 0x05 \u0026amp;\u0026amp; resp[4] == 0 \u0026amp;\u0026amp; resp[5] == 0) break; } cmd[1] = 0x04; cmd[2] = GET_SNAPCHOT; while (1) { clearReadBuf(); sendCmd(cmd, 6); if (readRespons((char *)resp, 6, 100) != 6) continue; if (resp[0] == 0xaa \u0026amp;\u0026amp; resp[1] == 0x0e \u0026amp;\u0026amp; resp[2] == 0x04 \u0026amp;\u0026amp; resp[4] == 0 \u0026amp;\u0026amp; resp[5] == 0) { if (readRespons((char *)resp, 6, 1000) != 6) { continue; } if (resp[0] == 0xaa \u0026amp;\u0026amp; resp[1] == 0x0a \u0026amp;\u0026amp; resp[2] == 0x01) { picTotalLen = (resp[3]) | (resp[4] \u0026lt;\u0026lt; 8) | (resp[5] \u0026lt;\u0026lt; 16); //Serial.print(\u0026#34;picTotalLen:\u0026#34;);  //Serial.println(picTotalLen);  break; } } } } //---------------------------------------------- // GetData // カメラからデータを取得しSDに書き込む //---------------------------------------------- void GetData() { char cmd[] = { 0xaa, 0x0e , 0x00, 0x00, 0x00, 0x00 }; unsigned char pkt[PIC_PKT_LEN]; unsigned int pktCnt = (picTotalLen) / (PIC_PKT_LEN - 6); if ((picTotalLen % (PIC_PKT_LEN-6)) != 0) pktCnt += 1; set_filename(); if (SD.exists(fname)) { SD.remove(fname); } myFile = SD.open(fname, FILE_WRITE); if(!myFile){ Serial.println(\u0026#34;myFile open fail...\u0026#34;); } else{ Serial.print(\u0026#34;Saving \u0026#34;);Serial.print(fname); Serial.print(\u0026#34;..... \u0026#34;); for (unsigned int i = 0; i \u0026lt; pktCnt; i++) { cmd[4] = i \u0026amp; 0xff; cmd[5] = (i \u0026gt;\u0026gt; 8) \u0026amp; 0xff; int retry_cnt = 0; retry: delay(10); clearReadBuf(); sendCmd(cmd, 6); uint16_t cnt = readRespons((char *)pkt, PIC_PKT_LEN, 200); unsigned char sum = 0; for (int y = 0; y \u0026lt; cnt - 2; y++) { sum += pkt[y]; } if (sum != pkt[cnt-2]) { if (++retry_cnt \u0026lt; 100) goto retry; else break; } myFile.write((const uint8_t *)\u0026amp;pkt[4], cnt-6); //if (cnt != PIC_PKT_LEN) break;  } cmd[4] = 0xf0; cmd[5] = 0xf0; sendCmd(cmd, 6); } myFile.close(); Serial.println(\u0026#34;end!!\u0026#34;); } //---------------------------------------------- // set_filename // SDに書き込みファイ名を作成IMGxxxx.JPG //---------------------------------------------- void set_filename(){ sprintf(fname, \u0026#34;IMG%04d.JPG\u0026#34;, picNameNum); picNameNum ++; if( picNameNum \u0026gt; 100 ){ picNameNum = 0; // Overwrite  } } //==================================================================== // setup //==================================================================== void setup() { //WDT disable  wdt_disable(); //内部の各モジュールの電源OFF  //power_all_disable();  //power_timer0_enable();  //power_timer2_enable();  //power_spi_enable();  //power_usart0_enable();  delay(10); Serial.begin(115200); CameraSerial.begin(9600); #ifdef DEBUG  Serial.println(\u0026#34;=========================================\u0026#34;); Serial.println(\u0026#34;setup start\u0026#34;); #endif  setupPort(); delay(10); setupTC2Int(); if (!SD.begin(SD_CLCK,SD_CS)) { Serial.print(\u0026#34;sd init failed\u0026#34;); return; } Serial.print(\u0026#34;sd init finish\\r\\n\u0026#34;); initialize(); delay(1); preCapture(); delay(1000); Capture(); GetData(); MsTimer2::start(); } //==================================================================== // loop //==================================================================== void loop() { if (bInterval == true) { bInterval = false; Capture(); GetData(); } } ","excerpt":"概要 Seeed Studio の Grove シリーズのセンサを利用した例。定点観測用カメラ。1分に一回カメラで撮影した画像をmicroSDカードに保存してみよう。 \n必要なハー …","ref":"/docs/examples/grove/camera/","title":"カメラの撮影"},{"body":"\n特徴 Nut Plateは、リーフをネジで固定する時に使用します。市販の六角ナットを用いると基板の電極に触れて、ショートをおこすことがあるので要注意\n外形図 \n","excerpt":"特徴 Nut Plateは、リーフをネジで固定する時に使用します。市販の六角ナットを用いると基板の電極に触れて、ショートをおこすことがあるので要注意\n外形図","ref":"/en/docs/leaf/others/az63a/","title":"AZ63A Nut Plate"},{"body":"\n特徴 Nut Plateは、リーフをネジで固定する時に使用します。市販の六角ナットを用いると基板の電極に触れて、ショートをおこすことがあるので要注意\n外形図 \n","excerpt":"特徴 Nut Plateは、リーフをネジで固定する時に使用します。市販の六角ナットを用いると基板の電極に触れて、ショートをおこすことがあるので要注意\n外形図","ref":"/docs/leaf/others/az63a/","title":"AZ63A Nut Plate"},{"body":"\n外形図 \n","excerpt":"外形図","ref":"/en/docs/leaf/others/az64a/","title":"AZ66A Basic Kit Case"},{"body":"\n外形図 \n","excerpt":"外形図","ref":"/docs/leaf/others/az64a/","title":"AZ66A Basic Kit Case"},{"body":"\n特徴 ケース（下）\n 外形図\n  ","excerpt":"\n特徴 ケース（下）\n 外形図\n  ","ref":"/en/docs/leaf/others/az65a/","title":"AZ64A Lowercase"},{"body":"\n特徴 ケース（下）\n 外形図\n  ","excerpt":"\n特徴 ケース（下）\n 外形図\n  ","ref":"/docs/leaf/others/az65a/","title":"AZ64A Lowercase"},{"body":"","excerpt":"","ref":"/en/index.json","title":""},{"body":"","excerpt":"","ref":"/index.json","title":""},{"body":"  #td-cover-block-0 { background-image: url(/en/featured-background_hud28dbc58c7878fd3d577b2e424cb175f_644071_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/en/featured-background_hud28dbc58c7878fd3d577b2e424cb175f_644071_1920x1080_fill_q75_catmullrom_top.jpg); } }  Leafony Learn More   Online Shop   An Open Source Hardware for the IoT World!\n\n        Enjoy IoT with the Leafony       Easy Circuit Development Leafony makes the circuit design easy. Stack each module and make new circuits.\n   Open Source Hardware Leafony is an OSS project. All codes, circuits and designes are available on GitHub. Free for both personal and commercial use.\nRead more …\n   News Check the latest news\nRead more …\n    ","excerpt":"#td-cover-block-0 { background-image: …","ref":"/en/","title":"Leafony"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hud28dbc58c7878fd3d577b2e424cb175f_644071_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hud28dbc58c7878fd3d577b2e424cb175f_644071_1920x1080_fill_q75_catmullrom_top.jpg); } }  Leafony Learn More   Online Shop   An Open Source Hardware for the IoT World!\n\n        LeafonyでIoTの世界を体験しましょう。       積み重ねるだけの回路設計 Leafony busを使えばリーフ積み重ねるだけで簡単にシステムの設計が可能です。 それぞれのリーフは2cm角と小型で、低消費電力性に優れた回路を使用おり、IoT/CPSシステムやアプリ、サービスの研究開発効率を断然アップさせます。\n   オープンソースハードウェア Leafonyはオープンソースのハードウェアです。 個人・商用問わず無償で使える仕様・回路図・パターン図などのハードウェア情報がgithub上に公開されています。 ソフトウェアもすでに数万本あるフリーのArduinoソフトウェアが使えます。その他のソフトウェアでも使えます。\n続きを読む …\n   最新情報 Leafonyの最新情報はこちらから確認できます。\n続きを読む …\n    ","excerpt":"#td-cover-block-0 { background-image: …","ref":"/","title":"Leafony"},{"body":"","excerpt":"","ref":"/en/search/","title":"Search Results"},{"body":" Overview Products Getting Started Environment Settings Examples Leaf Technical Documentation PCB Licenses  ","excerpt":" Overview Products Getting Started Environment Settings Examples Leaf Technical Documentation PCB …","ref":"/en/docs/","title":"Leafony Documentation"},{"body":" はじめに 製品一覧 クイックスタート 開発環境設定 サンプルデザイン リーフ技術資料 自作リーフ開発 ライセンス・規約  ","excerpt":" はじめに 製品一覧 クイックスタート 開発環境設定 サンプルデザイン リーフ技術資料 自作リーフ開発 ライセンス・規約  ","ref":"/docs/","title":"Leafonyドキュメントページ"},{"body":"","excerpt":"","ref":"/search/","title":"検索結果"}]