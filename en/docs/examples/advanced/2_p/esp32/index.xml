<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leafony – ESP32W-iFi Kit</title>
    <link>https://docs.leafony.com/en/docs/examples/advanced/2_p/esp32/</link>
    <description>Recent content in ESP32W-iFi Kit on Leafony</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://docs.leafony.com/en/docs/examples/advanced/2_p/esp32/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Google Sheets with ESP32</title>
      <link>https://docs.leafony.com/en/docs/examples/advanced/2_p/esp32/esp32_googlesheets_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/en/docs/examples/advanced/2_p/esp32/esp32_googlesheets_1/</guid>
      <description>
        
        
        &lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Using only an ESP32 MCU leaf and 4-Sensors leaf, you can build an IoT environmental sensor and visualize the sensor data using Google Spreadsheet.&lt;/p&gt;
&lt;img src=&#34;ESP_googlesheet_a.png&#34; width=800&gt;
&lt;h2 id=&#34;preparing-google-sheets&#34;&gt;Preparing Google Sheets&lt;/h2&gt;
&lt;p&gt;Introducing an IoT service that displays sensor data sent by the ESP32 MCU Leaf in &lt;code&gt;Google Sheets&lt;/code&gt;.
You can check the data anywhere, if you have a PC or smartphone with browser access.&lt;br&gt;
First, let&amp;rsquo;s configure the settings for displaying data in &lt;code&gt;Google Sheets&lt;/code&gt; as follows.
&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sign in to your Google account and create a new spreadsheet. If you do not have an account, please create one.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;create_new_sheet_a.png&#34; width=1200&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;You can change the title of Google Sheets (default: &lt;code&gt;Untitled Spreadsheet&lt;/code&gt;) as you like.  &lt;br&gt;
You can also change the sheet number (default: &lt;code&gt;sheet 1&lt;/code&gt;) as you like also.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The symbol sequence in the red frame in the Google Sheets URL section below will be used later to specify the Google Sheet, so please copy it to an appropriate location.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Here, &lt;code&gt;1o0cogc3aomAj58CRdMZARNJtoEmf8dB9ebY02jKV9tA&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;open_script_editor_a.PNG&#34;&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;Open the Script Editor from Tools and copy and paste the source code from Github.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Leafony/Sample-Sketches/tree/master/ESP32_GoogleSheets/google_scripts_code.js&#34; target=&#34;_brank&#34;&gt;Leafony/Sample-Sketches/ESP32_GoogleSheets/google_scripts_code.js - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Enter the information of the &lt;code&gt;Google Sheets&lt;/code&gt; that you just created in the following variables.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;google_sheets_id&lt;/code&gt;：The symbol string of the URL of &lt;code&gt;Google Sheets&lt;/code&gt; that you just copied.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sheet_name&lt;/code&gt;：Name of the sheet to write to (default: &lt;code&gt;Sheet 1&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;edit_script_a.png&#34;&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;This section describes the procedure for publishing &lt;code&gt;Google Sheets&lt;/code&gt;.&lt;br&gt;
Click &lt;code&gt;Publish&lt;/code&gt;-&amp;gt;&lt;code&gt;Deploy as a web application&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;deploy_app_1a.png&#34;&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Then, change the access permissions to &lt;code&gt;Anyone, even anonymous&lt;/code&gt;, so that anyone can view it.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;deploy_app_2a.png&#34; width=500&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Click the &lt;code&gt;Deploy&lt;/code&gt; button to confirm the access permission from &lt;code&gt;Script App&lt;/code&gt; to &lt;code&gt;Google Sheets&lt;/code&gt;.  Click &lt;code&gt;Confirm Permissions&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;first_deploy_authorization_a.png&#34; width=500&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;Click on &lt;code&gt;Details&lt;/code&gt; at the bottom left.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;details.png&#34; width=500&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;Next you will get a warning, click on &lt;code&gt;Go to (insecure page)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;confirmation_a.png&#34; width=550&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;Finally, &lt;code&gt;allow&lt;/code&gt; the script to request access to the spreadsheet.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;access_request_a.png&#34; width=400&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol start=&#34;12&#34;&gt;
&lt;li&gt;The following pop-up window will appear, and a URL specific to the web app you have created will be issued, so copy the URL and click &lt;code&gt;OK&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;find_url.png&#34; width=500&gt;  
&lt;p&gt;&lt;br /&gt;
（App-specific URLs ）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://script.google.com/macros/s/AKfycbw-8Wx8Zf0alULuD3aLQdwnyVM8hSHAiDsrj49wA17ZqE7y-tP8/exec
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;checking-the-operation-of-google-sheets&#34;&gt;Checking the operation of Google Sheets&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;This time, we will try to write Datetime, UniqueID=Leafony_AP02-1, Temperature=100, Humidity=100, Illumination=100 in &lt;code&gt;Google Sheets&lt;/code&gt;.&lt;br&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you add ?UniqueID=Leafony_AP02-1&amp;amp;temperature=100&amp;amp;humidity=100&amp;amp;illumination=100 to the app-specific URL, you will get the following&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;https://script.google.com/macros/s/AKfycbw-8Wx8Zf0alULuD3aLQdwnyVM8hSHAiDsrj49wA17ZqE7y-tP8/exec?UniqueID=Leafony_AP02-1&amp;amp;temperature=100&amp;amp;humidity=100&amp;amp;illumination=100
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Paste the above URL into your browser and access it, and the data will be written to the configured &lt;code&gt;Google Sheets&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The column names listed in the first line of &lt;code&gt;Google Sheets&lt;/code&gt; are not automatically displayed, so please provide them in advance.
&lt;br /&gt;&lt;/p&gt;
&lt;img src=&#34;check_script_app.png&#34;&gt;  
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&#34;if-there-is-a-mistake-in-the-script&#34;&gt;If there is a mistake in the script&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Modify the script.&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Publish&lt;/code&gt;-&amp;gt;`Deploy as a web application``.&lt;/li&gt;
&lt;li&gt;If you deploy with the exact same settings as the first time, the modified code may not be reflected properly, so when you deploy again, set &lt;code&gt;Project version&lt;/code&gt; to &lt;code&gt;New&lt;/code&gt; and click &lt;code&gt;Update&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The URL of the web app running at that time can be found below.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;deploy_again_a.png&#34; width=500&gt;  
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&#34;a-hrefhttpsdocsleafonycomdocsexamplesadvanced2_pesp32esp32_googlesheets_1esp32_googlesheets_2次へ進むa&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/docs/examples/advanced/2_p/esp32/esp32_googlesheets_1/esp32_googlesheets_2/&#34;&gt;&lt;strong&gt;次へ進む&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Wi-Fi touch sensor</title>
      <link>https://docs.leafony.com/en/docs/examples/advanced/2_p/esp32/wifi_touchsensor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/en/docs/examples/advanced/2_p/esp32/wifi_touchsensor/</guid>
      <description>
        
        
        &lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;When shipped from the factory, Arduino sketches are written on the ESP32 MCU leaf, so the touch sensor values can be sent via Wi-Fi from a smartphone or PC, and the display will appear.&lt;/p&gt;
&lt;h2 id=&#34;leaf-to-use&#34;&gt;Leaf to use&lt;/h2&gt;
&lt;p&gt;Use the following leaves.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Q&amp;rsquo;ty&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/processor/ap02&#34;&gt;AP02&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/processor/ap02&#34;&gt;ESP32 MCU&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/power/av04&#34;&gt;AV04&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/power/av04&#34;&gt;2V~4.5V&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/extension/ax07&#34;&gt;AX07&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/extension/ax07&#34;&gt;Back to back&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/extension/ax08&#34;&gt;AX08&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/extension/ax08&#34;&gt;29pin header&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/others/az62&#34;&gt;AZ62&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/others/az62&#34;&gt;Connector Cover &lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/others/az63&#34;&gt;AZ63&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/others/az63&#34;&gt;Nut Plate&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AAA battery holder&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AAA battery&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;M2*15mm screw&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;φ10x2mm magnet&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;assembly&#34;&gt;Assembly&lt;/h2&gt;
&lt;p&gt;Assemble the leaves as shown in the figure below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ESPWiFi_assemble.png&#34; alt=&#34;assemble1&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pin-assignment&#34;&gt;Pin assignment&lt;/h2&gt;
&lt;p&gt;Refer to the figure below for the pin assignment of each leaf.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.leafony.com/docs/getting-started/pinassign/esp32_wi-fi_kit_pinassign.jpg&#34;&gt;&lt;img src=&#34;https://docs.leafony.com/docs/getting-started/pinassign/esp32_wi-fi_kit_pinassign.jpg&#34; width=&#34;600&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;p&gt;The sketch to be used can be found in the GitHub repository below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Leafony/Sample-Sketches/tree/master/ESP32_AP_Touch&#34; target=&#34;_brank&#34;&gt;Leafony/Sample-Sketches/ESP32_AP_Touch - GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;execution-method&#34;&gt;Execution method&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Insert the batteries into the AAA battery box and turn on the ESP32 leaf power switch.&lt;/li&gt;
&lt;li&gt;Connect to the following Wi-Fi with your PC or smartphone
&lt;ul&gt;
&lt;li&gt;SSID: Leafony_ESP32-AP&lt;/li&gt;
&lt;li&gt;Password: password&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Launch a web browser on your PC or smartphone and go to &lt;a href=&#34;http://192.168.4.1&#34;&gt;http://192.168.4.1&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Pins 7, 9, 22, 24, 26, and 28 of the 29-pin header are assigned to the touch sensor.&lt;br&gt;
When the pin is touched, the capacitance decreases and the value decreases. When the value falls below the threshold of 20, &amp;ldquo;Touch detected&amp;rdquo; is displayed.&lt;br&gt;
(Pin 24 is hidden in the sample sketch because it interferes with the RTC &amp;amp; microSD. The detection threshold can be changed in the sketch. In the following picture, I am touching pin 26 with my fingertip.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;Wi-FiTouch-Sensor-Test_1-300x222.png&#34; alt=&#34;Wi-FiTouch-Sensor-Test_1-300x222.png&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;When you touch pin 26, the browser display will change as shown below.　&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;Wi-FiTouch-Sensor-Test_2.png&#34; alt=&#34;Wi-FiTouch-Sensor-Test_2.png&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: ESP32 BLE Beacon</title>
      <link>https://docs.leafony.com/en/docs/examples/advanced/2_p/esp32/esp32_ble_beacon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/en/docs/examples/advanced/2_p/esp32/esp32_ble_beacon/</guid>
      <description>
        
        
        &lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is an example of a BLE Beacon type environmental sensor application using ESP32.
By adding sensor data to the Attribute of the GATT Server, it can act as a beacon that broadcasts the data.
When a connection request is received from the outside, the GATT Server will communicate with the server client and exchange log data with the Characteristic.&lt;/p&gt;
&lt;p&gt;The loss of data due to packet reception failure that occurs in the Beacon type is prevented by leaving the sensor data in the non-volatile memory in the ESP32.
Users can connect and read log data at any time, and the system will immediately switch to Beacon mode after data transfer is completed, greatly reducing power consumption.&lt;/p&gt;
&lt;h2 id=&#34;sample-apps-source-code&#34;&gt;Sample app&amp;rsquo;s source code&lt;/h2&gt;
&lt;p&gt;The source code for the sketches and tools used can be viewed in the repository below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Leafony/Sample-Sketches/tree/master/ESP32_BLE_Beacon&#34; target=&#34;_blank&#34;&gt;Sample-Sketches/ESP32_BLE_Beacon at master · Leafony/Sample-Sketches&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-to-prepare&#34;&gt;What to prepare&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Leafony ESP32 Wi-Fi Kit&lt;/li&gt;
&lt;li&gt;Leafony Basic Kit&lt;/li&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;li&gt;Android Smartphone&lt;/li&gt;
&lt;li&gt;USB micro cable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;leaf-to-use&#34;&gt;Leaf to use&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Q&amp;rsquo;ty&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/processor/ap02&#34;&gt;AP02&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/processor/ap02&#34;&gt;ESP32 MCU&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/io/ai01&#34;&gt;AI01&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/en/docs/leaf/io/ai01&#34;&gt;4-Sensors&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;M2 screw&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;action-method&#34;&gt;Action Method&lt;/h2&gt;
&lt;p&gt;This section describes the steps to run the sample project. If you want to understand how each source code works, please refer to &lt;a href=&#34;#Mechanism&#34;&gt;Mechanism&lt;/a&gt; described below.&lt;/p&gt;
&lt;h3 id=&#34;1-writing-a-sketch-to-an-esp32-leaf&#34;&gt;1. Writing a sketch to an ESP32 leaf&lt;/h3&gt;
&lt;p&gt;Connect the ESP32 leaf to the PC via USB and write the ino file using the Arduino IDE.&lt;/p&gt;
&lt;p&gt;The sample code uses the &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/system/log.html&#34;&gt;ESP32 Logging Library&lt;/a&gt;. The sample code uses the &lt;a href=&#34;&#34;&gt;ESP32 Logging Library&lt;/a&gt;.&lt;br&gt;
By setting the &lt;code&gt;Tools&lt;/code&gt; → &lt;code&gt;Code Debug Level&lt;/code&gt; in the Arduino IDE to the desired level, debug messages will be displayed on the serial monitor.&lt;/p&gt;
&lt;h3 id=&#34;2-run-the-beacon-scanner-app&#34;&gt;2. Run the beacon scanner app.&lt;/h3&gt;
&lt;p&gt;For scanning Advertising packets, use an app that runs on Node.js.&lt;br&gt;
Any environment can be used as long as it runs Node.js, but this time we will assume that it will be a Beacon receiver set up at a fixed point outdoors, and we will explain how to run the application using a Raspberry Pi 4.
In this article, we will explain how to run the application using a Raspberry Pi 4.&lt;/p&gt;
&lt;p&gt;Install the necessary packages and run the application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; ./tools/node-scanner
npm install
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-run-the-logging-application&#34;&gt;3. Run the logging application.&lt;/h3&gt;
&lt;p&gt;A web application is used to retrieve log data and display graphs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://taltalp.github.io/leafony-esp32-thermometer-beacon/sample_app/connect_webbluetooth/&#34; target=&#34;_brank&#34;&gt;ESP32 Sensors Logger&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;
&lt;h3 id=&#34;how-ble-beacon-works&#34;&gt;How BLE Beacon works&lt;/h3&gt;
&lt;h3 id=&#34;gatt&#34;&gt;GATT&lt;/h3&gt;
&lt;h3 id=&#34;advertising&#34;&gt;Advertising&lt;/h3&gt;
&lt;h3 id=&#34;characteristic&#34;&gt;Characteristic&lt;/h3&gt;

      </description>
    </item>
    
  </channel>
</rss>
