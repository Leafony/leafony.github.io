<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leafony – Environment Settings</title>
    <link>https://docs.leafony.com/en/docs/environment/</link>
    <description>Recent content in Environment Settings on Leafony</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://docs.leafony.com/en/docs/environment/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Basic Kit Development Environment Settings Manual</title>
      <link>https://docs.leafony.com/en/docs/environment/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/en/docs/environment/basic/</guid>
      <description>
        
        
        &lt;p&gt;Leafony only works when you write a program. &lt;br&gt; 
For example, in &lt;a href=&#34;https://docs.leafony.com/en/docs/getting-started/basic/&#34;&gt;Quick Start&lt;/a&gt;, a program has been written to read the four sensors and send data via Bluetooth LE.&lt;/p&gt;
&lt;p&gt;If you are starting to use Leafony, you can make it work the way you want it to by writing a program that describes what you want it to do.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Next&lt;/h4&gt;
Install the software needed to write a program in Leafony
&lt;/div&gt;

&lt;h2 id=&#34;what-to-prepare&#34;&gt;What to prepare&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Basic Kit&lt;/li&gt;
&lt;li&gt;PC (Windows, Mac OS X or Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installing-arduino-ide&#34;&gt;Installing Arduino IDE&lt;/h2&gt;
&lt;p&gt;The Arduino IDE is a development environment for the Arduino, an open source hardware platform for electronics. &lt;br&gt; &lt;br&gt;.
The development environment allows you to write programs, write programs to the Arduino board, and display the data coming from the board. &lt;br&gt;.
Leafony can be developed with the Arduino IDE.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s download the Arduino IDE right away.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From the &lt;a href=&#34;https://www.arduino.cc/&#34; target=&#34;_blank&#34;&gt;Arduino website&lt;/a&gt;, go to &amp;ldquo;SOFTWARE&amp;rdquo; and then &amp;ldquo;DOWNLOADS&amp;rdquo; to get to the Arduino IDE download page.&lt;/li&gt;
&lt;li&gt;Download the installer for your OS at the place where it says &amp;ldquo;Download the Arduino IDE&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Run the downloaded installer and follow the on-screen instructions to install the Arduino IDE.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Next&lt;/h4&gt;
Let’s write a program in Leafony and make it work!
&lt;/div&gt;

&lt;h2 id=&#34;connecting-to-pc&#34;&gt;Connecting to PC&lt;/h2&gt;
&lt;p&gt;Connect to your PC with a USB cable.&lt;br&gt;&lt;/p&gt;
&lt;img src=&#34;./basic_assemble.png&#34; width=&#34;530&#34;&gt;
&lt;br&gt;&lt;br&gt;
&lt;h2 id=&#34;configuration-of-the-microcontroller-board&#34;&gt;Configuration of the microcontroller board&lt;/h2&gt;
&lt;p&gt;To develop Leafony in the Arduino IDE, let&amp;rsquo;s follow the steps below to configure the IDE.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;code&gt;Tools → Board&lt;/code&gt; and select &lt;code&gt;Arduino Pro or Pro Mini&lt;/code&gt; and &lt;code&gt;ATmega328P (3.3V, 8MHz)&lt;/code&gt; for &lt;code&gt;Processor&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;./IDE_ATmega.jpg&#34; width=&#34;640&#34;&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Go to &lt;code&gt;Tools → Serial Port&lt;/code&gt; and select the serial port that Leafony is connected to&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;./IDE_COM.jpg&#34; width=&#34;640&#34;&gt;
&lt;h2 id=&#34;checking-the-operation-of-the-microcontroller-board&#34;&gt;Checking the operation of the microcontroller board&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;In the Arduino IDE, click on &lt;code&gt;File → Sketch Examples → 01.Basics → Blink&lt;/code&gt; to open the sample app.&lt;/li&gt;
&lt;li&gt;The program is written to Leafony by pressing the &lt;code&gt;write to microcontroller&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;If you can confirm that the LED on the AVR MCU leaf is blinking, you are done.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;when-in-doubt&#34;&gt;When in doubt.&lt;/h2&gt;
&lt;p&gt;If it doesn&amp;rsquo;t work, go to &amp;ldquo;&lt;a href=&#34;https://docs.leafony.com/en/docs/getting-started/solution&#34; target=&#34;_blank&#34;&gt;Solution&lt;/a&gt;&amp;rdquo; to find a solution.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Next&lt;/h4&gt;
A number of programs are available in &lt;a href=&#34;https://docs.leafony.com/docs/examples&#34;&gt;Sample App&lt;/a&gt;.
To make development easier, install the library and get started.
&lt;/div&gt;

&lt;h2 id=&#34;installing-libraries&#34;&gt;Installing Libraries&lt;/h2&gt;
&lt;p&gt;To use some of the leaves, you will need to install additional libraries. &lt;br&gt;
Follow the steps below to install all libraries in advance.&lt;/p&gt;
&lt;h3 id=&#34;1-library-to-use&#34;&gt;1. Library to use&lt;/h3&gt;
&lt;p&gt;The libraries used in each Kit are as follows.&lt;/p&gt;
&lt;table class=&#34;table-hover&#34;&gt;
  &lt;thread&gt;
    &lt;tr&gt;
      &lt;th&gt;Leaf&lt;/th&gt;
      &lt;th&gt;Required Library&lt;/th&gt;
      &lt;th&gt;Recommended version&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thread&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;BLE&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/Leafony/TBGLib&#34; target=&#34;_blank&#34;&gt;TBGLib&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Bluetooth Library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td rowspan=5&gt;4-Sensors&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_Sensor&#34; target=&#34;_blank&#34;&gt;Adafruit_Sensor.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Unified Sensor Driver&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_BusIO&#34; target=&#34;_blank&#34;&gt;Adafruit_BusIO_Register.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Bus IO Library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/ameltech/sme-hts221-library&#34; target=&#34;_blank&#34;&gt;HTS221.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Temperature and humidity sensor library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/closedcube/ClosedCube_OPT3001_Arduino&#34; target=&#34;_blank&#34;&gt;ClosedCube_OPT3001.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Illuminance sensor library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_LIS3DH/tree/1.1.2&#34; target=&#34;_blank&#34;&gt;Adafruit_LIS3DH.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1.1.2&lt;/td&gt;
      &lt;td&gt;Accelerometer Library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LCD&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/tomozh/arduino_ST7032&#34; target=&#34;_blank&#34;&gt;ST7032.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;LCD Library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AVR MCU&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/PaulStoffregen/MsTimer2&#34; target=&#34;_blank&#34;&gt;MsTimer2.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Timer interrupt library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RTC&amp;MicroSD&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/RTClib&#34; target=&#34;_blank&#34;&gt;RTClib.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;RTC Library&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2-download-library&#34;&gt;2. Download Library&lt;/h3&gt;
&lt;p&gt;Clicking on the links in the table above will take you to the library&amp;rsquo;s GitHub repository.
Click &lt;code&gt;Code → Download ZIP&lt;/code&gt; to download the library.&lt;/p&gt;
&lt;img src=&#34;github_1.png&#34; width=&#34;600&#34;&gt;
&lt;h3 id=&#34;3-include-library&#34;&gt;3. Include Library&lt;/h3&gt;
&lt;p&gt;Launch the Arduino and choose &lt;code&gt;Sketch → Include Library → Install ZIP Library&lt;/code&gt; to load the zip file you just downloaded.&lt;/p&gt;
&lt;img src=&#34;IDE_libinclude.png&#34; width=&#34;640&#34;&gt;  
&lt;br&gt;
&lt;br&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: ESP32 Wi-Fi Kit Development Environment Settings Manual</title>
      <link>https://docs.leafony.com/en/docs/environment/esp32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/en/docs/environment/esp32/</guid>
      <description>
        
        
        &lt;p&gt;Follow the steps below to set up the ESP32 Wi-Fi Kit development environment.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Next&lt;/h4&gt;
Install the software needed to write a program in Leafony
&lt;/div&gt;

&lt;h2 id=&#34;what-to-prepare&#34;&gt;What to prepare&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ESP32 Wi-Fi Kit&lt;/li&gt;
&lt;li&gt;PC (Windows, Mac OS X or Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installing-arduino-ide&#34;&gt;Installing Arduino IDE&lt;/h2&gt;
&lt;p&gt;The Arduino IDE is a development environment for the Arduino, an open source hardware platform for electronics. &lt;br&gt; &lt;br&gt;.
The development environment allows you to write programs, write programs to the Arduino board, and display the data coming from the board. &lt;br&gt;.
Leafony can be developed with the Arduino IDE.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s download the Arduino IDE right away.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From the &lt;a href=&#34;https://www.arduino.cc/&#34; target=&#34;_blank&#34;&gt;Arduino website&lt;/a&gt;, go to &amp;ldquo;SOFTWARE&amp;rdquo; and then &amp;ldquo;DOWNLOADS&amp;rdquo; to get to the Arduino IDE download page.&lt;/li&gt;
&lt;li&gt;Download the installer for your OS at the place where it says &amp;ldquo;Download the Arduino IDE&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Run the downloaded installer and follow the on-screen instructions to install the Arduino IDE.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Next&lt;/h4&gt;
Let’s write a program in Leafony and make it work!
&lt;/div&gt;

&lt;h2 id=&#34;connecting-to-pc&#34;&gt;Connecting to PC&lt;/h2&gt;
&lt;p&gt;Connect to your PC with a USB cable.&lt;br&gt;&lt;/p&gt;
&lt;img src=&#34;./esp32_assemble.png&#34; width=&#34;500&#34;&gt;
&lt;h2 id=&#34;configuration-of-the-microcontroller-board&#34;&gt;Configuration of the microcontroller board&lt;/h2&gt;
&lt;p&gt;To use the ESP32 MCU leaf with the Arduino IDE, you need to install Arduino core for the ESP32.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the &lt;code&gt;File → Preferences&lt;/code&gt; in the Arduino IDE and enter the following URL in the &lt;code&gt;Additional Board Manager URL:&lt;/code&gt; field.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　&lt;code&gt;https://dl.espressif.com/dl/package_esp32_index.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ArduinoIDE_URL.png&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;br&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Select &lt;code&gt;Tools -&amp;gt; Board -&amp;gt; Board Manager&lt;/code&gt;, search for &lt;code&gt;esp32 by Espressif Systems&lt;/code&gt; and press the Install button.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;./BoardManager_esp32.png&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;br&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Choose &lt;code&gt;Tools → Board → ESP32 Dev Module&lt;/code&gt; to get your ESP32 MCU working.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;checking-the-operation-of-the-microcontroller-board&#34;&gt;Checking the operation of the microcontroller board&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s write a Sample App and get the ESP32 Wi-Fi Kit running.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Launch the Arduino.&lt;/li&gt;
&lt;li&gt;Paste the following sample code into your code editor.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//*****************************
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// ボタン入力の状態をシリアルモニタに表示するサンプル
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//*****************************
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;pushButton&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;setup&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;Serial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;begin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;115200&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;pinMode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pushButton&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;INPUT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buttonState&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;digitalRead&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;pushButton&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;Serial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;buttonState&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;delay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Select the COM port to which the ESP32 leaf is connected.&lt;/li&gt;
&lt;li&gt;Push the &lt;code&gt;write to microcomputer board&lt;/code&gt; button to write a sketch.&lt;/li&gt;
&lt;li&gt;Press and hold the &lt;code&gt;Boot mode switch&lt;/code&gt; on the ESP32 leaf when the following message appears during the writing process.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;./esp32_write.png&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Open the serial monitor and set the communication speed to &lt;code&gt;115200bps&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Press the &lt;code&gt;Boot mode switch (IO0)&lt;/code&gt; and see if the input state of the switch changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;./AP02_tips.png&#34;&gt;&lt;img src=&#34;./AP02_tips.png&#34; width=&#34;450&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;when-in-doubt&#34;&gt;When in doubt.&lt;/h2&gt;
&lt;p&gt;If it doesn&amp;rsquo;t work, go to &amp;ldquo;&lt;a href=&#34;https://docs.leafony.com/en/docs/getting-started/solution&#34; target=&#34;_blank&#34;&gt;Solution&lt;/a&gt;&amp;rdquo; to find a solution.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Next&lt;/h4&gt;
A number of programs are available in &lt;a href=&#34;https://docs.leafony.com/docs/examples&#34;&gt;Sample App&lt;/a&gt;.
To make development easier, install the library and get started.
&lt;/div&gt;

&lt;h2 id=&#34;installing-libraries&#34;&gt;Installing Libraries&lt;/h2&gt;
&lt;p&gt;To use some of the leaves, you will need to install additional libraries. &lt;br&gt;
Follow the steps below to install all libraries in advance.&lt;/p&gt;
&lt;h3 id=&#34;1-library-to-use&#34;&gt;1. Library to use&lt;/h3&gt;
&lt;p&gt;The libraries used in each Kit are as follows.&lt;/p&gt;
&lt;table class=&#34;table-hover&#34;&gt;
  &lt;thread&gt;
    &lt;tr&gt;
      &lt;th&gt;Leaf&lt;/th&gt;
      &lt;th&gt;Required Library&lt;/th&gt;
      &lt;th&gt;Recommended version&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thread&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;BLE&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/Leafony/TBGLib&#34; target=&#34;_blank&#34;&gt;TBGLib&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Bluetooth Library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td rowspan=5&gt;4-Sensors&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_Sensor&#34; target=&#34;_blank&#34;&gt;Adafruit_Sensor.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Unified Sensor Driver&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_BusIO&#34; target=&#34;_blank&#34;&gt;Adafruit_BusIO_Register.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Bus IO Library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/ameltech/sme-hts221-library&#34; target=&#34;_blank&#34;&gt;HTS221.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Temperature and humidity sensor library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/closedcube/ClosedCube_OPT3001_Arduino&#34; target=&#34;_blank&#34;&gt;ClosedCube_OPT3001.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Illuminance sensor library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_LIS3DH/tree/1.1.2&#34; target=&#34;_blank&#34;&gt;Adafruit_LIS3DH.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1.1.2&lt;/td&gt;
      &lt;td&gt;Accelerometer Library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LCD&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/tomozh/arduino_ST7032&#34; target=&#34;_blank&#34;&gt;ST7032.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;LCD Library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AVR MCU&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/PaulStoffregen/MsTimer2&#34; target=&#34;_blank&#34;&gt;MsTimer2.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Timer interrupt library&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RTC&amp;MicroSD&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/RTClib&#34; target=&#34;_blank&#34;&gt;RTClib.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;RTC Library&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2-download-the-library-from-github&#34;&gt;2. Download the library from Github&lt;/h3&gt;
&lt;p&gt;Clicking on the links in the table above will take you to the library&amp;rsquo;s GitHub repository.
Click &lt;code&gt;Code → Download ZIP&lt;/code&gt; to download the library.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./github_1.png&#34; alt=&#34;github&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-include-library&#34;&gt;3. Include Library&lt;/h3&gt;
&lt;p&gt;Launch the Arduino and choose &lt;code&gt;Sketch → Include Library → Install ZIP Library&lt;/code&gt; to load the zip file you just downloaded.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./IDE_libinclude.png&#34; alt=&#34;include&#34;&gt;&lt;/p&gt;
&lt;br&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: STM32 MCU Development Environment Settings Manual</title>
      <link>https://docs.leafony.com/en/docs/environment/stm32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/en/docs/environment/stm32/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: PlatformIO development environment</title>
      <link>https://docs.leafony.com/en/docs/environment/platformio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/en/docs/environment/platformio/</guid>
      <description>
        
        
        &lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Instead of the Arduino IDE, you can also use PlatformIO as the Leafony development environment.
PlatformIO makes it easy to manage things like library versioning, board configuration, etc., as well as to use.
You can take advantage of the powerful plug-ins for Visual Studio Code to make your development more comfortable.&lt;/p&gt;
&lt;h2 id=&#34;advance-preparation&#34;&gt;Advance preparation&lt;/h2&gt;
&lt;p&gt;PlatformIO is a plug-in for Visual Studio Code (VSCode).
You need to install the following software in advance.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;platformio-installation&#34;&gt;Platformio Installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Launch VSCode and open the &lt;code&gt;Extensions&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;PlatformIO IDE&lt;/code&gt; into the search window.&lt;/li&gt;
&lt;li&gt;Install the PlatformIO IDE.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;./001.jpg&#34; width=&#34;300&#34;&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-project&#34;&gt;Create a new project&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Press the &lt;code&gt;PlatformIO Home&lt;/code&gt; button to display the PlatformIO home.&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;New Project&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Name your project and select the appropriate board on &lt;code&gt;Board&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;main.cpp&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; folder and paste the following code.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;Arduino.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;setup&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// LEDピンを出力ピンに設定
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;pinMode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LED_BUILTIN&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;OUTPUT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;digitalWrite&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LED_BUILTIN&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;HIGH&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// LEDを点灯
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;delay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;999&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;                       &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 1秒待つ
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;digitalWrite&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LED_BUILTIN&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;LOW&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// LEDを消灯
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;delay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;999&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;                       &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 1秒待つ
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Press the &lt;code&gt;Build&lt;/code&gt; button to build the project.&lt;/li&gt;
&lt;li&gt;Connect Leafony to your PC.&lt;/li&gt;
&lt;li&gt;Press the &lt;code&gt;Upload&lt;/code&gt; button to write your project to Leafony.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;install-the-library&#34;&gt;Install the library&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Press the &lt;code&gt;PlatformIO Home&lt;/code&gt; button to display the PlatformIO home.&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;Libraries&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;OPT3001&lt;/code&gt; in the search window to search the library for the illuminance sensor OPT3001.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ClosedCube OPT3001&lt;/code&gt;をクリック。&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;Add to Project&lt;/code&gt; button and add with &lt;code&gt;Add&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;PlatformIO.ini&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Check that &lt;code&gt;closedcube/ClosedCube OPT3001 @ &amp;lt;version&amp;gt;&lt;/code&gt; is added to the &lt;code&gt;lib_deps&lt;/code&gt; option.&lt;/li&gt;
&lt;li&gt;If you paste the code below, you can easily set up the library environment without doing the above.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;[env:pro8MHzatmega328]
platform = atmelavr
board = pro8MHzatmega328
framework = arduino
lib_deps = 
	closedcube/ClosedCube OPT3001 @ ^1.1.2
	adafruit/Adafruit LIS3DH@1.1.2
	https://github.com/ameltech/sme-hts221-library.git
	https://github.com/Leafony/TBGLib
	tomozh/ST7032@0.0.0-alpha+sha.501bf64fe6
	paulstoffregen/MsTimer2@^1.1
	adafruit/RTClib@^1.11.2
	adafruit/Adafruit Unified Sensor@^1.1.4
	adafruit/Adafruit BusIO@^1.5.0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;write-and-serial-monitoring&#34;&gt;Write and Serial Monitoring&lt;/h2&gt;
&lt;p&gt;When you press the &lt;code&gt;Serial Port Monitor&lt;/code&gt; button, the serial monitor is displayed.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;For more information on how to use PlatformIO for VSCode, please refer to the official documentation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.platformio.org/en/latest/integration/ide/vscode.html#ide-vscode&#34;&gt;https://docs.platformio.org/en/latest/integration/ide/vscode.html#ide-vscode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
