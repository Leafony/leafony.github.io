<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leafony – STM32 MCU 開発環境設定マニュアル</title>
    <link>https://docs.leafony.com/docs/environment/stm32/</link>
    <description>Recent content in STM32 MCU 開発環境設定マニュアル on Leafony</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://docs.leafony.com/docs/environment/stm32/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Arduino IDEの設定</title>
      <link>https://docs.leafony.com/docs/environment/stm32/arduino_ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/docs/environment/stm32/arduino_ide/</guid>
      <description>
        
        
        &lt;h2 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;STM32 MCUリーフ&lt;/li&gt;
&lt;li&gt;Basic Kit&lt;/li&gt;
&lt;li&gt;パソコン (Windows、macOS 、または Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stm32cubeprog-のインストール&#34;&gt;STM32CubeProg のインストール&lt;/h2&gt;
&lt;p&gt;プログラムを書き込むには、STM32CubeProgのインストール&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;が必要です。下記より、インストールしてください。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stmcu.jp/design/sw_dev/pc_soft/58442/&#34;&gt;STM32CubeProg&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;arduino-ideのインストール&#34;&gt;Arduino IDEのインストール&lt;/h2&gt;
&lt;p&gt;以下の手順で、Arduino IDEをインストールを行います。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.arduino.cc/&#34; target=&#34;_blank&#34;&gt;Arduinoのホームページ&lt;/a&gt;
から&lt;code&gt;SOFTWARE&lt;/code&gt;のページを開きます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Download&lt;/code&gt;で、インストーラをダウンロードします。&lt;/li&gt;
&lt;li&gt;画面の指示に従って、インストールします。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;previous-ide-インストール&#34;&gt;Previous IDE インストール&lt;/h3&gt;
&lt;p&gt;下記より、Previous IDEのインストールが出来ます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.arduino.cc/en/Main/OldSoftwareReleases#previous&#34;&gt;Previous IDE Releases&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パソコンと接続&#34;&gt;パソコンと接続&lt;/h2&gt;
&lt;p&gt;USBケーブルでパソコンと接続します。&lt;br&gt;&lt;/p&gt;
&lt;img src=&#34;./stm32_b-kit_assemble.png&#34; width=&#34;500&#34;&gt;
&lt;br&gt;
&lt;h2 id=&#34;マイコンボードの設定&#34;&gt;マイコンボードの設定&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Leafony/BoardManagerFiles&#34; target=&#34;_blank&#34;&gt;Leafony STM32&lt;/a&gt;のボードは、webサイトからインストールします。
&lt;code&gt;ファイル → 環境設定&lt;/code&gt;を開き、&lt;code&gt;追加のボードマネージャのURL:&lt;/code&gt;に、下記URLを入力してください。
&lt;/br&gt;&lt;/br&gt;
&lt;code&gt;https://github.com/Leafony/BoardManagerFiles/raw/master/Leafony_STM32/package_leafony_stm_index.json&lt;/code&gt;
&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./stm32cores1.png&#34; width=&#34;640&#34;&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ツール→ボード→ボードマネージャ&lt;/code&gt;を選択します。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ボードマネージャの検索ボックスにLeafonyを入力してインストールします。インストールに数分時間のかかる場
合があります。&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./stm32cores2.png&#34; width=&#34;640&#34;&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ツール → ボード→ Leafony STM32 &lt;/code&gt; をクリックします。&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./stm32boards1.png&#34; width=&#34;640&#34;&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ツール → Board part number→ Leafony STM32 MCU&lt;/code&gt; をクリックします。Arduino IDEのデフォルトは、80MHzですが、低消費電力でご使用頂くため、クロックを16MHzに落としたボードも用意しています。&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./stm32boards2.png&#34; width=&#34;640&#34;&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ツール → Upload method→ STM32CubeProgrammer(Serial)&lt;/code&gt; をクリックします。&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./stm32boards3.png&#34; width=&#34;640&#34;&gt;&lt;/img&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ツール → シリアルポート&lt;/code&gt;から、Leafonyが接続されているシリアルポートを選択します。シリアルポートが選択出来ない場合は、&lt;a href=&#34;https://docs.leafony.com/docs/getting-started/solution/#シリアルポートが見つからない&#34; target=&#34;_blank&#34;&gt;シリアルポートが見つからない&lt;/a&gt;を参照して下さい。&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./stm32serial.jpg&#34; width=&#34;640&#34;&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;マイコンボードの動作確認&#34;&gt;マイコンボードの動作確認&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;STM32 MCUリーフの&lt;code&gt;プログラムスイッチ&lt;/code&gt;を、プログラム側にして、次に&lt;code&gt;リセットスイッチ&lt;/code&gt;を押します。&lt;/br&gt;
&lt;a href=&#34;https://docs.leafony.com/docs/leaf/processor/ap03/ap03_tips.jpg&#34;&gt;&lt;img src=&#34;https://docs.leafony.com/docs/leaf/processor/ap03/ap03_tips.jpg&#34; width=&#34;450&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.leafony.com/docs/examples/beginner/3_p/basic/temp_humid_sensors&#34; target=&#34;_blank&#34;&gt;温湿度センサ読み取り&lt;/a&gt;を参照し、プログラムを書き込みます。書き込みが完了するまで、時間のかかる場合があります。正常に書き込まれた場合は &lt;code&gt;Start operation achieved successfully&lt;/code&gt;と表示されます。表示されない場合は、プログラムが正常に動作しません。&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./operation1_v1.png&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;書き込みが完了したら、STM32 MCUリーフの&lt;code&gt;プログラムスイッチ&lt;/code&gt;を実行（Run)側にするとLEDが消灯します。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STM32 MCUリーフの&lt;code&gt;リセットスイッチ&lt;/code&gt;を押してプログラムを動作させます。温度と湿度が表示されていれば完了です。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;スケッチのピンの指定&#34;&gt;スケッチのピンの指定&lt;/h3&gt;
&lt;p&gt;ピンは、名前(Name)又はポート(Port)で指定して下さい。&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.leafony.com/docs/leaf/processor/ap03/ap03_pinassign.png&#34;&gt;&lt;img src=&#34;https://docs.leafony.com/docs/leaf/processor/ap03/ap03_pinassign.png&#34; width=&#34;750&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ライブラリのインストール&#34;&gt;ライブラリのインストール&lt;/h2&gt;
&lt;p&gt;プログラムを書き込むには、ライブラリのインストールが必要なリーフがあります。下記より、インストールしてください。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.leafony.com/docs/environment/avr/arduino/#%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB&#34;&gt;ライブラリのインストール&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;タイマ割り込みライブラリ(MsTimer2.h)は、AVR MCUのライブラリなので、STM32 MCUリーフには、使用出来ません。以下のHardwareTimerを参考にしてください。&lt;/p&gt;
&lt;h3 id=&#34;hardwaretimer&#34;&gt;HardwareTimer&lt;/h3&gt;
&lt;p&gt;使用例を以下に、記載します。詳細は&lt;a href=&#34;https://github.com/stm32duino/wiki/wiki/HardwareTimer-library&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
初期設定&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;HardwareTimer&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;timer2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;HardwareTimer&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TIM2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color:#000&#34;&gt;timer2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;setOverflow&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LOOP_INTERVAL&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MICROSEC_FORMAT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;       &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 125ms
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;timer2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;attachInterrupt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;intTimer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;timer2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;resume&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;割り込みルーチン&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;intTimer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;){&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;bInterval&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
　&lt;span style=&#34;color:#a40000&#34;&gt;：&lt;/span&gt;
　&lt;span style=&#34;color:#a40000&#34;&gt;：&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;困ったときには&#34;&gt;困ったときには&lt;/h2&gt;
&lt;p&gt;お問い合わせをする前に、&lt;a href=&#34;https://docs.leafony.com/docs/getting-started/solution&#34; target=&#34;_blank&#34;&gt;困ったときには&lt;/a&gt;を読んでみてください。&lt;/p&gt;
&lt;p style=&#34;text-align: right&#34;&gt;
&lt;A HREF=&#34;javascript:history.back()&#34;&gt;前のページに戻る&lt;/A&gt;
&lt;/p&gt;&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Windows 64bitのV2.12.0、V2.6.0、V2.4.0は、動作確認済み。v2.5.0は動作しないので要注意。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;スイッチをプログラム側にしないで書き込んだ場合も&lt;code&gt;ボードへの書き込みが完了しました&lt;/code&gt;となりますが、画面の下部に&lt;code&gt;Timeout error occured while waiting for acknowledgement&lt;/code&gt;と表示され、プログラムが正常に動作しません。&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./operation2_v1.png&#34;&gt;&lt;/img&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PlatformIO IDE for VSCodeの設定</title>
      <link>https://docs.leafony.com/docs/environment/stm32/platformio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/docs/environment/stm32/platformio/</guid>
      <description>
        
        
        &lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Visual Studio Code (VSCode)は、Microsoft社が提供する軽量ながら強力なソース コード エディターで、デスクトップ上で実行され、Windows、macOS、および Linux で使用できます。PlatformIO IDEは、VSCodeの拡張機能で、ビルドが早く、ライブラリやボードのバージョンがプロジェクト毎に管理されているのが特長です。
&lt;/br&gt;&lt;/p&gt;
&lt;h2 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Basic Kit 2&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;パソコン (Windows、macOS、または Linux)&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;
&lt;h3 id=&#34;pythonのインストール&#34;&gt;Pythonのインストール&lt;/h3&gt;
&lt;p&gt;PlatformIO IDEを動かすには、Pythonが必要です。&lt;a href=&#34;https://www.javadrive.jp/python/install/index1.html#section2&#34;&gt;こちら&lt;/a&gt;を参照して、Pythonインストールして下さい。&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;platformio-ideのインストール&#34;&gt;PlatformIO IDEのインストール&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;PlatformIO IDEは、VSCodeの拡張機能なので、まず、&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;をインストールして下さい。&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;拡張機能&lt;/code&gt;(画面左のバー)をクリックし、検索窓に以下を入力して、拡張機能をインストールします。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Japanese Language Pack for Visual Studio Code&lt;/code&gt;&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;platformio ide&lt;/code&gt;&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Serial Monitor&lt;/code&gt;&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;teleplot&lt;/code&gt;&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;stm32cubeprog-とarduino-ideのインストール&#34;&gt;STM32CubeProg とArduino IDEのインストール&lt;/h3&gt;
&lt;p&gt;STM32MCUにプログラムを書き込むために、以下のインストールが必要になります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stmcu.jp/design/sw_dev/pc_soft/58442/&#34;&gt;STM32CubeProg&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.arduino.cc/en/software&#34;&gt;Arduino IDE&lt;/a&gt;&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;クイックスタート&#34;&gt;クイックスタート&lt;/h2&gt;
&lt;p&gt;「Hello Wold」の事例で、platformIO IDEの使い方を紹介します。&lt;/br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;VSCodeを立ち上げ、&lt;code&gt;ファイル&lt;/code&gt;→ &lt;code&gt;新しいウィンドウ&lt;/code&gt;を開きます。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PlatformIO&lt;/code&gt;(画面左のバー)をクリックし、PLATFORMIO QUICK ACCESS（画面左）を表示させます。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PIO Home/Open&lt;/code&gt;をクリックします。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;New Project&lt;/code&gt;をクリックすると、Project Wizardが表示されます。&lt;code&gt;Name&lt;/code&gt;、&lt;code&gt;Boad&lt;/code&gt;、&lt;code&gt;Framework&lt;/code&gt;を以下の通り入力して、&lt;code&gt;Finish&lt;/code&gt;をクリックします。新しいBoardを選択した時、プログラミングに必要なファイルのダウンロードするために数分かかります。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name:&lt;code&gt;STM32_Hello_World_Pjt&lt;/code&gt;と記入 &lt;/br&gt;&lt;/li&gt;
&lt;li&gt;Board:&lt;code&gt;Leafony Systems AP03&lt;/code&gt;を選択 &lt;/br&gt;&lt;/li&gt;
&lt;li&gt;Framework:&lt;code&gt;Arduino &lt;/code&gt;を選択 &lt;/br&gt; &lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;platformio.ini&lt;/code&gt; (画面左)を開き、 Projectで定義したBoardとFrameworkが、正しく定義されていることを確認します。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f57900&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;leafony_ap03&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;platform&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ststm32&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;board&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;leafony_ap03&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;framework&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;arduino&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;STM32 MCUは、COMポートの番号とプログラムファイルの実行場所をplatformio.iniに記載して下さい。COMポートの番号は、シリアルモニターから確認出来ます。&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./platformio_14.png&#34; width=&#34;840&#34;&gt;&lt;/br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Windowsの場合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;upload_protocol&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Windows&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;upload_port&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;COM&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;番号&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;upload_command&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;%%&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;userprofile&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;%%&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AppData&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Local&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Arduino15&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;packages&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;STM32&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tools&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;STM32Tools&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1.4.0&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tools&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;win&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;stm32CubeProg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bat&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SOURCE&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UPLOAD_PORT&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;macOSの場合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;upload_protocol&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;macOS&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;upload_port&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;cu&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;usbserial&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;シリアル番号&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;upload_command&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Users&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;ユーザ名&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Library&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Arduino15&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;packages&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;STM32&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tools&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;STM32Tools&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1.4.0&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tools&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;macosx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;stm32CubeProg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sh&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SOURCE&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UPLOAD_PORT&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;また、 シリアル通信のボーレートを&lt;code&gt;monitor_speed =&lt;/code&gt;で定義し、platformio.iniに記載して下さい。&lt;/br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;monitor_speed&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;115200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;&lt;code&gt;src/main.cpp&lt;/code&gt;(画面左）を開き、以下のコードを貼り付けて下さい。&lt;/br&gt;
PlatformIO IDEのコードは、Arduino IDEのスケッチの先頭に&lt;code&gt;#include &amp;lt;Arduino.h&amp;gt;&lt;/code&gt;を加えます。&lt;/br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;Arduino.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;setup&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;Serial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;begin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;115200&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;delay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(){&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;Serial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;delay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ソースコード:&lt;a href=&#34;https://github.com/Leafony/platformio-sample-projects/tree/main/stm32/STM32_Hello_World_Pjt&#34;&gt;STM32_Hello_Wold_Pjt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;
&lt;p&gt;PlatformIO ツールバー(画面下のバー)の&lt;code&gt;Project Environment Switcher&lt;/code&gt;ボタンを押すと、アクティブなプロジェクが画面上側に全て表示されます。実行するプロジェクトを正しく選択して、&lt;code&gt;Build&lt;/code&gt;ボタンを押して下さい。日本語のフォルダの下にある場合は、書き込みすることが出来ないので別の場所にコピーします。&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./platformio_6.png&#34; width=&#34;640&#34;&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.leafony.com/docs/environment/stm32/arduino_ide/#%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3%E3%81%A8%E6%8E%A5%E7%B6%9A&#34;&gt;こちら&lt;/a&gt; を参考に、LeafonyをPCに接続し、STM32 MCUリーフの&lt;code&gt;プログラムスイッチ&lt;/code&gt;をプログラム側(LED点灯)にし下さい。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Upload&lt;/code&gt;ボタンを押すと、プログラムがMCUに書き込まれます。&lt;code&gt;SUCCESS　TooK XX.XX seconds&lt;/code&gt;と表示が出ても、以下の表示が出ていない時は、正しく書き込まれていないので、注意をして下さい。&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./platformio_16.png&#34; width=&#34;840&#34;&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正しく書き込まれたら、&lt;code&gt;プログラムスイッチ&lt;/code&gt;を実行側(LED消灯)にして下さい。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MCUのリセットボタンを押して、プログラムを実行させます。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;シリアルモニター&lt;/code&gt;ボタンを押して起動させ、&lt;code&gt;Hello Wolrd&lt;/code&gt;を表示が出来れば完成です。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;stm32cubeprogによるプログラムの書き込み&#34;&gt;STM32CubeProgによるプログラムの書き込み&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;STM32CubeProgでもプログラムを書き込むことが出来ます。&lt;a href=&#34;https://docs.leafony.com/docs/environment/stm32/stm32cube_ide/#stm32cubeprog%E3%81%AB%E3%82%88%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E6%9B%B8%E8%BE%BC%E3%81%BF&#34;&gt;こちらを&lt;/a&gt;を参照し下さい。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;プログラムのイメージは、以下にあります。&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;/br&gt;
&lt;code&gt;C:\Users\ユーザ名\Documents\PlatformIO\Projects\STM32_Hello_World_Pjt\.pio\build\LEAFONY_AP03\firmware.elf&lt;/code&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;画面左のErasing ＆ Programingをクリックして、&lt;code&gt;File path&lt;/code&gt;にイメージファイルを指定し、プログラムを書き込んで下さい。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cpuの周波数を80mhzデフォルトから16mhzに設定変更&#34;&gt;CPUの周波数を80MHz(デフォルト)から16MHzに設定変更&lt;/h2&gt;
&lt;p&gt;CPUの周波数は、80MHz（デフォルト）に設定されています。省電力を実現するためにCPUの周波数を下げることは有効な手段なので、CPUの周波数を16MHzに設定出来るようにしました。設定方法を以下に記します。&lt;/br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;platformio.ini&lt;/code&gt;に以下を追記して下さい。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Enable&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CPU&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;frequency&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MHz&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Leafony_tools&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cpp&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;build_flags&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;D&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CPUCLOCK_LOW&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;leafony_tools.cpp&lt;/code&gt;のファイルを以下からダウンロードし、&lt;code&gt;src&lt;/code&gt;に保存して下さい。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://github.com/Leafony/platformio-LEAFONY_AP03&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以下のソースコードを実行して、CPUの周波数が16MHzに設定されていることをシリアルモニターで確認して下さい。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/br&gt;
&lt;ul&gt;
&lt;li&gt;ソースコード：&lt;a href=&#34;https://github.com/Leafony/platformio-sample-projects/tree/main/stm32/STM32_CPU_Frequency_Pjt&#34;&gt;STM32_CPU_Frequency_Pjt&lt;/a&gt;&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ライブラリ&#34;&gt;ライブラリ&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;インストールの仕方&lt;/br&gt;
ライブラリは、platformio.ini の最後の行に、&lt;code&gt;lib_deps =&lt;/code&gt;で定義すれば、PCにインストールされます。定義の仕方は、GitHubのURLを直接指定する方法と&lt;code&gt;Libraries&lt;/code&gt;で指定する方法の二通りがあります。
&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各リーフのライブラリ一覧は、以下の通りです。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table class=&#34;table-hover&#34;&gt;
  &lt;thread&gt;
    &lt;tr&gt;
      &lt;th&gt;Item&lt;/th&gt;
      &lt;th&gt;lib_deps&lt;/th&gt;
      &lt;th&gt;Tags&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thread&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;BLE&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/Leafony/TBGLib&#34; target=&#34;_blank&#34;&gt;https://github.com/Leafony/TBGLib&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Bluetoothライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td rowspan=5&gt;4-Sensors&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_Sensor&#34; target=&#34;_blank&#34;&gt;adafruit/Adafruit Unified Sensor@^1.1.6&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;ユニファイドセンサドライバ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_BusIO&#34; target=&#34;_blank&#34;&gt;adafruit/Adafruit BusIO@^1.14.1&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Bus IOライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/ameltech/sme-hts221-library&#34; target=&#34;_blank&#34;&gt;https://github.com/ameltech/sme-hts221-library&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;温湿度センサライブラリ&lt;/td&gt;
    &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/closedcube/ClosedCube_OPT3001_Arduino&#34; target=&#34;_blank&#34;&gt;closedcube/ClosedCube OPT3001@^1.1.2&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;照度センサライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_LIS3DH/tree/1.1.2&#34; target=&#34;_blank&#34;&gt;adafruit/Adafruit LIS3DH@1.1.2&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1.1.2&lt;/td&gt;
      &lt;td&gt;加速度センサライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LCD&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/tomozh/arduino_ST7032&#34; target=&#34;_blank&#34;&gt;tomozh/ST7032@0.0.0-alpha+sha.501bf64fe6&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;LCDライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AVR MCU&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/PaulStoffregen/MsTimer2&#34; target=&#34;_blank&#34;&gt;paulstoffregen/MsTimer2@^1.1&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;タイマ割り込みライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RTC&amp;MicroSD&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/RTClib&#34; target=&#34;_blank&#34;&gt;adafruit/RTClib@^2.1.1&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;RTCライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td rowspan=2&gt;STM32 MCU&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/stm32duino/STM32RTC/tree/1.2.0&#34; target=&#34;_blank&#34;&gt;stm32duino/STM32duino RTC @1.2.0&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1.2.0&lt;/td&gt;
      &lt;td&gt;STM32RTCライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/stm32duino/STM32LowPower&#34; target=&#34;_blank&#34;&gt;stm32duino/STM32duino Low Power@^1.2.2&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;STM32LowPowerライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LTE-M&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/Leafony/LteLeafV4&#34; target=&#34;_blank&#34;&gt;https://github.com/Leafony/LteLeafV4&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;LTE-Mライブラリ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;シリアルプロッター&#34;&gt;シリアルプロッター　&lt;/h2&gt;
&lt;p&gt;PlatformIOには、Arduino IDEにあるシリアルプロッターがないため、VSCodeの拡張機能である&lt;code&gt;Teleplot for VSCode&lt;/code&gt;を導入します。サンプルのソースコードをダウンロードして、試して下さい。&lt;/br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;GitHubからソースコードをダウンロードし、パソコンの所定の場所に保存&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; します。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ソースコード:&lt;a href=&#34;https://github.com/Leafony/platformio-sample-projects/tree/main/stm32/STM32_Teleplot_Example_1&#34;&gt;STM32_Teleplot_Example_1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;プログラムを実行して下さい。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;画面下の&lt;code&gt;teleplot&lt;/code&gt;の表示をクリックして、COMポートを指定して、&lt;code&gt;Open&lt;/code&gt; を押すとグラフが表示されます &lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;varName:1234\n&lt;/code&gt;という形式のシリアルメッセージは、すべて&lt;code&gt;teleplot&lt;/code&gt;に表示されます。詳しくは、&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=alexnesnes.teleplot&#34;&gt;こちら&lt;/a&gt;を参照して下さい。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Plot a sinus
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;Serial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;gt;sin:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;Serial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sin&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;

  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Plot a cosinus
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;Serial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;gt;cos:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;Serial&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cos&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;stm32-beginner-examples&#34;&gt;STM32 Beginner Examples&lt;/h2&gt;
&lt;p&gt;PlatformIO IDEを使った簡単なソースコードを準備しました。GitHubからダウンロードし、パソコンの所定の場所に保存&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; してプログラムを試して下さい。&lt;/br&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Item&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Source code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/docs/examples/beginner/3_p/basic/temp_humid_sensors&#34;&gt;温湿度センサ読み取り&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://github.com/Leafony/platformio-sample-projects/tree/main/stm32/STM32_Thermo-Hygrometer_Pjt&#34;&gt;STM32_Thermo-Hygrometer_Pjt&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/docs/examples/beginner/3_p/basic/illum_sensor&#34;&gt;照度センサ読み取り&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://github.com/Leafony/platformio-sample-projects/tree/main/stm32/STM32_Illuminance_Meter_Pjt&#34;&gt;STM32_Illuminance_Meter_Pjt&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://docs.leafony.com/docs/examples/beginner/3_p/basic/accelerometer/&#34;&gt;加速度センサ読み取り&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://github.com/Leafony/platformio-sample-projects/tree/main/stm32/STM32_Accelerometer_Pjt&#34;&gt;STM32_Accelerometer_Pjt&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;tips&#34;&gt;Tips&lt;/h1&gt;
&lt;h2 id=&#34;mcuとboardとの関係&#34;&gt;MCUとBoardとの関係&lt;/h2&gt;
&lt;p&gt;LeafonyのMCUとPlatformIO IDEのBoardとの関係は、以下の様になります。&lt;/br&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Item&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Platform&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Board&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Upload&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AP01&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;../../leaf/processor/ap01&#34;&gt;AVR MCU&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;atmelavr&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Arduino Pro or Pro Mini ATmega328(3.3v,8Mhz)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;COMポートの自動検出&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AP02&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;../../leaf/processor/ap02&#34;&gt;ESP32 MCU&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Espressif 32&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Espressif ESP32 Dev Module&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;COMポートの自動検出&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AP03&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;../../leaf/processor/ap03&#34;&gt;STM32 MCU&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ststm32&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Leafony Systems AP03&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;COMポートの自動検出が出来ない。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;プログラムを記述する時のarduino-ideとの違い&#34;&gt;プログラムを記述する時のArduino IDEとの違い&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;#include &amp;lt;Arduino.h&amp;gt;をプログラムの先頭に記述&lt;/br&gt;
Arduino IDEは、プログラム言語としてはC++を使っており、基本的な型の宣言やよく使うライブラリのヘッダファイルは&lt;code&gt;Arduino.h&lt;/code&gt;を書かなくても自動的にインクルードされますが、PlatformIO IDEは、&lt;code&gt;Arduino.h&lt;/code&gt;がプログラムの先頭に必要に記述する必要があります。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;独自関数は使用する関数の前に定義&lt;/br&gt;
Arduino IDEは、独自関数の定義を使用する関数の後に書いてもビルドが&lt;code&gt;SUCCESS&lt;/code&gt;になりますが、PlatformIO　IDEは、C++のルールに従って独自関数は使用する関数の前に定義する必要があります。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例えば、以下は、独自関数の設定は、使用する関数の後に書いてあるのでビルドが&lt;code&gt;FAIL&lt;/code&gt;になります。&lt;/br&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;setup&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// put your setup code here, to run once:
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下は、独自関数の定義は、使用する関数の前に書いてあるのでビルドが&lt;code&gt;SUCSESS&lt;/code&gt;になります。&lt;/br&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;setup&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// put your setup code here, to run once:
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下は、プロトタイプ宣言するので、ビルドが&lt;code&gt;SUCSESS&lt;/code&gt;になります。&lt;/br&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Prototypes
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;setup&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// put your setup code here, to run once:
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;プロジェクトフォルダの名前変更や削除&#34;&gt;プロジェクトフォルダの名前変更や削除&lt;/h2&gt;
&lt;p&gt;Project Wizarで、New Projectを立ち上げると、フォルダが作成され、デフォルトでは、~/Documents/PlatformIO/Projects に保存されます。
Projectの名前変更やフォルダの削除は、Project Wizarではなく、エクスプローラから直接出来ます。&lt;/br&gt;&lt;/p&gt;
&lt;h2 id=&#34;プロジェクトフォルダの保存場所の設定&#34;&gt;プロジェクトフォルダの保存場所の設定&lt;/h2&gt;
&lt;p&gt;プロジェクトフォルダの保存場所の設定は、Project Wizarではなく、ターミナルから行います。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;VSCodeを立ち上げ、&lt;code&gt;ファイル&lt;/code&gt;→ &lt;code&gt;新しいウィンドウ&lt;/code&gt;を開きます。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PlatformIO&lt;/code&gt;(画面左のバー)をクリックし、PLATFORMIO QUICK ACCESS（画面左）を表示させます。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PIO Home/Open&lt;/code&gt;をクリックします。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ターミナルを立ち上げて、以下のコードを実行します。&lt;/br&gt;
　&lt;code&gt;pio settings set projects_dir ＜設定したい(絶対)パス＞&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VSCodeを再起動します。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;platformioの公式ドキュメント&#34;&gt;PlatformIOの公式ドキュメント&lt;/h2&gt;
&lt;p&gt;PlatformIO の公式ドキュメントは、以下の通りです。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ttps://docs.platformio.org/en/latest/integration/ide/vscode.html#ide-vscode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stm32mcuのボードファイル参考&#34;&gt;STM32MCUのボード・ファイル(参考)&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Leafony Systems AP03&lt;/code&gt;のボードが、2023年10月に、platformIOに登録されたため、直接ダウンロードすることが出来るようになり、以下の方法でボードを定義する必要がなくなりました。&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;STM32MCUは、&lt;a href=&#34;https://www.st.com/ja/evaluation-tools/nucleo-l452re.html&#34;&gt;NUCLEO-L452RE&lt;/a&gt;とピンアサインが異なるため、STM32MCUのBoardファイル(③、④）が必要になります。PlatformIOで
NUCLEO-L452REのプロジェクトを立ち上げると①と②がPCにダウンロードされます。次に③と④をGitHubからダウンロードしてpcの保存すれば完了です。&lt;/br&gt;&lt;/br&gt;
&lt;img src=&#34;./platformio_15.png&#34; width=&#34;840&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;nucleo-l452reのプロジェクトの立ち上げ&#34;&gt;Nucleo L452REのプロジェクトの立ち上げ&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;VSCodeを立ち上げ、&lt;code&gt;ファイル&lt;/code&gt;→ &lt;code&gt;新しいウィンドウ&lt;/code&gt;を開きます。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PlatformIO&lt;/code&gt;(画面左のバー)をクリックし、PLATFORMIO QUICK ACCESS（画面左）を表示させます。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PIO Home/Open&lt;/code&gt;をクリックします。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;New Project&lt;/code&gt;をクリックすると、Project Wizardが表示されます。&lt;code&gt;Name&lt;/code&gt;、&lt;code&gt;Boad&lt;/code&gt;、&lt;code&gt;Framework&lt;/code&gt;を以下の通り入力して、&lt;code&gt;Finish&lt;/code&gt;をクリックします。新しいBoardを選択した時、プログラミングに必要なファイルのダウンロードするために数分かかります。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name:&lt;code&gt;Test&lt;/code&gt;と記入 &lt;/br&gt;&lt;/li&gt;
&lt;li&gt;Board:&lt;code&gt;ST Nucleo L452RE&lt;/code&gt;を選択 &lt;/br&gt;&lt;/li&gt;
&lt;li&gt;Framework:&lt;code&gt;Arduino &lt;/code&gt;を選択 &lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C:\Users\ユーザ名\ .platformio の下に、①と②のふたつのフォルダが出来ていることを確認して下さい。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;leafony_ap03とleafony_ap03jsonのダウンロードと保存&#34;&gt;③Leafony_AP03と④Leafony_AP03.jsonのダウンロードと保存&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;以下からダウンロードし、所定の場所に保存して下さい。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://github.com/Leafony/platformio-LEAFONY_AP03&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project Wizardの&lt;code&gt;Board&lt;/code&gt;の検索窓に&lt;code&gt;Leafony_AP03&lt;/code&gt;が表示されることを確認して下さい。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&#34;text-align: right&#34;&gt;
&lt;A HREF=&#34;javascript:history.back()&#34;&gt;前のページに戻る&lt;/A&gt;
&lt;/p&gt;&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Windows 64bitのV2.12.0、V2.6.0、V2.4.0は、動作確認済み。v2.5.0は動作しないので要注意。&lt;/br&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;イメージファイルが日本語のフォルダの下にある場合は、書き込みすることが出来ないので別の場所にコピーします。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: STM32CubeIDEの設定</title>
      <link>https://docs.leafony.com/docs/environment/stm32/stm32cube_ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/docs/environment/stm32/stm32cube_ide/</guid>
      <description>
        
        
        &lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;STM32CubeIDEは、STマイクロエレクトロニクス社が提供しているSTM32マイコンの統合開発環境です。プロジェクト生成機能やSTM32マイコンの初期化コード自動生成ツールを統合したオール･イン･ワンの統合開発環境になっています。&lt;/br&gt;&lt;/p&gt;
&lt;h2 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h2&gt;
&lt;p&gt;Basic Kit 2
パソコン (Windows、macOS、または Linux)&lt;/p&gt;
&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;
&lt;h3 id=&#34;javaのインストール&#34;&gt;Javaのインストール&lt;/h3&gt;
&lt;p&gt;STM32CubeIDEを動かすには、Javaが必要です。&lt;a href=&#34;https://www.java.com/ja/&#34;&gt;こちら&lt;/a&gt;からインストールして下さい。&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;stm32cubeideのインストール&#34;&gt;STM32CubeIDEのインストール&lt;/h3&gt;
&lt;p&gt;STM32CubeIDEのインストーラを&lt;a href=&#34;https://www.st.com/ja/development-tools/stm32cubeide.html&#34;&gt;こちら&lt;/a&gt;からダウンロードして下さい。&lt;/br&gt;
次に、インストーラは、Cドライブの直下で実行して下さい。詳しくは、&lt;a href=&#34;https://knuth256.com/2021/04/17/stm32%E5%85%A5%E9%96%80%E3%80%80stm32cubeide%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%80%90windows10%E3%80%91/&#34;&gt;こちら&lt;/a&gt;を参照して下さい。&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;stm32cubeprogのインストール&#34;&gt;STM32CubeProgのインストール&lt;/h3&gt;
&lt;p&gt;STM32MCUにプログラムを書き込むために、STM32CubeProgが必要です。&lt;a href=&#34;https://www.stmcu.jp/design/sw_dev/pc_soft/58442/&#34;&gt;こちら&lt;/a&gt;からインストールして下さい。&lt;/br&gt;&lt;/p&gt;
&lt;h3 id=&#34;tera-teamのインストール&#34;&gt;Tera Teamのインストール&lt;/h3&gt;
&lt;p&gt;STM32CubeIDEは、プログラムをアドオンしないとシリアルポートの出力が出来ないので、Tera Termsを使います。&lt;/br&gt;
&lt;a href=&#34;https://ja.osdn.net/projects/ttssh2/&#34;&gt;こちら&lt;/a&gt;からインストールして下さい。&lt;/br&gt;&lt;/p&gt;
&lt;h2 id=&#34;クイックスタート&#34;&gt;クイックスタート&lt;/h2&gt;
&lt;p&gt;「Hello Wold」の事例で、STM32CubeIDEの使ったプログラムの作成からシリアルポートの出力までを紹介します。使用するソフトウエアは以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロジェクトの作成からビルドまで:STM32CubeIDE&lt;/li&gt;
&lt;li&gt;プログラムの書込み：STM32CubeProg&lt;/li&gt;
&lt;li&gt;シリアルポートの出力:Tera Term&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;プロジェクトの作成&#34;&gt;プロジェクトの作成&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;STM32CubeIDを起動すると、&lt;code&gt;STM32CubeID Launcher&lt;/code&gt;の画面が表示されます。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ワークスペースは、以下のデフォルトのままを使用し、&lt;code&gt;Launch&lt;/code&gt; をクリックします。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Work Space :&lt;code&gt;C:\Users\ユーザ名\STM32CubeIDE\workspace_1.11.2&lt;/code&gt;&lt;/br&gt;&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;File&lt;/code&gt; → &lt;code&gt;NEW&lt;/code&gt; →　&lt;code&gt;STM32 Project&lt;/code&gt; を選択し、暫く経つと、&lt;code&gt;STM32 Project&lt;/code&gt; の画面が表示されます。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;今回は、&lt;a href=&#34;https://docs.leafony.com/docs/leaf/processor/ap03/&#34;&gt;STM32 MCUリーフ&lt;/a&gt;にプログラムを書き込むので、画面左上の&lt;code&gt;MCU/MPU Sector&lt;/code&gt;をクリックします。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;画面左の&lt;code&gt;Commercail Part Number&lt;/code&gt;に、STM32L452REI6を入れて下さい。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;画面右に&lt;code&gt;STM32L452REI6&lt;/code&gt;を選択して&lt;code&gt;Next&lt;/code&gt;をクリックすると、&lt;code&gt;Setup STM32 project&lt;/code&gt;の画面が現れます。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Setup STM32 project&lt;/code&gt;の画面に、以下を入力して、&lt;code&gt;Finish&lt;/code&gt;をクリックすると、&lt;code&gt;Hello_World.ioc&lt;/code&gt;の画面が現れます。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Project Name          : Hello_Worldと記入&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;Targeted Language     : C++を選択&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;Targeted Binary Type  : Excutableを選択&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;Targeted Project Type : STM32Cubeを選択&lt;/br&gt;&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;デバイスの設定初期化コードの自動生成&#34;&gt;デバイスの設定(初期化コードの自動生成)&lt;/h3&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;
&lt;p&gt;Hello_World.iocで、UARTの設定をします。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PA2&lt;/code&gt;と&lt;code&gt;PA3&lt;/code&gt;のPortを使ってシリアル通信をするので、&lt;code&gt;Pinout ＆ Configureation&lt;/code&gt;の画面で設定をします。&lt;/br&gt;
設定方法は、Port番号を左クリックして以下を選択します。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PA2                   : USART2_TXを選択&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;PA3                   : USART2_RXを選択&lt;/br&gt;&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;画面左の&lt;code&gt;Connectivity&lt;/code&gt;→ &lt;code&gt;USART2&lt;/code&gt;をクリックすると、&lt;code&gt;USART2 Model ＆ Configration&lt;/code&gt;の画面が現れます。&lt;/br&gt;
&lt;code&gt;Model&lt;/code&gt;では、以下の設定をします。&lt;/br&gt;
&lt;code&gt;Configration&lt;/code&gt;は、デフォルトで使用します。(ボーレートの設定は115200を使用。&lt;code&gt;Parameter Settings&lt;/code&gt;で変更可能)&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model                         : Asynchronous&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;Hardware Flow Control(RS232)  : Disable&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;Hardware Flow Control(RS485) :チェックを入れない(デフォルト)&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;./STM32CubeIDE_1.png&#34; width=&#34;840&#34;&gt; &lt;/br&gt;&lt;/p&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;&lt;code&gt;Project&lt;/code&gt;→&lt;code&gt;Generate Code&lt;/code&gt;をクリックすると、Debugのフォルダの中に&lt;code&gt;main.c&lt;/code&gt;のコードが自動生成されます。&lt;/br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;コードの記述&#34;&gt;コードの記述&lt;/h3&gt;
&lt;ol start=&#34;12&#34;&gt;
&lt;li&gt;&lt;code&gt;main.c&lt;/code&gt;の自動生成されたコードに、ユーザコードを追記します。&lt;/br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;24行:stdio.hは、入力/出力のヘッダーファイルを読み込ませます。&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* USER CODE BEGIN Includes */&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* USER CODE END Includes */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;68行:printfを呼び出す前に、初期化します。&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* USER CODE BEGIN 1 */&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;setbuf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* USER CODE END 1 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;101行:1秒毎に、「Hello World」を出力させます。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* USER CODE BEGIN 3 */&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello World&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;HAL_Delay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;200行:printfを実装して、UARTでテキストを送信します。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* USER CODE BEGIN 4 */&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_write&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ptr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;HAL_UART_Transmit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;huart2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uint8_t&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ptr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;/* USER CODE END 4 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;13&#34;&gt;
&lt;li&gt;main.cが書けたらビルドをします。&lt;code&gt;Project&lt;/code&gt;→&lt;code&gt;Build All&lt;/code&gt;をクリックして、ビルドして下さい。ログに&lt;code&gt;0 errors, 0 warnings&lt;/code&gt;が表示されたらOKです。&lt;/br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ソースコード：&lt;a href=&#34;https://github.com/Leafony/STM32CubeIDE-Sample-Software/tree/main/Hello_World&#34;&gt;Hello_World&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stm32cubeprogによるプログラムの書込み&#34;&gt;STM32CubeProgによるプログラムの書込み&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.leafony.com/docs/environment/stm32/arduino_ide/#%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3%E3%81%A8%E6%8E%A5%E7%B6%9A&#34;&gt;こちら&lt;/a&gt; を参考に、LeafonyをPCに接続し、STM32 MCUリーフの&lt;code&gt;プログラムスイッチ&lt;/code&gt;をプログラム側(LED点灯)にし下さい。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STM32CubeProgを起動させて下さい。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;画面右の接続先を&lt;code&gt;UART&lt;/code&gt;にし、&lt;code&gt;Connect&lt;/code&gt;をクリックして下さい。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;画面左の&lt;code&gt;Erasing ＆ Programing&lt;/code&gt;をクリックして、以下の設定をします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;File path: &lt;code&gt;C:\Users\ユーザ名\STM32CubeIDE\workspace_1.11.2\HelloWorld\Debug\HelloWorld.elf&lt;/code&gt;を選択&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;Veryfy programing にチェツク&lt;/br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Start Programming&lt;/code&gt;をクリックし、&lt;code&gt;Download verified successfully&lt;/code&gt;が表示されたらokです。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;シリアルポートの出力&#34;&gt;シリアルポートの出力&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ファイル&lt;/code&gt;→ &lt;code&gt;新しい接続先&lt;/code&gt;をクリックし、シリアルポートを接続します。&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;次に　&lt;code&gt;設定&lt;/code&gt;→&lt;code&gt;シリアルポート&lt;/code&gt;をクリックし、スポードを115200を選択します。&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hello Wolrd&lt;/code&gt;が1秒毎に表示されれば、okです。&lt;/br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/br&gt;
&lt;/br&gt;
&lt;h1 id=&#34;tips&#34;&gt;Tips&lt;/h1&gt;
&lt;h2 id=&#34;プロジェクトのインポート&#34;&gt;プロジェクトのインポート&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;STM32CubeIDを起動すると、&lt;code&gt;STM32CubeID Launcher&lt;/code&gt;の画面が表示されます。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ワークスペースは、以下のデフォルトのままを使用し、&lt;code&gt;Launch&lt;/code&gt; をクリックします。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Work Space :&lt;code&gt;C:\Users\ユーザ名\STM32CubeIDE\workspace_1.11.2&lt;/code&gt;&lt;/br&gt;&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;File&lt;/code&gt; → &lt;code&gt;Open Project From File System on Archieves&lt;/code&gt; を選択すると、&lt;code&gt;Import Project From File System on Archieves&lt;/code&gt; の画面が表示されます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ソースを選択し、&lt;code&gt;Finish&lt;/code&gt;をクリックすると、&lt;code&gt;Project Explorer&lt;/code&gt;が立ち上がります。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Import Source         : &lt;code&gt;C:\Users\ユーザ名\STM32CubeIDE\workspace_1.11.2\プロジェクト名&lt;/code&gt; を選択&lt;/br&gt;&lt;/br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;プロジェクトを終了する時は、&lt;code&gt;Project Explorer&lt;/code&gt;からプロジェクトを右クリックし&lt;code&gt;Delete&lt;/code&gt;します。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Project Explorer&lt;/code&gt;は、&lt;code&gt;Window&lt;/code&gt;→ &lt;code&gt;Show View&lt;/code&gt;→&lt;code&gt;Project Explorer&lt;/code&gt;で立ち上がります。&lt;/br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&#34;text-align: right&#34;&gt;
&lt;A HREF=&#34;javascript:history.back()&#34;&gt;前のページに戻る&lt;/A&gt;
&lt;/p&gt;&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Githubには、プロジェクトのファイルを一度でアップロード出来ません。何回か分割してアップロードすれば出来ます。　&lt;/br&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: デバッガの接続方法</title>
      <link>https://docs.leafony.com/docs/environment/stm32/stm32_debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/docs/environment/stm32/stm32_debug/</guid>
      <description>
        
        
        &lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;STM32 MCUリーフは、STマイクロエレクトロニクス社のSTM32CubeIDEとSTLINK-V3SETまたはST-LINK/V2のデバッガを使用してデバッグを行うことができます。Arduino IDEを使用する場合はデバッガを使用したデバッグはできません。ここでは、これらのデバッガとの接続方法を説明します。&lt;/br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stmcu.jp/design/hwdevelop/debugger/&#34; target=&#34;_blank&#34;&gt; STM32 デバッガ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;STM32 MCU、Shield、Screw&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stmcu.jp/design/hwdevelop/debugger/62359/&#34; target=&#34;_blank&#34;&gt; STLINK-V3SET&lt;/a&gt;の場合 /&lt;a href=&#34;https://www.stmcu.jp/design/hwdevelop/debugger/52828/&#34; target=&#34;_blank&#34;&gt; ST-LINK/V2&lt;/a&gt;＋&lt;a href=&#34;https://www.olimex.com/Products/ARM/JTAG/ARM-JTAG-20-10/&#34; target=&#34;_blank&#34;&gt; ARM-JTAG-20-10&lt;/a&gt;の場合&lt;/li&gt;
&lt;li&gt;USBケーブル&lt;/li&gt;
&lt;li&gt;PC (Windows)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;接続方法&#34;&gt;接続方法&lt;/h2&gt;
&lt;p&gt;Shieldリーフに1.27mmピッチのSWDコネクタ(FTSH-105-01-L-D）が実装されているので、STM32 MCUリーフを装着し、デバッガと接続する。&lt;/p&gt;
&lt;h3 id=&#34;stlink-v3setの場合&#34;&gt;STLINK-V3SETの場合&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./STLINKV3SET.jpg&#34; width=&#34;750&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h3 id=&#34;st-linkv2arm-jtag-20-10の場合&#34;&gt;ST-LINK/V2＋ARM-JTAG-20-10の場合&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./STLINKV2.jpg&#34; width=&#34;750&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p style=&#34;text-align: right&#34;&gt;
&lt;A HREF=&#34;javascript:history.back()&#34;&gt;前のページに戻る&lt;/A&gt;
&lt;/p&gt;
      </description>
    </item>
    
  </channel>
</rss>
