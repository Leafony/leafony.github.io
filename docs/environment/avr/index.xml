<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leafony – AVR MCU 開発環境設定マニュアル</title>
    <link>https://docs.leafony.com/docs/environment/avr/</link>
    <description>Recent content in AVR MCU 開発環境設定マニュアル on Leafony</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://docs.leafony.com/docs/environment/avr/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: AVR MCU の Arduino IDE 設定</title>
      <link>https://docs.leafony.com/docs/environment/avr/arduino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/docs/environment/avr/arduino/</guid>
      <description>
        
        
        &lt;p&gt;Leafonyを動作させるには、プログラムを書き込む必要があります。Basic Kitは、センサの値を読んでBluetoothでデータを送信するプログラムが、工場出荷時に書き込まれています。&lt;/p&gt;
&lt;h2 id=&#34;用意するもの&#34;&gt;用意するもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Basic Kit&lt;/li&gt;
&lt;li&gt;USBケーブル&lt;/li&gt;
&lt;li&gt;パソコン (Windows、Mac OS X 、または Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;arduino-ideのインストール&#34;&gt;Arduino IDEのインストール&lt;/h2&gt;
&lt;p&gt;Arduino IDEは、オープンソースの電子工作向け開発環境で、プログラムを記述して書き込んだり、データを表示したりすることができます。以下の手順で、Arduino IDEをインストールを行います。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.arduino.cc/&#34; target=&#34;_blank&#34;&gt;Arduinoのホームページ&lt;/a&gt; 
から&lt;code&gt;SOFTWARE&lt;/code&gt;のページを開きます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Download&lt;/code&gt;で、インストーラをダウンロードします。&lt;/li&gt;
&lt;li&gt;画面の指示に従って、インストールします。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;previous-ide-ダウンロード&#34;&gt;Previous IDE ダウンロード&lt;/h3&gt;
&lt;p&gt;下記より、Previous IDEのダウンロードが出来ます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.arduino.cc/en/Main/OldSoftwareReleases#previous&#34;&gt;Previous IDE Releases&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パソコンと接続&#34;&gt;パソコンと接続&lt;/h2&gt;
&lt;p&gt;USBケーブルでパソコンを接続します。&lt;br&gt;&lt;/p&gt;
&lt;img src=&#34;./basic_assemble.png&#34; width=&#34;530&#34;&gt;
&lt;br&gt;&lt;br&gt;
&lt;h2 id=&#34;マイコンボードの設定&#34;&gt;マイコンボードの設定&lt;/h2&gt;
&lt;p&gt;Arduino IDEでLeafonyの開発を行うために、下記の手順でIDEの設定を行います。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Arduino AVR Boards&lt;/code&gt;は、IDEと一緒にインストールされます。&lt;code&gt;Arduino AVR Boards&lt;/code&gt; のバージョンは、&lt;code&gt;ツール→ボード→ボードマネージャ&lt;/code&gt; で確認をすることが出来ます。また、&lt;code&gt;バージョンを選択&lt;/code&gt;をすれば、以前のものをインストールすることが出来ます。&lt;br&gt;&lt;br&gt;
&lt;img src=&#34;./ardunoide_boardmanager.jpg&#34; width=&#34;640&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ツール → ボード&lt;/code&gt;から、&lt;code&gt;Arduino Pro or Pro Mini&lt;/code&gt;を選択、&lt;code&gt;プロセッサ&lt;/code&gt;で&lt;code&gt;ATmega328P (3.3V,8MHz)&lt;/code&gt;を選択します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;./IDE_ATmega.jpg&#34; width=&#34;640&#34;&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;ツール → シリアルポート&lt;/code&gt;から、Leafonyが接続されているシリアルポートを選択します。&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;./IDE_COM.jpg&#34; width=&#34;640&#34;&gt;
&lt;h2 id=&#34;マイコンボードの動作確認&#34;&gt;マイコンボードの動作確認&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Arduino IDEで&lt;code&gt;ファイル → スケッチ例 → 01.Basics → Blink&lt;/code&gt;をクリックし、サンプルアプリを開きます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;マイコンボードに書き込む&lt;/code&gt;ボタンを押すをLeafonyにプログラムが書き込まれます。&lt;/li&gt;
&lt;li&gt;AVR MCUリーフに搭載されたLEDが点滅していることが確認できれば完了です。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;スケッチのピンの指定&#34;&gt;スケッチのピンの指定&lt;/h3&gt;
&lt;p&gt;ピンは、名前(Name)で指定して下さい。&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.leafony.com/docs/leaf/processor/ap01/ap01_pinassign.png&#34;&gt;&lt;img src=&#34;https://docs.leafony.com/docs/leaf/processor/ap01/ap01_pinassign.png&#34; width=&#34;750&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ライブラリのインストール&#34;&gt;ライブラリのインストール&lt;/h2&gt;
&lt;p&gt;一部のリーフを使用するには、追加のライブラリをインストールする必要があります。下記の手順を参考に、あらかじめ全てののライブラリをインストールしておきます。&lt;/p&gt;
&lt;h3 id=&#34;1-使用するライブラリ&#34;&gt;1. 使用するライブラリ&lt;/h3&gt;
&lt;p&gt;各Kitで使用するライブラリは以下の通りです。&lt;/p&gt;
&lt;table class=&#34;table-hover&#34;&gt;
  &lt;thread&gt;
    &lt;tr&gt;
      &lt;th&gt;リーフ名&lt;/th&gt;
      &lt;th&gt;インクルードファイル&lt;/th&gt;
      &lt;th&gt;推奨バージョン&lt;/th&gt;
      &lt;th&gt;説明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thread&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;BLE&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/Leafony/TBGLib&#34; target=&#34;_blank&#34;&gt;TBGLib.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Bluetoothライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td rowspan=6&gt;4-Sensors&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_Sensor&#34; target=&#34;_blank&#34;&gt;Adafruit_Sensor.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;ユニファイドセンサドライバ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_BusIO&#34; target=&#34;_blank&#34;&gt;Adafruit_BusIO_Register.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Bus IOライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/ameltech/sme-hts221-library&#34; target=&#34;_blank&#34;&gt;HTS221.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;温湿度センサライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_HTS221&#34; target=&#34;_blank&#34;&gt;Adafruit_HTS221.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;Adafruit温湿度センサライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/closedcube/ClosedCube_OPT3001_Arduino&#34; target=&#34;_blank&#34;&gt;ClosedCube_OPT3001.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;照度センサライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/Adafruit_LIS3DH/tree/1.1.2&#34; target=&#34;_blank&#34;&gt;Adafruit_LIS3DH.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;1.1.2&lt;/td&gt;
      &lt;td&gt;加速度センサライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LCD&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/tomozh/arduino_ST7032&#34; target=&#34;_blank&#34;&gt;ST7032.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;LCDライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AVR MCU&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/PaulStoffregen/MsTimer2&#34; target=&#34;_blank&#34;&gt;MsTimer2.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;タイマ割り込みライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RTC&amp;MicroSD&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/adafruit/RTClib&#34; target=&#34;_blank&#34;&gt;RTClib.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;RTCライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td rowspan=2&gt;STM32 MCU&lt;/td&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/stm32duino/STM32RTC&#34; target=&#34;_blank&#34;&gt;STM32RTC.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;STM32RTCライブラリ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&#34;https://github.com/stm32duino/STM32LowPower&#34; target=&#34;_blank&#34;&gt;STM32LowPower.h&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td&gt;STM32LowPowerライブラリ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2-ライブラリをダウンロード&#34;&gt;2. ライブラリをダウンロード&lt;/h3&gt;
&lt;p&gt;上記表のリンクをクリックすると、ライブラリのGitHubリポジトリにアクセスします。&lt;code&gt;Code → Download ZIP&lt;/code&gt;をクリックし、ライブラリをダウンロードします。&lt;/p&gt;
&lt;img src=&#34;github_1.png&#34; width=&#34;600&#34;&gt;
&lt;h3 id=&#34;3-ライブラリをインクルード&#34;&gt;3. ライブラリをインクルード&lt;/h3&gt;
&lt;p&gt;Arduinoを立ち上げ、&lt;code&gt;スケッチ → ライブラリをインクルード → ZIP形式のライブラリをインストール&lt;/code&gt;の順に選択して、先程ダウンロードしたZIPファイルを読み込みます。&lt;/p&gt;
&lt;img src=&#34;IDE_libinclude.png&#34; width=&#34;640&#34;&gt;  
&lt;h2 id=&#34;困ったときには&#34;&gt;困ったときには&lt;/h2&gt;
&lt;p&gt;お問い合わせをする前に、&lt;a href=&#34;https://docs.leafony.com/docs/getting-started/solution&#34; target=&#34;_blank&#34;&gt;困ったときには&lt;/a&gt;を読んでみてください。&lt;/p&gt;
&lt;p style=&#34;text-align: right&#34;&gt;
&lt;A HREF=&#34;javascript:history.back()&#34;&gt;前のページに戻る&lt;/A&gt;
&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 旧バージョンArduino IDE</title>
      <link>https://docs.leafony.com/docs/environment/avr/arduino_ver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/docs/environment/avr/arduino_ver/</guid>
      <description>
        
        
        &lt;h2 id=&#34;旧バージョンのarduino-ide-インストール方法&#34;&gt;旧バージョンのArduino IDE インストール方法&lt;/h2&gt;
&lt;p&gt;Arduino IDE のバージョンによって、動作しないことがあります。その場合、動作検証済みのバージョンを使います。下記より、旧バージョンをダウンロードすることができます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.arduino.cc/en/Main/OldSoftwareReleases#previous&#34;&gt;Previous IDE Releases&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;arduino-avr-boardsの確認と変更&#34;&gt;Arduino AVR Boardsの確認と変更&lt;/h2&gt;
&lt;p&gt;通常はインストールした Arduino IDE のバージョンに対応するバージョンの Arduino AVR Boards がインストールされますが、環境により異なるバージョンの Arduino AVR Boards が指定されている場合があります。
そのため Arduino IDE の&lt;code&gt;ツール→ボード→ボードマネージャ&lt;/code&gt; を開いて Arduino AVR Boards のバージョンを確認してください。
&lt;img src=&#34;./ardunoide_boards.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;もし想定と異なるバージョンの場合は&lt;code&gt;バージョンの選択&lt;/code&gt;から必要なバージョンを選択して&lt;code&gt;インストール&lt;/code&gt;してください。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./ardunoide_boardmanager.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p style=&#34;text-align: right&#34;&gt;
&lt;A HREF=&#34;javascript:history.back()&#34;&gt;前のページに戻る&lt;/A&gt;
&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: PlatformIO Settings for AVR MCU</title>
      <link>https://docs.leafony.com/docs/environment/avr/platformio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.leafony.com/docs/environment/avr/platformio/</guid>
      <description>
        
        
        &lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Arduino IDEの代わりに、PlatformIOをLeafonyの開発環境として使うことも可能です。
PlatformIOを使うと、ライブラリのバージョン管理やボード設定の管理などを簡単に行えるだけでなく、
Visual Studio Codeの強力なプラグインを活用し、より快適な開発をすることができます。&lt;/p&gt;
&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;
&lt;p&gt;PlatformIOはVisual Studio Code (以下、VSCode)のプラグインです。
事前に以下のソフトウェアをインストールする必要があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;platformioのインストール&#34;&gt;PlatformIOのインストール&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;VSCodeを起動し、「拡張機能」タブを開く。&lt;/li&gt;
&lt;li&gt;検索窓に&lt;code&gt;platformio ide&lt;/code&gt;を入力する。&lt;/li&gt;
&lt;li&gt;PlatformIO IDEをインストールする。&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;./001.jpg&#34; width=&#34;300&#34;&gt;
&lt;h2 id=&#34;クイックスタート&#34;&gt;クイックスタート&lt;/h2&gt;
&lt;h3 id=&#34;新規プロジェクトを作成&#34;&gt;新規プロジェクトを作成&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;PlatformIO Home&lt;/code&gt;ボタンを押してPlatformIOのホームを表示する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;New Project&lt;/code&gt;をクリック。&lt;/li&gt;
&lt;li&gt;任意のプロジェクト名を指定し、&lt;code&gt;Board&lt;/code&gt;で適切なボードを選択。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;フォルダに含まれる&lt;code&gt;main.cpp&lt;/code&gt;を開き、以下のコードを貼り付け。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;Arduino.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;setup&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// LEDピンを出力ピンに設定
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;pinMode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LED_BUILTIN&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;OUTPUT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;digitalWrite&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LED_BUILTIN&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;HIGH&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// LEDを点灯
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;delay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;999&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;                       &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 1秒待つ
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;digitalWrite&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LED_BUILTIN&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;LOW&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// LEDを消灯
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;delay&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;999&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;                       &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 1秒待つ
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;code&gt;Build&lt;/code&gt;ボタンを押してプロジェクトをビルド。&lt;/li&gt;
&lt;li&gt;LeafonyをPCに接続。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Upload&lt;/code&gt;ボタンを押してプロジェクトをLeafonyに書き込み。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ライブラリをインストール&#34;&gt;ライブラリをインストール&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;PlatformIO Home&lt;/code&gt;ボタンを押してPlatformIOのホームを表示する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Libraries&lt;/code&gt;タブを開く。&lt;/li&gt;
&lt;li&gt;検索窓に&lt;code&gt;OPT3001&lt;/code&gt;と入力し、照度センサOPT3001用ライブラリを検索。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ClosedCube OPT3001&lt;/code&gt;をクリック。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Add to Project&lt;/code&gt;ボタンをクリックし、&lt;code&gt;Add&lt;/code&gt;で追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;platformio.ini&lt;/code&gt;を開く。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib_deps&lt;/code&gt;オプションに&lt;code&gt;closedcube/ClosedCube OPT3001 @ &amp;lt;バージョン&amp;gt;&lt;/code&gt;が追加されているか確認。&lt;/li&gt;
&lt;li&gt;下記のコードを貼り付けると、上記の操作をしなくても簡単にライブラリの環境を設定することができる。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;[env:pro8MHzatmega328]
platform = atmelavr
board = pro8MHzatmega328
framework = arduino
lib_deps = 
	closedcube/ClosedCube OPT3001 @ ^1.1.2
	adafruit/Adafruit LIS3DH@1.1.2
	https://github.com/ameltech/sme-hts221-library.git
	https://github.com/Leafony/TBGLib
	tomozh/ST7032@0.0.0-alpha+sha.501bf64fe6
	paulstoffregen/MsTimer2@^1.1
	adafruit/RTClib@^1.11.2
	adafruit/Adafruit Unified Sensor@^1.1.4
	adafruit/Adafruit BusIO@^1.5.0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;書き込みとシリアルモニタ&#34;&gt;書き込みとシリアルモニタ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Serial Port Monitor&lt;/code&gt;ボタンを押すと、シリアルモニタが表示される。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;PlatformIO for VSCodeのより詳細な使い方は、公式ドキュメントを参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.platformio.org/en/latest/integration/ide/vscode.html#ide-vscode&#34;&gt;https://docs.platformio.org/en/latest/integration/ide/vscode.html#ide-vscode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;text-align: right&#34;&gt;
&lt;A HREF=&#34;javascript:history.back()&#34;&gt;前のページに戻る&lt;/A&gt;
&lt;/p&gt;
      </description>
    </item>
    
  </channel>
</rss>
